/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.7.21-log : Database - apidev
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `brief` varchar(200) DEFAULT NULL,
  `content` longtext NOT NULL,
  `click` int(11) NOT NULL DEFAULT '0',
  `type` varchar(20) NOT NULL DEFAULT 'PAGE',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `moduleId` varchar(50) NOT NULL DEFAULT 'top',
  `mkey` varchar(20) DEFAULT NULL COMMENT 'key，唯一键，页面唯一标识',
  `canDelete` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否可删除，可修key，默认可以',
  `category` varchar(50) DEFAULT NULL,
  `canComment` tinyint(4) NOT NULL DEFAULT '1',
  `commentCount` int(11) NOT NULL DEFAULT '0',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `markdown` text NOT NULL,
  `projectId` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `mkey_UNIQUE` (`mkey`),
  KEY `index_mod_type_cat_seq_time` (`moduleId`,`type`,`category`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`id`,`name`,`brief`,`content`,`click`,`type`,`status`,`createTime`,`moduleId`,`mkey`,`canDelete`,`category`,`canComment`,`commentCount`,`sequence`,`markdown`,`projectId`) values ('153189062110601000014','配置参数说明','初始化配置:xsloader(config)','<h2 id=\"一-使用例子\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-使用例子\"><span class=\"octicon octicon-link\"></span></a>一、使用例子</h2>\n<pre data-source-line=\"3\"><code class=\"hljs\">xsloader(<span class=\"hljs-name\">config</span>)<span class=\"hljs-comment\">;</span></code></pre><h2 id=\"二-config格式\" data-source-line=\"6\"><a class=\"anchor\" href=\"#二-config格式\"><span class=\"octicon octicon-link\"></span></a>二、config格式</h2>\n<pre data-source-line=\"7\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    baseUrl:</span><span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-symbol\">    urlArgs:</span>{},\n<span class=\"hljs-symbol\">    autoUrlArgs:</span>false,\n<span class=\"hljs-symbol\">    paths:</span>{},\n<span class=\"hljs-symbol\">    depsPaths:</span>{},\n<span class=\"hljs-symbol\">    deps:</span>{},\n<span class=\"hljs-symbol\">    modulePrefix:</span>{},\n<span class=\"hljs-symbol\">    defineFunction:</span>{},\n<span class=\"hljs-symbol\">    defaultVersion:</span>{},\n<span class=\"hljs-symbol\">    waitSeconds:</span><span class=\"hljs-number\">10</span>,\n<span class=\"hljs-symbol\">    instance:</span><span class=\"hljs-string\">\"single\"</span>,\n<span class=\"hljs-symbol\">    properties:</span>{\n<span class=\"hljs-symbol\">        name1:</span>anyType,\n<span class=\"hljs-symbol\">        name2:</span>{\n<span class=\"hljs-symbol\">            subName1:</span>anyType\n        },\n<span class=\"hljs-symbol\">        name3:</span><span class=\"hljs-string\">\"123\"</span>,\n<span class=\"hljs-symbol\">        name4:</span><span class=\"hljs-string\">\"name${name3}-${name2.subName1}\"</span>,\n<span class=\"hljs-symbol\">        name5:</span>function(){}\n    }\n}</code></pre><h2 id=\"三-属性说明\" data-source-line=\"31\"><a class=\"anchor\" href=\"#三-属性说明\"><span class=\"octicon octicon-link\"></span></a>三、属性说明</h2>\n<h3 id=\"1baseurl\" data-source-line=\"33\"><a class=\"anchor\" href=\"#1baseurl\"><span class=\"octicon octicon-link\"></span></a>1.baseUrl</h3>\n<p data-source-line=\"34\">【String】基础参考路径，默认为当前页所在目录。</p>\n<hr>\n<h3 id=\"2路径相对与绝对路径\" data-source-line=\"37\"><a class=\"anchor\" href=\"#2路径相对与绝对路径\"><span class=\"octicon octicon-link\"></span></a>2.路径:<mark>相对与绝对路径</mark>；</h3>\n<ol data-source-line=\"38\">\n<li><strong>./</strong> 表示当前目录；</li>\n<li><strong>../</strong> 表示上一级目录；</li>\n<li><strong>xx/</strong> 表示相对于baseUrl；</li>\n<li><strong>//xxx、/xxx、<a href=\"https://xxx\">https://xxx</a>、<a href=\"http://xxx\">http://xxx</a> 等</strong> 表示绝对地址 ；</li>\n</ol>\n<hr>\n<h3 id=\"3moduleprefix\" data-source-line=\"44\"><a class=\"anchor\" href=\"#3moduleprefix\"><span class=\"octicon octicon-link\"></span></a>3.modulePrefix</h3>\n<p data-source-line=\"45\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\".\"、\"/\"开头。</p>\n<pre data-source-line=\"47\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"lib/\"</span>:{\n    		replace:<span class=\"hljs-string\">\"/cdn/lib/\"</span>\n    },\n    <span class=\"hljs-string\">\"lib2/\"</span>:{\n    		replace:<span class=\"hljs-string\">\"/cdn2/lib/\"</span>\n    }\n}</code></pre><p data-source-line=\"57\"><strong>例如</strong>：所有的\"lib/\"前缀会替换成\"/cdn/lib/\",\"lib2/\"前缀会替换成\"/cdn2/lib/\"。</p>\n<hr>\n<h3 id=\"4urlargs\" data-source-line=\"60\"><a class=\"anchor\" href=\"#4urlargs\"><span class=\"octicon octicon-link\"></span></a>4.urlArgs</h3>\n<p data-source-line=\"61\">【对象】</p>\n<pre data-source-line=\"62\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"key\"</span><span class=\"hljs-symbol\">:value</span>,\n    <span class=\"hljs-string\">\"key2\"</span><span class=\"hljs-symbol\">:value2</span>\n}</code></pre><h4 id=\"对key的说明\" data-source-line=\"68\"><a class=\"anchor\" href=\"#对key的说明\"><span class=\"octicon octicon-link\"></span></a>对key的说明：</h4>\n<ol data-source-line=\"69\">\n<li>key<mark>以\".\"开头</mark>，表示相对于xsloader地址的模块；</li>\n<li>key为绝对地址；</li>\n<li>key为相对于baseUrl的地址(不以\".\"开头的相对地址)；</li>\n<li>key为含有modulePrefix前缀的地址；</li>\n<li>key为模块名；</li>\n<li>key以\"*[\"开头，表示指定前缀的地址，支持相对地址(\".\"开头相对于xsloader地址，其他相对于baseUrl)；（支持modulePrefix前缀替换）</li>\n<li>key以\"*]\"开头，表示指定后缀的地址；</li>\n<li>key为\"*\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；</li>\n</ol>\n<h4 id=\"对value的说明\" data-source-line=\"77\"><a class=\"anchor\" href=\"#对value的说明\"><span class=\"octicon octicon-link\"></span></a>对value的说明：</h4>\n<ol data-source-line=\"78\">\n<li>value为字符串；</li>\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；</li>\n</ol>\n<hr>\n<h3 id=\"5autourlargs\" data-source-line=\"82\"><a class=\"anchor\" href=\"#5autourlargs\"><span class=\"octicon octicon-link\"></span></a>5.autoUrlArgs</h3>\n<p data-source-line=\"83\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。</p>\n<hr>\n<h3 id=\"6paths\" data-source-line=\"86\"><a class=\"anchor\" href=\"#6paths\"><span class=\"octicon octicon-link\"></span></a>6.paths</h3>\n<p data-source-line=\"87\">【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。</p>\n<hr>\n<h3 id=\"7depspaths\" data-source-line=\"90\"><a class=\"anchor\" href=\"#7depspaths\"><span class=\"octicon octicon-link\"></span></a>7.depsPaths</h3>\n<p data-source-line=\"91\">【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块<mark>配置依赖</mark>。</p>\n<hr>\n<h3 id=\"8deps\" data-source-line=\"94\"><a class=\"anchor\" href=\"#8deps\"><span class=\"octicon octicon-link\"></span></a>8.deps</h3>\n<p data-source-line=\"95\">【对象】用于配置依赖。</p>\n<pre data-source-line=\"97\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"key\"</span><span class=\"hljs-symbol\">:value</span>,\n    <span class=\"hljs-string\">\"key2\"</span><span class=\"hljs-symbol\">:value2</span>\n}</code></pre><h4 id=\"对key的说明-2\" data-source-line=\"103\"><a class=\"anchor\" href=\"#对key的说明-2\"><span class=\"octicon octicon-link\"></span></a>对key的说明：</h4>\n<ol data-source-line=\"104\">\n<li>key为\"*\"表示对depsPaths中的所有模块添加依赖，但\"*\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；</li>\n<li>key的格式为\"path_or_module1::path_or_module2::path_or_module3...\"表示为指定的模块或路径js添加依赖；</li>\n</ol>\n<h4 id=\"对value的说明-2\" data-source-line=\"106\"><a class=\"anchor\" href=\"#对value的说明-2\"><span class=\"octicon octicon-link\"></span></a>对value的说明：</h4>\n<ol data-source-line=\"107\">\n<li>value为字符串,添加一个依赖；</li>\n<li>value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false；当然支持内嵌依赖、orderDep默认为true)；</li>\n</ol>\n<hr>\n<h3 id=\"9definefunction\" data-source-line=\"111\"><a class=\"anchor\" href=\"#9definefunction\"><span class=\"octicon octicon-link\"></span></a>9.defineFunction</h3>\n<p data-source-line=\"112\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。</p>\n<pre data-source-line=\"114\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"moduleName\"</span><span class=\"hljs-symbol\">:function</span>(<span class=\"hljs-name\">originCallback</span>,originThis,originArgs)\n    {\n        return originCallback.apply(<span class=\"hljs-name\">originThis</span>, originArgs)<span class=\"hljs-comment\">;</span>\n    }\n}</code></pre><hr>\n<h3 id=\"10defaultversion\" data-source-line=\"124\"><a class=\"anchor\" href=\"#10defaultversion\"><span class=\"octicon octicon-link\"></span></a>10.defaultVersion</h3>\n<p data-source-line=\"125\">【对象】默认包名。</p>\n<pre data-source-line=\"127\"><code class=\"hljs\">{\n    <span class=\"hljs-symbol\">\'group</span>:project\':<span class=\"hljs-symbol\">\'versionName\'</span>\n}</code></pre><hr>\n<h3 id=\"11waitseconds\" data-source-line=\"134\"><a class=\"anchor\" href=\"#11waitseconds\"><span class=\"octicon octicon-link\"></span></a>11.waitSeconds</h3>\n<p data-source-line=\"135\">【number】require等待时间，单位秒，默认10。</p>\n<hr>\n<h3 id=\"12properties\" data-source-line=\"138\"><a class=\"anchor\" href=\"#12properties\"><span class=\"octicon octicon-link\"></span></a>12.properties</h3>\n<p data-source-line=\"139\">【对象】用于配变量，所有的字符串都可以使用变量。</p>\n<pre data-source-line=\"141\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    name1:</span>anyType,\n<span class=\"hljs-symbol\">    name2:</span>{\n<span class=\"hljs-symbol\">    	subName1:</span>anyType\n    },\n<span class=\"hljs-symbol\">    name3:</span><span class=\"hljs-string\">\"123\"</span>,\n<span class=\"hljs-symbol\">    name4:</span><span class=\"hljs-string\">\"name${name3}-${name2.subName1}\"</span>,\n<span class=\"hljs-symbol\">    name5:</span>function(){<span class=\"hljs-comment\">//注意：this为当前的properties</span>\n    \n    }\n}</code></pre><h4 id=\"说明\" data-source-line=\"154\"><a class=\"anchor\" href=\"#说明\"><span class=\"octicon octicon-link\"></span></a>说明：</h4>\n<ol data-source-line=\"155\">\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；</li>\n<li>通过${properName}引用字符串属性；</li>\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；</li>\n<li>key中也支持属性引用(除了properties)；</li>\n</ol>\n<hr>\n<h2 id=\"13xsloaderonerror\" data-source-line=\"161\"><a class=\"anchor\" href=\"#13xsloaderonerror\"><span class=\"octicon octicon-link\"></span></a>13.xsloader.onError</h2>\n<p data-source-line=\"162\">全局异常回调。</p>\n<pre data-source-line=\"164\"><code class=\"hljs\">xsloader.onError=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code,errinfo</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.error(code);\n    <span class=\"hljs-built_in\">console</span>.error(errinfo);\n};</code></pre>',51,'ARTICLE',1,'2018-07-18 13:10:21','153189041004409000012',NULL,1,'API说明',1,0,1001,'## 一、使用例子\n\n```\nxsloader(config);\n```\n## 二、config格式\n```\n{\n    baseUrl:\"\",\n    urlArgs:{},\n    autoUrlArgs:false,\n    paths:{},\n    depsPaths:{},\n    deps:{},\n    modulePrefix:{},\n    defineFunction:{},\n    defaultVersion:{},\n    waitSeconds:10,\n    instance:\"single\",\n    properties:{\n        name1:anyType,\n        name2:{\n            subName1:anyType\n        },\n        name3:\"123\",\n        name4:\"name${name3}-${name2.subName1}\",\n        name5:function(){}\n    }\n}\n```\n## 三、属性说明\n\n### 1.baseUrl\n【String】基础参考路径，默认为当前页所在目录。\n\n---\n### 2.路径:==相对与绝对路径==；\n1. **./** 表示当前目录；\n2. **../** 表示上一级目录；\n3. **xx/** 表示相对于baseUrl；\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\n\n---\n### 3.modulePrefix\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\".\"、\"/\"开头。\n\n```\n{\n    \"lib/\":{\n    		replace:\"/cdn/lib/\"\n    },\n    \"lib2/\":{\n    		replace:\"/cdn2/lib/\"\n    }\n}\n```\n**例如**：所有的\"lib/\"前缀会替换成\"/cdn/lib/\",\"lib2/\"前缀会替换成\"/cdn2/lib/\"。\n\n---\n### 4.urlArgs\n【对象】\n```\n{\n    \"key\":value,\n    \"key2\":value2\n}\n```\n#### 对key的说明：\n1. key==以\".\"开头==，表示相对于xsloader地址的模块；\n2. key为绝对地址；\n3. key为相对于baseUrl的地址(不以\".\"开头的相对地址)；\n4. key为含有modulePrefix前缀的地址；\n5. key为模块名；\n6. key以\"*[\"开头，表示指定前缀的地址，支持相对地址(\".\"开头相对于xsloader地址，其他相对于baseUrl)；（支持modulePrefix前缀替换）\n7. key以\"*]\"开头，表示指定后缀的地址；\n8. key为\"\\*\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\*的；\n#### 对value的说明：\n1. value为字符串；\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\n\n---\n### 5.autoUrlArgs\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\n\n---\n### 6.paths\n【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。\n\n---\n### 7.depsPaths\n【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块==配置依赖==。\n\n---\n### 8.deps\n【对象】用于配置依赖。\n\n```\n{\n    \"key\":value,\n    \"key2\":value2\n}\n```\n#### 对key的说明：\n1. key为\"\\*\"表示对depsPaths中的所有模块添加依赖，但\"\\*\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\n2. key的格式为\"path_or_module1::path_or_module2::path_or_module3...\"表示为指定的模块或路径js添加依赖；\n#### 对value的说明：\n1. value为字符串,添加一个依赖；\n2. value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false；当然支持内嵌依赖、orderDep默认为true)；\n\n---\n### 9.defineFunction\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\n\n```\n{\n    \"moduleName\":function(originCallback,originThis,originArgs)\n    {\n        return originCallback.apply(originThis, originArgs);\n    }\n}\n```\n\n---\n### 10.defaultVersion\n【对象】默认包名。\n\n```\n{\n    \'group:project\':\'versionName\'\n}\n```\n\n---\n### 11.waitSeconds\n【number】require等待时间，单位秒，默认10。\n\n---\n### 12.properties\n【对象】用于配变量，所有的字符串都可以使用变量。\n\n```\n{\n    name1:anyType,\n    name2:{\n    	subName1:anyType\n    },\n    name3:\"123\",\n    name4:\"name${name3}-${name2.subName1}\",\n    name5:function(){//注意：this为当前的properties\n    \n    }\n}\n```\n#### 说明：\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\n2. 通过${properName}引用字符串属性；\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\n4. key中也支持属性引用(除了properties)；\n\n---\n## 13.xsloader.onError\n全局异常回调。\n\n```\nxsloader.onError=function(code,errinfo){\n    console.error(code);\n    console.error(errinfo);\n};\n```','153189028248007000010'),('153190644215601000032','define、require、invoker、[deps]','定义模块与使用模块，[deps]等说明','<h2 id=\"1define定义模块\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1define定义模块\"><span class=\"octicon octicon-link\"></span></a>1.define定义模块</h2>\n<p data-source-line=\"2\">以下content可以是任何类型，当content为<mark>function时表示回调函数</mark>。</p>\n<h3 id=\"使用形式\" data-source-line=\"3\"><a class=\"anchor\" href=\"#使用形式\"><span class=\"octicon octicon-link\"></span></a>使用形式：</h3>\n<ol data-source-line=\"4\">\n<li>define([deps],content)</li>\n<li>define(content)</li>\n<li>define(moduleName,[deps],content)</li>\n<li>define(moduleName,content)</li>\n</ol>\n<pre data-source-line=\"9\"><code class=\"hljs\">define([<span class=\"hljs-string\">\"moduleA\"</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(A)</span></span>{\n\n});</code></pre><hr>\n<h2 id=\"2definethen\" data-source-line=\"16\"><a class=\"anchor\" href=\"#2definethen\"><span class=\"octicon octicon-link\"></span></a>2.define.then</h2>\n<pre data-source-line=\"18\"><code class=\"hljs\">define(...).<span class=\"hljs-keyword\">then</span>({\n    <span class=\"hljs-string\">\"onError\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n    \n    },\n    <span class=\"hljs-string\">\"orderDep\"</span>:<span class=\"hljs-keyword\">false</span>\n});</code></pre><ol data-source-line=\"26\">\n<li>onError错误回调</li>\n<li>orderDep表示是否按照顺序加载依赖，默false。</li>\n</ol>\n<hr>\n<h2 id=\"3require\" data-source-line=\"30\"><a class=\"anchor\" href=\"#3require\"><span class=\"octicon octicon-link\"></span></a>3.require</h2>\n<h3 id=\"使用形式-2\" data-source-line=\"31\"><a class=\"anchor\" href=\"#使用形式-2\"><span class=\"octicon octicon-link\"></span></a>使用形式：</h3>\n<ol data-source-line=\"32\">\n<li>require(\"moduleName\"),获取已经加载的模块；如果没有加载过，会抛出异常。</li>\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\"a\",\"b\",\"c\");</li>\n<li>require([deps],function(dep1,dep2,...){})</li>\n</ol>\n<hr>\n<h2 id=\"4requirethen\" data-source-line=\"37\"><a class=\"anchor\" href=\"#4requirethen\"><span class=\"octicon octicon-link\"></span></a>4.require.then</h2>\n<pre data-source-line=\"39\"><code class=\"hljs\"><span class=\"hljs-built_in\">require</span>(...).<span class=\"hljs-keyword\">then</span>({\n    <span class=\"hljs-string\">\"onError\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n    \n    },\n    <span class=\"hljs-string\">\"orderDep\"</span>:<span class=\"hljs-keyword\">false</span>\n});</code></pre><ol data-source-line=\"47\">\n<li>onError错误回调</li>\n<li>orderDep表示是否按照顺序加载依赖，默false。</li>\n</ol>\n<hr>\n<h2 id=\"5this与_invoker_\" data-source-line=\"51\"><a class=\"anchor\" href=\"#5this与_invoker_\"><span class=\"octicon octicon-link\"></span></a>5.this与_invoker_</h2>\n<p data-source-line=\"52\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：</p>\n<ol data-source-line=\"53\">\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；</li>\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数(默认为true)：</li>\n</ol>\n<ul data-source-line=\"55\">\n<li>\n<ol>\n<li>当没有提供relativeUrl时，获取当前模块的url路径；</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\" data-source-line=\"57\">\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；</li>\n<li>getName，function，获取当前模块或插件的名称；</li>\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)</li>\n</ol>\n<hr>\n<h2 id=\"6deps\" data-source-line=\"62\"><a class=\"anchor\" href=\"#6deps\"><span class=\"octicon octicon-link\"></span></a>6.[deps]</h2>\n<p data-source-line=\"63\">格式[module1,module2,...,moduleX]</p>\n<ol data-source-line=\"64\">\n<li>版本模块:moduleX=\"group:project:version\",如\"cn.xishan:demo:1.0\"。</li>\n<li>版本模块（默认版本）：moduleX=\"group:project\"(需要配置默认版本,否则会报错)。</li>\n<li>module名称：moduleX=\"myModule\",其中myModule在paths或depsPaths中定义过、不以\".js\"结尾。</li>\n<li>path路径(不可省略.js后缀)：如moduleX=\"/js/..../myModuleName.js\"</li>\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\"m1\",\"m2\"],\"m3\",\"m4\"],则[(orderDep),\"m1\",\"m2\"]里的orderDep（默认为true）为true表示顺序加载</li>\n</ol>\n<hr>\n<h2 id=\"7重要说明\" data-source-line=\"71\"><a class=\"anchor\" href=\"#7重要说明\"><span class=\"octicon octicon-link\"></span></a>7.<mark>重要说明</mark></h2>\n<ol data-source-line=\"72\">\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。</li>\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。</li>\n<li>模块路径应该都以\".js\"为后缀。</li>\n</ol>',25,'ARTICLE',1,'2018-07-18 17:34:02','153189041004409000012',NULL,1,'API说明',1,0,1000,'## 1.define定义模块\n以下content可以是任何类型，当content为==function时表示回调函数==。\n### 使用形式：\n1. define([deps],content)\n2. define(content)\n3. define(moduleName,[deps],content)\n4. define(moduleName,content)\n\n```\ndefine([\"moduleA\"],function(A){\n\n});\n```\n\n---\n## 2.define.then\n\n```\ndefine(...).then({\n    \"onError\":function(err){\n    \n    },\n    \"orderDep\":false\n});\n```\n1. onError错误回调\n2. orderDep表示是否按照顺序加载依赖，默false。\n\n---\n## 3.require\n### 使用形式：\n1. require(\"moduleName\"),获取已经加载的模块；如果没有加载过，会抛出异常。\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\"a\",\"b\",\"c\");\n3. require([deps],function(dep1,dep2,...){})\n\n---\n## 4.require.then\n\n```\nrequire(...).then({\n    \"onError\":function(err){\n    \n    },\n    \"orderDep\":false\n});\n```\n1. onError错误回调\n2. orderDep表示是否按照顺序加载依赖，默false。\n\n---\n## 5.this与_invoker_\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数(默认为true)：\n- 1. 当没有提供relativeUrl时，获取当前模块的url路径；\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\n4. getName，function，获取当前模块或插件的名称；\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\n\n---\n## 6.[deps]\n格式[module1,module2,...,moduleX]\n1. 版本模块:moduleX=\"group:project:version\",如\"cn.xishan:demo:1.0\"。\n2. 版本模块（默认版本）：moduleX=\"group:project\"(需要配置默认版本,否则会报错)。\n3. module名称：moduleX=\"myModule\",其中myModule在paths或depsPaths中定义过、不以\".js\"结尾。\n4. path路径(不可省略.js后缀)：如moduleX=\"/js/..../myModuleName.js\"\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\"m1\",\"m2\"],\"m3\",\"m4\"],则[(orderDep),\"m1\",\"m2\"]里的orderDep（默认为true）为true表示顺序加载\n\n---\n## 7.==重要说明==\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\n3. 模块路径应该都以\".js\"为后缀。','153189028248007000010'),('153190648624301000033','插件定义、内置插件与模块','插件定义、内置插件与模块','<h2 id=\"1自定义插件\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1自定义插件\"><span class=\"octicon octicon-link\"></span></a>1.自定义插件</h2>\n<p data-source-line=\"2\">pluginObject格式:</p>\n<pre data-source-line=\"4\"><code class=\"hljs\">{\n  	<span class=\"hljs-string\">\"pluginMain\"</span><span class=\"hljs-symbol\">:function</span>(<span class=\"hljs-name\">pluginArgs</span>, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}，\n  	<span class=\"hljs-string\">\"isSingle\"</span><span class=\"hljs-symbol\">:true//</span>当pluginArgs相同时，使用之前的\n}</code></pre><p data-source-line=\"13\">定义例子：</p>\n<pre data-source-line=\"15\"><code class=\"hljs\">define(<span class=\"hljs-string\">\"pluginA\"</span>,[deps],{\n    <span class=\"hljs-string\">\"pluginMain\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\"hljs-rest_arg\">...)\n  	{\n  	\n  	}\n});\n\ndefine</span>([deps],{\n    <span class=\"hljs-string\">\"pluginMain\"</span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\"hljs-rest_arg\">...)\n  	{\n  	\n  	}\n});</span></span></span></code></pre><ol data-source-line=\"30\">\n<li>onload(result，ignoreAspect=true)</li>\n<li>onerror(err)</li>\n<li>isSingle:默认为true。为true时，若pluginArgs相同则只会执行一次插件的pluginMain；若为false，始终会执行插件。</li>\n</ol>\n<hr>\n<h2 id=\"2内置插件\" data-source-line=\"35\"><a class=\"anchor\" href=\"#2内置插件\"><span class=\"octicon octicon-link\"></span></a>2.内置插件</h2>\n<h3 id=\"csstextjson\" data-source-line=\"37\"><a class=\"anchor\" href=\"#csstextjson\"><span class=\"octicon octicon-link\"></span></a>css!,text!,json!</h3>\n<p data-source-line=\"38\">【格式】:type!resourceUrl；</p>\n<h3 id=\"name\" data-source-line=\"40\"><a class=\"anchor\" href=\"#name\"><span class=\"octicon octicon-link\"></span></a>name!</h3>\n<p data-source-line=\"41\">【格式】：name!moduleName=&gt;&gt;modulePath\n【作用】：用于给模块命名。</p>\n<h3 id=\"window\" data-source-line=\"44\"><a class=\"anchor\" href=\"#window\"><span class=\"octicon octicon-link\"></span></a>window!</h3>\n<p data-source-line=\"45\">【格式】：window!varNameInWindow=&gt;&gt;modulePath\n【作用】：用于把模块添加到window对象中。</p>\n<h3 id=\"withdeps\" data-source-line=\"48\"><a class=\"anchor\" href=\"#withdeps\"><span class=\"octicon octicon-link\"></span></a>withdeps!</h3>\n<p data-source-line=\"49\">【格式】：withdeps!modulePath=&gt;&gt;[deps]\n【作用】：用于方便给模块添加依赖。</p>\n<hr>\n<h2 id=\"3内置模块\" data-source-line=\"53\"><a class=\"anchor\" href=\"#3内置模块\"><span class=\"octicon octicon-link\"></span></a>3.内置模块</h2>\n<h3 id=\"exports\" data-source-line=\"55\"><a class=\"anchor\" href=\"#exports\"><span class=\"octicon octicon-link\"></span></a>exports</h3>\n<p data-source-line=\"56\">代表当前模块，可以直接为添加属性。</p>\n<h3 id=\"xshttp\" data-source-line=\"58\"><a class=\"anchor\" href=\"#xshttp\"><span class=\"octicon octicon-link\"></span></a>xshttp</h3>\n<p data-source-line=\"59\">网络访模块。</p>\n<h3 id=\"xsmsg\" data-source-line=\"61\"><a class=\"anchor\" href=\"#xsmsg\"><span class=\"octicon octicon-link\"></span></a>xsmsg</h3>\n<p data-source-line=\"62\">窗口通信模块，支持跨域。</p>\n<h3 id=\"xslinkedlist\" data-source-line=\"64\"><a class=\"anchor\" href=\"#xslinkedlist\"><span class=\"octicon octicon-link\"></span></a>XsLinkedList</h3>\n<p data-source-line=\"65\">链表。</p>',14,'ARTICLE',1,'2018-07-18 17:34:46','153189041004409000012',NULL,1,'API说明',1,0,500,'## 1.自定义插件\npluginObject格式:\n\n```\n{\n  	\"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}，\n  	\"isSingle\":true//当pluginArgs相同时，使用之前的\n}\n```\n定义例子：\n\n```\ndefine(\"pluginA\",[deps],{\n    \"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n});\n\ndefine([deps],{\n    \"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n});\n```\n1. onload(result，ignoreAspect=true)\n2. onerror(err)\n3. isSingle:默认为true。为true时，若pluginArgs相同则只会执行一次插件的pluginMain；若为false，始终会执行插件。\n\n---\n## 2.内置插件\n\n### css!,text!,json!\n【格式】:type!resourceUrl；\n\n### name!\n【格式】：name!moduleName=>>modulePath\n【作用】：用于给模块命名。\n\n### window!\n【格式】：window!varNameInWindow=>>modulePath\n【作用】：用于把模块添加到window对象中。\n\n### withdeps!\n【格式】：withdeps!modulePath=>>[deps]\n【作用】：用于方便给模块添加依赖。\n\n---\n## 3.内置模块\n\n### exports\n代表当前模块，可以直接为添加属性。\n\n### xshttp\n网络访模块。\n\n### xsmsg\n窗口通信模块，支持跨域。\n\n### XsLinkedList\n链表。','153189028248007000010'),('153190958824901000049','xshttp','网络访问模块，对XMLHttpRequest的封装。','<h2 id=\"1使用方式\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1使用方式\"><span class=\"octicon octicon-link\"></span></a>1.使用方式</h2>\n<pre data-source-line=\"3\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xshttp\"</span>);\n或\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xshttp\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">http</span>)</span>{\n\n});\n或\ndefine([<span class=\"hljs-string\">\"xshttp\"</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">http</span>)</span>{\n\n});</code></pre><h3 id=\"通过option方式\" data-source-line=\"16\"><a class=\"anchor\" href=\"#通过option方式\"><span class=\"octicon octicon-link\"></span></a>通过option方式</h3>\n<pre data-source-line=\"18\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> option={\n    url:<span class=\"hljs-string\">\"Hello/say\"</span>,\n    method:<span class=\"hljs-string\">\"get\"</span>,\n    params:{\n        \n    },\n    ok:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    \n    },\n    fail:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    \n    }\n};\n\nhttp(option).done();</code></pre><hr>\n<h3 id=\"通过函数设置的方式\" data-source-line=\"37\"><a class=\"anchor\" href=\"#通过函数设置的方式\"><span class=\"octicon octicon-link\"></span></a>通过函数设置的方式</h3>\n<p data-source-line=\"38\"><strong>注意</strong>：</p>\n<ol data-source-line=\"39\">\n<li>参数与函数是一一对应的。</li>\n<li>两种调用方式必都以\"<mark>.done()</mark>\"结束。</li>\n</ol>\n<pre data-source-line=\"42\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">http</span>()\n<span class=\"hljs-selector-class\">.url</span>(<span class=\"hljs-string\">\"Hello/say\"</span>)<span class=\"hljs-selector-class\">.method</span>(<span class=\"hljs-string\">\"get\"</span>)<span class=\"hljs-selector-class\">.params</span>({})\n<span class=\"hljs-selector-class\">.ok</span>(function(){\n\n})\n<span class=\"hljs-selector-class\">.fail</span>(function(){\n\n})\n<span class=\"hljs-selector-class\">.done</span>();</code></pre><h2 id=\"2基本参数说明\" data-source-line=\"55\"><a class=\"anchor\" href=\"#2基本参数说明\"><span class=\"octicon octicon-link\"></span></a>2.基本参数说明</h2>\n<h3 id=\"url\" data-source-line=\"57\"><a class=\"anchor\" href=\"#url\"><span class=\"octicon octicon-link\"></span></a>url</h3>\n<p data-source-line=\"58\">【String】设置访问的地址</p>\n<h3 id=\"method\" data-source-line=\"60\"><a class=\"anchor\" href=\"#method\"><span class=\"octicon octicon-link\"></span></a>method</h3>\n<p data-source-line=\"61\">【String】设置请求方法：get、post、put、delete等</p>\n<h3 id=\"params\" data-source-line=\"63\"><a class=\"anchor\" href=\"#params\"><span class=\"octicon octicon-link\"></span></a>params</h3>\n<p data-source-line=\"64\">【对象】设置请求参数，为对象的属性会被转换成字符串。</p>\n<h3 id=\"headers\" data-source-line=\"66\"><a class=\"anchor\" href=\"#headers\"><span class=\"octicon octicon-link\"></span></a>headers</h3>\n<p data-source-line=\"67\">【对象】设置请求头。</p>\n<h3 id=\"async\" data-source-line=\"69\"><a class=\"anchor\" href=\"#async\"><span class=\"octicon octicon-link\"></span></a>async</h3>\n<p data-source-line=\"70\">【boolean】设置是否异步，默认true。</p>\n<h3 id=\"multipart\" data-source-line=\"72\"><a class=\"anchor\" href=\"#multipart\"><span class=\"octicon octicon-link\"></span></a>multiPart</h3>\n<p data-source-line=\"73\">【boolean】设置是否同multiPart表单提交，默false。</p>\n<h3 id=\"handletype\" data-source-line=\"75\"><a class=\"anchor\" href=\"#handletype\"><span class=\"octicon octicon-link\"></span></a>handleType</h3>\n<p data-source-line=\"76\">【String】设置响应结果的处理类型：json，text。默认json。</p>\n<h3 id=\"ok\" data-source-line=\"78\"><a class=\"anchor\" href=\"#ok\"><span class=\"octicon octicon-link\"></span></a>ok</h3>\n<p data-source-line=\"79\">【function】成功的回调。</p>\n<pre data-source-line=\"81\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result,xhr)</span></span>{\n\n}</code></pre><h3 id=\"fail\" data-source-line=\"87\"><a class=\"anchor\" href=\"#fail\"><span class=\"octicon octicon-link\"></span></a>fail</h3>\n<p data-source-line=\"88\">【function】失败的回调。</p>\n<pre data-source-line=\"90\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n\n}</code></pre><h3 id=\"uploadstart\" data-source-line=\"96\"><a class=\"anchor\" href=\"#uploadstart\"><span class=\"octicon octicon-link\"></span></a>uploadStart</h3>\n<p data-source-line=\"97\">【function】文件上传开始的回调。</p>\n<h3 id=\"uploadprogress\" data-source-line=\"99\"><a class=\"anchor\" href=\"#uploadprogress\"><span class=\"octicon octicon-link\"></span></a>uploadProgress</h3>\n<p data-source-line=\"100\">【function】文件上传中的回调。</p>\n<h3 id=\"uploadok\" data-source-line=\"102\"><a class=\"anchor\" href=\"#uploadok\"><span class=\"octicon octicon-link\"></span></a>uploadOk</h3>\n<p data-source-line=\"103\">【function】文件上传成功的回调。</p>\n<h3 id=\"uploaderror\" data-source-line=\"106\"><a class=\"anchor\" href=\"#uploaderror\"><span class=\"octicon octicon-link\"></span></a>uploadError</h3>\n<p data-source-line=\"107\">【function】文件上传失败的回调。</p>\n<h3 id=\"uploadend\" data-source-line=\"109\"><a class=\"anchor\" href=\"#uploadend\"><span class=\"octicon octicon-link\"></span></a>uploadEnd</h3>\n<p data-source-line=\"110\">【function】文件上传结束的回调,不论成功与否。</p>\n<h3 id=\"_beforeopenhook\" data-source-line=\"112\"><a class=\"anchor\" href=\"#_beforeopenhook\"><span class=\"octicon octicon-link\"></span></a>_beforeOpenHook</h3>\n<p data-source-line=\"113\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。</p>\n<pre data-source-line=\"115\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _beforeOpenHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(option, callback,xhr)</span> </span>{\n	<span class=\"hljs-keyword\">callback</span>();\n};</code></pre><p data-source-line=\"120\"><strong>注意</strong>：只有调用callback(),才会继续进行请求。</p>\n<h3 id=\"_onokresponsehook\" data-source-line=\"123\"><a class=\"anchor\" href=\"#_onokresponsehook\"><span class=\"octicon octicon-link\"></span></a>_onOkResponseHook</h3>\n<p data-source-line=\"124\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。</p>\n<pre data-source-line=\"126\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _onOkResponseHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result, option, callback, xhr)</span> </span>{\n	<span class=\"hljs-keyword\">callback</span>(result);\n};</code></pre><p data-source-line=\"131\"><strong>注意</strong>：只有调用callback(result),才会继续调用ok回调。</p>\n<h3 id=\"_onfailresponsehook\" data-source-line=\"134\"><a class=\"anchor\" href=\"#_onfailresponsehook\"><span class=\"octicon octicon-link\"></span></a>_onFailResponseHook</h3>\n<p data-source-line=\"135\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。</p>\n<pre data-source-line=\"137\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _onFailResponseHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(option, callback, xhr,extraErrorType)</span> </span>{\n	callback(<span class=\"hljs-literal\">undefined</span>);\n};</code></pre><p data-source-line=\"142\"><strong>说明</strong>：</p>\n<ol data-source-line=\"143\">\n<li>callback(undefined)：表示进行默认fail回调。</li>\n<li>callback(false)：不会进后面的fail回调。</li>\n<li>callback(result)：会进行ok回调，回调结果是result。</li>\n<li>extraErrorType==\"parse-json-error\"：表示转换成json时出错。</li>\n</ol>',26,'ARTICLE',1,'2018-07-18 18:26:28','153189041004409000012',NULL,1,'API说明',1,0,386,'## 1.使用方式\n\n```\nvar http=require(\"xshttp\");\n或\nrequire(\"xshttp\",function(http){\n\n});\n或\ndefine([\"xshttp\"],function(http){\n\n});\n```\n\n\n### 通过option方式\n\n```\nvar option={\n    url:\"Hello/say\",\n    method:\"get\",\n    params:{\n        \n    },\n    ok:function(){\n    \n    },\n    fail:function(){\n    \n    }\n};\n\nhttp(option).done();\n```\n\n---\n### 通过函数设置的方式\n**注意**：\n1. 参数与函数是一一对应的。\n2. 两种调用方式必都以\"==.done()==\"结束。\n\n```\nhttp()\n.url(\"Hello/say\").method(\"get\").params({})\n.ok(function(){\n\n})\n.fail(function(){\n\n})\n.done();\n\n```\n\n## 2.基本参数说明\n\n### url\n【String】设置访问的地址\n\n### method\n【String】设置请求方法：get、post、put、delete等\n\n### params\n【对象】设置请求参数，为对象的属性会被转换成字符串。\n\n### headers\n【对象】设置请求头。\n\n### async\n【boolean】设置是否异步，默认true。\n\n### multiPart\n【boolean】设置是否同multiPart表单提交，默false。\n\n### handleType\n【String】设置响应结果的处理类型：json，text。默认json。\n\n### ok\n【function】成功的回调。\n\n```\nfunction(result,xhr){\n\n}\n```\n\n### fail\n【function】失败的回调。\n\n```\nfunction(err){\n\n}\n```\n\n### uploadStart\n【function】文件上传开始的回调。\n\n### uploadProgress\n【function】文件上传中的回调。\n\n### uploadOk\n【function】文件上传成功的回调。\n\n\n### uploadError\n【function】文件上传失败的回调。\n\n### uploadEnd\n【function】文件上传结束的回调,不论成功与否。\n\n### _beforeOpenHook\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\n\n```\nvar _beforeOpenHook = function(option, callback,xhr) {\n	callback();\n};\n```\n**注意**：只有调用callback(),才会继续进行请求。\n\n\n### _onOkResponseHook\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\n\n```\nvar _onOkResponseHook = function(result, option, callback, xhr) {\n	callback(result);\n};\n```\n**注意**：只有调用callback(result),才会继续调用ok回调。\n\n\n### _onFailResponseHook\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\n\n```\nvar _onFailResponseHook = function(option, callback, xhr,extraErrorType) {\n	callback(undefined);\n};\n```\n**说明**：\n1. callback(undefined)：表示进行默认fail回调。\n2. callback(false)：不会进后面的fail回调。\n3. callback(result)：会进行ok回调，回调结果是result。\n4. extraErrorType==\"parse-json-error\"：表示转换成json时出错。','153189028248007000010'),('153190964856301000050','xsmsg','窗口通信模块，支持跨域。','<pre data-source-line=\"1\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> xsmsg=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xsmsg\"</span>);</code></pre><h2 id=\"1option说明\" data-source-line=\"6\"><a class=\"anchor\" href=\"#1option说明\"><span class=\"octicon octicon-link\"></span></a>1.option说明</h2>\n<pre data-source-line=\"8\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    cmd:</span>命令类型名\n<span class=\"hljs-symbol\">    originSend:</span>发送源\n<span class=\"hljs-symbol\">    originReceive:</span>接收源\n<span class=\"hljs-symbol\">    listener:</span>消息监听\n<span class=\"hljs-symbol\">    connected:</span>成功连接\n<span class=\"hljs-symbol\">    conndata:</span>连接数据\n}</code></pre><p data-source-line=\"18\"><strong>参数说明</strong>:</p>\n<ol data-source-line=\"19\">\n<li>cmd:只有相同命令类型的，才可以进行连接</li>\n<li>originSend:【String】或【function(source)】(返回origin)</li>\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)</li>\n<li>listener:【function(data,sender,extra)】</li>\n<li>connected:【function(sender,conndata,extra)】</li>\n<li>conndata:【对象】连接时传递的对象</li>\n<li>extra.originStr：【字符串】对方页面的地址</li>\n</ol>\n<h2 id=\"2connectiframeiframe-option\" data-source-line=\"27\"><a class=\"anchor\" href=\"#2connectiframeiframe-option\"><span class=\"octicon octicon-link\"></span></a>2.connectIFrame(iframe, option)</h2>\n<p data-source-line=\"28\">用于连接iframe.</p>\n<ol data-source-line=\"29\">\n<li>iframe:dom对象或选择器</li>\n</ol>\n<h2 id=\"3connectparentoption\" data-source-line=\"31\"><a class=\"anchor\" href=\"#3connectparentoption\"><span class=\"octicon octicon-link\"></span></a>3.connectParent(option)</h2>\n<p data-source-line=\"32\">用于连接父页面.</p>\n<h2 id=\"4connecttopoption\" data-source-line=\"34\"><a class=\"anchor\" href=\"#4connecttopoption\"><span class=\"octicon octicon-link\"></span></a>4.connectTop(option)</h2>\n<p data-source-line=\"35\">用于连接顶层页面.</p>\n<h2 id=\"5connectopeneroption\" data-source-line=\"37\"><a class=\"anchor\" href=\"#5connectopeneroption\"><span class=\"octicon octicon-link\"></span></a>5.connectOpener(option)</h2>\n<p data-source-line=\"38\">用于连接打开本页面的窗口.</p>\n<h2 id=\"6listenmessageoption\" data-source-line=\"40\"><a class=\"anchor\" href=\"#6listenmessageoption\"><span class=\"octicon octicon-link\"></span></a>6.listenMessage(option)</h2>\n<p data-source-line=\"41\">用于监听其他页面的消息.</p>',11,'ARTICLE',1,'2018-07-18 18:27:29','153189041004409000012',NULL,1,'API说明',1,0,400,'```\nvar xsmsg=require(\"xsmsg\");\n```\n\n\n## 1.option说明\n\n```\n{\n    cmd:命令类型名\n    originSend:发送源\n    originReceive:接收源\n    listener:消息监听\n    connected:成功连接\n    conndata:连接数据\n}\n```\n**参数说明**:\n1. cmd:只有相同命令类型的，才可以进行连接\n2. originSend:【String】或【function(source)】(返回origin)\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\n4. listener:【function(data,sender,extra)】\n5. connected:【function(sender,conndata,extra)】\n6. conndata:【对象】连接时传递的对象\n7. extra.originStr：【字符串】对方页面的地址\n\n## 2.connectIFrame(iframe, option)\n用于连接iframe.\n1. iframe:dom对象或选择器\n\n## 3.connectParent(option)\n用于连接父页面.\n\n## 4.connectTop(option)\n用于连接顶层页面.\n\n## 5.connectOpener(option)\n用于连接打开本页面的窗口.\n\n## 6.listenMessage(option)\n用于监听其他页面的消息.','153189028248007000010'),('153190973123201000051','内置函数','内置函数','<h2 id=\"1xsloaderconfig\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1xsloaderconfig\"><span class=\"octicon octicon-link\"></span></a>1.xsloader.config()</h2>\n<p data-source-line=\"2\">获取最终配置对象。</p>\n<ol data-source-line=\"3\">\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。</li>\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。</li>\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。</li>\n</ol>\n<h2 id=\"2xsloaderscript\" data-source-line=\"7\"><a class=\"anchor\" href=\"#2xsloaderscript\"><span class=\"octicon octicon-link\"></span></a>2.xsloader.script()</h2>\n<p data-source-line=\"8\">得到xsloader的script对象。</p>\n<h2 id=\"3xsloaderextendtargetobj1obj2\" data-source-line=\"10\"><a class=\"anchor\" href=\"#3xsloaderextendtargetobj1obj2\"><span class=\"octicon octicon-link\"></span></a>3.xsloader.extend(target,obj1,obj2,...)</h2>\n<p data-source-line=\"11\">扩展对象。</p>\n<h2 id=\"4xsloaderextenddeeptargetobj1obj2\" data-source-line=\"13\"><a class=\"anchor\" href=\"#4xsloaderextenddeeptargetobj1obj2\"><span class=\"octicon octicon-link\"></span></a>4.xsloader.extendDeep(target,obj1,obj2,...)</h2>\n<p data-source-line=\"14\">深度扩展对象。</p>\n<h2 id=\"5xsloaderie_version\" data-source-line=\"16\"><a class=\"anchor\" href=\"#5xsloaderie_version\"><span class=\"octicon octicon-link\"></span></a>5.xsloader.IE_VERSION</h2>\n<p data-source-line=\"17\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。</p>\n<h2 id=\"6xsloaderasynccallfun\" data-source-line=\"19\"><a class=\"anchor\" href=\"#6xsloaderasynccallfun\"><span class=\"octicon octicon-link\"></span></a>6.xsloader.asyncCall(fun)</h2>\n<p data-source-line=\"20\">异步执行。</p>\n<h2 id=\"7xsloadertrycallfun-defaultreturnthiz\" data-source-line=\"22\"><a class=\"anchor\" href=\"#7xsloadertrycallfun-defaultreturnthiz\"><span class=\"octicon octicon-link\"></span></a>7.xsloader.tryCall(fun,[ defaultReturn,thiz])</h2>\n<p data-source-line=\"23\">调用fun，防止抛出异常。</p>\n<h2 id=\"8randid\" data-source-line=\"25\"><a class=\"anchor\" href=\"#8randid\"><span class=\"octicon octicon-link\"></span></a>8.randId</h2>\n<p data-source-line=\"26\">【或】xsloader.randId。生成一个随机的唯一ID。</p>\n<h2 id=\"9xsloadercloneobjisdeep\" data-source-line=\"28\"><a class=\"anchor\" href=\"#9xsloadercloneobjisdeep\"><span class=\"octicon octicon-link\"></span></a>9.xsloader.clone(obj,[isDeep])</h2>\n<p data-source-line=\"29\">复制对象。isDeep表示是否深度复制。</p>\n<h2 id=\"10xsloaderis\" data-source-line=\"31\"><a class=\"anchor\" href=\"#10xsloaderis\"><span class=\"octicon octicon-link\"></span></a>10.xsloader.is...</h2>\n<ol data-source-line=\"32\">\n<li>xsloader.isArray(arg)：是否是数组</li>\n<li>xsloader.isString(arg)：是否是字符串</li>\n<li>xsloader.isObject(arg)：是否是Object</li>\n<li>xsloader.isFunction(arg)：是否是function</li>\n<li>xsloader.isDate(arg)：是否是Date对象</li>\n<li>xsloader.isRegExp(arg):是否是正则表达式对象</li>\n</ol>\n<h2 id=\"11xsloadergetobjectattrobj-attrnamesdefaultvalue\" data-source-line=\"39\"><a class=\"anchor\" href=\"#11xsloadergetobjectattrobj-attrnamesdefaultvalue\"><span class=\"octicon octicon-link\"></span></a>11.xsloader.getObjectAttr(obj, attrNames,[defaultValue])</h2>\n<p data-source-line=\"40\">获取对象属性，支持多级调用。</p>\n<pre data-source-line=\"42\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> obj={\n    name:<span class=\"hljs-string\">\"Chen\"</span>,\n    skills:{\n        js:<span class=\"hljs-literal\">true</span>\n    }\n};\n\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"name\"</span>)===<span class=\"hljs-string\">\"Chen\"</span>\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"skills.js\"</span>)===<span class=\"hljs-literal\">true</span></code></pre><h2 id=\"12xsloadersetobjectattrobj-attrnames-value\" data-source-line=\"55\"><a class=\"anchor\" href=\"#12xsloadersetobjectattrobj-attrnames-value\"><span class=\"octicon octicon-link\"></span></a>12.xsloader.setObjectAttr(obj, attrNames, value)</h2>\n<p data-source-line=\"56\">设对象属性，支持多级设置。</p>\n<pre data-source-line=\"58\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> obj={\n    name:<span class=\"hljs-string\">\"\"</span>\n};\n\nxsloader.setObjectAttr(obj, <span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Chen\"</span>);\nxsloader.setObjectAttr(obj, <span class=\"hljs-string\">\"skills.js\"</span>, <span class=\"hljs-literal\">true</span>);\n\n\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"name\"</span>)===<span class=\"hljs-string\">\"Chen\"</span>\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"skills.js\"</span>)===<span class=\"hljs-literal\">true</span></code></pre><h2 id=\"13startswithstr-starts\" data-source-line=\"72\"><a class=\"anchor\" href=\"#13startswithstr-starts\"><span class=\"octicon octicon-link\"></span></a>13.startsWith(str, starts)</h2>\n<p data-source-line=\"73\">判断str是否以字符串starts开头。</p>\n<h2 id=\"14endswithstr-ends\" data-source-line=\"75\"><a class=\"anchor\" href=\"#14endswithstr-ends\"><span class=\"octicon octicon-link\"></span></a>14.endsWith(str, ends)</h2>\n<p data-source-line=\"76\">判断str是否以字符串ends结尾。</p>\n<h2 id=\"15xsparsejsonstroption\" data-source-line=\"78\"><a class=\"anchor\" href=\"#15xsparsejsonstroption\"><span class=\"octicon octicon-link\"></span></a>15.xsParseJson(str,[option])</h2>\n<p data-source-line=\"79\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\n<strong>说明</strong>：</p>\n<ol data-source-line=\"81\">\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。</li>\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。</li>\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。</li>\n</ol>\n<h2 id=\"16xsjson2stringobj\" data-source-line=\"85\"><a class=\"anchor\" href=\"#16xsjson2stringobj\"><span class=\"octicon octicon-link\"></span></a>16.xsJson2String(obj)</h2>\n<p data-source-line=\"86\">将对象obj转换成json字符串。</p>\n<h2 id=\"17indexinarrayarray-ele-compare\" data-source-line=\"88\"><a class=\"anchor\" href=\"#17indexinarrayarray-ele-compare\"><span class=\"octicon octicon-link\"></span></a>17.indexInArray(array, ele, [compare])</h2>\n<p data-source-line=\"89\">在array中查找指定元素ele第一次出现的位置。</p>\n<ol data-source-line=\"90\">\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。</li>\n</ol>\n<h2 id=\"18indexinarrayfromarray-eleoffset-compare\" data-source-line=\"92\"><a class=\"anchor\" href=\"#18indexinarrayfromarray-eleoffset-compare\"><span class=\"octicon octicon-link\"></span></a>18.indexInArrayFrom(array, ele,offset, [compare])</h2>\n<p data-source-line=\"93\">从offset开始查找，见indexInArray。</p>\n<h2 id=\"19getpathwithrelativepath-relative-ispathdir\" data-source-line=\"95\"><a class=\"anchor\" href=\"#19getpathwithrelativepath-relative-ispathdir\"><span class=\"octicon octicon-link\"></span></a>19.getPathWithRelative(path, relative,[ isPathDir])</h2>\n<p data-source-line=\"96\">获取相对路径。</p>\n<ol data-source-line=\"97\">\n<li>path：参考地址。</li>\n<li>relative：相对地址，可以是绝对地址。</li>\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\"/\"结尾、路径名称不含后缀表示目录）。</li>\n</ol>\n<h2 id=\"20appendargs2urlurl-urlargs\" data-source-line=\"101\"><a class=\"anchor\" href=\"#20appendargs2urlurl-urlargs\"><span class=\"octicon octicon-link\"></span></a>20.appendArgs2Url(url, urlArgs)</h2>\n<p data-source-line=\"102\">为url添加参数。</p>\n<ol data-source-line=\"103\">\n<li>urlArgs为字符串：如\"a=1&amp;b=2\"。</li>\n<li>urlArgs对象。</li>\n</ol>\n<h2 id=\"21querystring2paramsmapargsstr-decode\" data-source-line=\"106\"><a class=\"anchor\" href=\"#21querystring2paramsmapargsstr-decode\"><span class=\"octicon octicon-link\"></span></a>21.queryString2ParamsMap(argsStr, [decode])</h2>\n<p data-source-line=\"107\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。</p>\n<pre data-source-line=\"109\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-title\">queryString2ParamsMap</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"a=1&amp;b=2\"</span>)</span></span>\n返回：\n{\n    <span class=\"hljs-selector-tag\">a</span>:<span class=\"hljs-string\">\"1\"</span>,\n    <span class=\"hljs-selector-tag\">b</span>:<span class=\"hljs-string\">\"2\"</span>\n}</code></pre><h2 id=\"22arrayprototypeindexofelemfromindex\" data-source-line=\"118\"><a class=\"anchor\" href=\"#22arrayprototypeindexofelemfromindex\"><span class=\"octicon octicon-link\"></span></a>22.Array.prototype.indexOf(elem,[fromIndex])</h2>\n<p data-source-line=\"119\">查找元素在数组中出现的位置。</p>\n<h2 id=\"23arraypushalltargetarrarr\" data-source-line=\"121\"><a class=\"anchor\" href=\"#23arraypushalltargetarrarr\"><span class=\"octicon octicon-link\"></span></a>23.Array.pushAll(targetArr,arr)</h2>\n<p data-source-line=\"122\">将arr中的所有元素push到targetArr中。</p>',19,'ARTICLE',1,'2018-07-18 18:28:51','153189041004409000012',NULL,1,'API说明',1,0,380,'## 1.xsloader.config()\n获取最终配置对象。\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\n\n## 2.xsloader.script()\n得到xsloader的script对象。\n\n## 3.xsloader.extend(target,obj1,obj2,...)\n扩展对象。\n\n## 4.xsloader.extendDeep(target,obj1,obj2,...)\n深度扩展对象。\n\n## 5.xsloader.IE_VERSION\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\n\n## 6.xsloader.asyncCall(fun)\n异步执行。\n\n## 7.xsloader.tryCall(fun,[ defaultReturn,thiz])\n调用fun，防止抛出异常。\n\n## 8.randId\n【或】xsloader.randId。生成一个随机的唯一ID。\n\n## 9.xsloader.clone(obj,[isDeep])\n复制对象。isDeep表示是否深度复制。\n\n## 10.xsloader.is...\n1. xsloader.isArray(arg)：是否是数组\n2. xsloader.isString(arg)：是否是字符串\n3. xsloader.isObject(arg)：是否是Object\n4. xsloader.isFunction(arg)：是否是function\n5. xsloader.isDate(arg)：是否是Date对象\n6. xsloader.isRegExp(arg):是否是正则表达式对象\n\n## 11.xsloader.getObjectAttr(obj, attrNames,[defaultValue])\n获取对象属性，支持多级调用。\n\n```\nvar obj={\n    name:\"Chen\",\n    skills:{\n        js:true\n    }\n};\n\nxsloader.getObjectAttr(obj,\"name\")===\"Chen\"\nxsloader.getObjectAttr(obj,\"skills.js\")===true\n\n```\n\n## 12.xsloader.setObjectAttr(obj, attrNames, value)\n设对象属性，支持多级设置。\n\n```\nvar obj={\n    name:\"\"\n};\n\nxsloader.setObjectAttr(obj, \"name\", \"Chen\");\nxsloader.setObjectAttr(obj, \"skills.js\", true);\n\n\nxsloader.getObjectAttr(obj,\"name\")===\"Chen\"\nxsloader.getObjectAttr(obj,\"skills.js\")===true\n\n```\n\n## 13.startsWith(str, starts)\n判断str是否以字符串starts开头。\n\n## 14.endsWith(str, ends)\n判断str是否以字符串ends结尾。\n\n## 15.xsParseJson(str,[option])\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\n**说明**：\n1. 通过“/\\*{f}\\*/”与“/\\*{f}\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\*{f\\*/function(){}/\\*f}\\*/}。\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\n\n## 16.xsJson2String(obj)\n将对象obj转换成json字符串。\n\n## 17.indexInArray(array, ele, [compare])\n在array中查找指定元素ele第一次出现的位置。\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\n\n## 18.indexInArrayFrom(array, ele,offset, [compare])\n从offset开始查找，见indexInArray。\n\n## 19.getPathWithRelative(path, relative,[ isPathDir])\n获取相对路径。\n1. path：参考地址。\n2. relative：相对地址，可以是绝对地址。\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\"/\"结尾、路径名称不含后缀表示目录）。\n\n## 20.appendArgs2Url(url, urlArgs)\n为url添加参数。\n1. urlArgs为字符串：如\"a=1&b=2\"。\n2. urlArgs对象。\n\n## 21.queryString2ParamsMap(argsStr, [decode])\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\n\n```\nqueryString2ParamsMap(\"a=1&b=2\")\n返回：\n{\n    a:\"1\",\n    b:\"2\"\n}\n```\n\n## 22.Array.prototype.indexOf(elem,[fromIndex])\n查找元素在数组中出现的位置。\n\n## 23.Array.pushAll(targetArr,arr)\n将arr中的所有元素push到targetArr中。','153189028248007000010'),('153204958241201000001','基于html5的存储封装','lsave,lget,ldel,ssave,sget,sdel','<p data-source-line=\"1\"><strong><mark>说明</mark></strong>：以\"l\"开头的是对localStorage的封装，以\"s\"开头的是对sessionStorage的封装；内部会进行压缩处理。</p>\n<pre data-source-line=\"3\"><code class=\"hljs\"><span class=\"hljs-built_in\">var</span> sdk=<span class=\"hljs-attr\">...</span>;</code></pre><h2 id=\"lsavessave\" data-source-line=\"7\"><a class=\"anchor\" href=\"#lsavessave\"><span class=\"octicon octicon-link\"></span></a>lsave,ssave</h2>\n<pre data-source-line=\"9\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, obj)</span></span></code></pre><p data-source-line=\"12\">保存对象。</p>\n<h2 id=\"lgetsget\" data-source-line=\"14\"><a class=\"anchor\" href=\"#lgetsget\"><span class=\"octicon octicon-link\"></span></a>lget,sget</h2>\n<pre data-source-line=\"16\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, defaultValue)</span></span></code></pre><ol data-source-line=\"19\">\n<li>defaultValue 当没有找到时，返回该值。</li>\n<li>返回上次存储的对象。</li>\n</ol>\n<h2 id=\"ldelsdel\" data-source-line=\"22\"><a class=\"anchor\" href=\"#ldelsdel\"><span class=\"octicon octicon-link\"></span></a>ldel,sdel</h2>\n<pre data-source-line=\"24\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key)</span></span></code></pre><p data-source-line=\"27\">删除记录。</p>',13,'ARTICLE',1,'2018-07-20 09:19:42','153188673971709000006',NULL,1,'核心功能',1,0,1004,'**==说明==**：以\"l\"开头的是对localStorage的封装，以\"s\"开头的是对sessionStorage的封装；内部会进行压缩处理。\n\n```\nvar sdk=...;\n```\n\n## lsave,ssave\n\n```\nfunction(key, obj)\n```\n保存对象。\n\n## lget,sget\n\n```\nfunction(key, defaultValue)\n```\n1. defaultValue 当没有找到时，返回该值。\n2. 返回上次存储的对象。\n\n## ldel,sdel\n\n```\nfunction(key)\n```\n删除记录。','153188636499907000002'),('153205170284601000003','form表单','form表单转对象，对象回显到表单','<h2 id=\"1formjson\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1formjson\"><span class=\"octicon octicon-link\"></span></a>1.formJson</h2>\n<p data-source-line=\"2\">将表单转成json对象或数组。</p>\n<pre data-source-line=\"4\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(formSelector, option)</span></span></code></pre><p data-source-line=\"7\">参数说明：</p>\n<ol data-source-line=\"8\">\n<li>formSelector：form选择器或dom</li>\n</ol>\n<p data-source-line=\"10\">option说明：</p>\n<ol data-source-line=\"11\">\n<li>includeAllParams:默认为false，是否包含所有的参数、包括为空的。</li>\n<li>trim:【Boolean】默认true,是否调用trim()。</li>\n<li>toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。</li>\n</ol>\n<h2 id=\"2json2form\" data-source-line=\"15\"><a class=\"anchor\" href=\"#2json2form\"><span class=\"octicon octicon-link\"></span></a>2.json2Form</h2>\n<p data-source-line=\"16\">用于表单回显。</p>\n<pre data-source-line=\"18\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(formSelector, data)</span></span></code></pre><p data-source-line=\"21\">参数说明：</p>\n<ol data-source-line=\"22\">\n<li>formSelector：form选择器或dom</li>\n</ol>\n<h2 id=\"3form\" data-source-line=\"24\"><a class=\"anchor\" href=\"#3form\"><span class=\"octicon octicon-link\"></span></a>3.form</h2>\n<pre data-source-line=\"26\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(formSelector)</span></span></code></pre><p data-source-line=\"29\">参数说明：</p>\n<ol data-source-line=\"30\">\n<li>formSelector：form选择器或dom</li>\n</ol>\n<p data-source-line=\"32\"><strong>函数</strong>：</p>\n<h3 id=\"1submitby\" data-source-line=\"33\"><a class=\"anchor\" href=\"#1submitby\"><span class=\"octicon octicon-link\"></span></a>1）submitBy()</h3>\n<pre data-source-line=\"35\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj)</span></span></code></pre><p data-source-line=\"38\">obj说明：</p>\n<ul data-source-line=\"39\">\n<li>为选择器或dom，监听click事件进行提交。</li>\n<li>为function，如下,调用submitCall()会触发表单提交。</li>\n</ul>\n<pre data-source-line=\"42\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> submitCall;\nhandle.submitBy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span></span>{\n    submitCall=<span class=\"hljs-keyword\">callback</span>;\n})</code></pre><h3 id=\"2url\" data-source-line=\"49\"><a class=\"anchor\" href=\"#2url\"><span class=\"octicon octicon-link\"></span></a>2）url()</h3>\n<p data-source-line=\"50\">设置提交地址，默认会读取表单的action属性。</p>\n<pre data-source-line=\"51\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(url)</span></span></code></pre><h3 id=\"3urlprefix\" data-source-line=\"55\"><a class=\"anchor\" href=\"#3urlprefix\"><span class=\"octicon octicon-link\"></span></a>3）urlPrefix()</h3>\n<p data-source-line=\"56\">设置url前缀，最终的提交地址为urlPrefix+url。</p>\n<pre data-source-line=\"57\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(urlPrefix)</span></span></code></pre><h3 id=\"4method\" data-source-line=\"61\"><a class=\"anchor\" href=\"#4method\"><span class=\"octicon octicon-link\"></span></a>4）method()</h3>\n<p data-source-line=\"62\">设置提交的方法，默认会读取表单的method属性。</p>\n<pre data-source-line=\"63\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>)</span></code></pre><h3 id=\"5putvalues\" data-source-line=\"67\"><a class=\"anchor\" href=\"#5putvalues\"><span class=\"octicon octicon-link\"></span></a>5）putValues()</h3>\n<p data-source-line=\"68\">设置表单值。</p>\n<pre data-source-line=\"70\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">object</span>)</span></span></code></pre><h3 id=\"6reset\" data-source-line=\"74\"><a class=\"anchor\" href=\"#6reset\"><span class=\"octicon octicon-link\"></span></a>6）reset()</h3>\n<p data-source-line=\"75\">重置表单。</p>\n<h3 id=\"7onok\" data-source-line=\"77\"><a class=\"anchor\" href=\"#7onok\"><span class=\"octicon octicon-link\"></span></a>7）onOk()</h3>\n<pre data-source-line=\"79\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span></span></code></pre><h3 id=\"8onfail\" data-source-line=\"83\"><a class=\"anchor\" href=\"#8onfail\"><span class=\"octicon octicon-link\"></span></a>8）onFail()</h3>\n<pre data-source-line=\"85\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span></span></code></pre><h3 id=\"9onvalidatefail\" data-source-line=\"89\"><a class=\"anchor\" href=\"#9onvalidatefail\"><span class=\"octicon octicon-link\"></span></a>9）onValidateFail()</h3>\n<pre data-source-line=\"91\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span></span></code></pre><h3 id=\"10submit\" data-source-line=\"95\"><a class=\"anchor\" href=\"#10submit\"><span class=\"octicon octicon-link\"></span></a>10）submit()</h3>\n<p data-source-line=\"96\">提交表单。</p>\n<h3 id=\"11beforesubmit\" data-source-line=\"98\"><a class=\"anchor\" href=\"#11beforesubmit\"><span class=\"octicon octicon-link\"></span></a>11）beforeSubmit()</h3>\n<p data-source-line=\"99\">表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。</p>\n<pre data-source-line=\"101\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(beforeSubmitCallback)</span></span>\n\nbeforeSubmitCallback=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data,callback)</span></span>{\n    callback(<span class=\"hljs-keyword\">data</span>);\n}</code></pre><h3 id=\"11done\" data-source-line=\"109\"><a class=\"anchor\" href=\"#11done\"><span class=\"octicon octicon-link\"></span></a>11）done()</h3>\n<p data-source-line=\"110\">最后必须调用。</p>\n<h2 id=\"4validateformoption\" data-source-line=\"112\"><a class=\"anchor\" href=\"#4validateformoption\"><span class=\"octicon octicon-link\"></span></a>4.validateForm(option)</h2>\n<p data-source-line=\"113\">表单验证。</p>\n<pre data-source-line=\"115\"><code class=\"hljs\">xs-validate：验证类型\nxs-validate-errmsg：验失败的提示信息\nxs-validate-emptymsg：必须项未填写的提示信息\n\n例如：</code></pre><p data-source-line=\"123\">option说明：</p>\n<ol data-source-line=\"124\">\n<li>form：form对象或选择器</li>\n<li>onOk:function(form)，验证成功的回调</li>\n<li>onFail:function(itemDom, name, value)，验失败的回调</li>\n<li>validate:可选，validate对象</li>\n</ol>\n<h2 id=\"5validate\" data-source-line=\"130\"><a class=\"anchor\" href=\"#5validate\"><span class=\"octicon octicon-link\"></span></a>5.validate()</h2>\n<p data-source-line=\"131\">验证工具。</p>\n<h3 id=\"1put\" data-source-line=\"133\"><a class=\"anchor\" href=\"#1put\"><span class=\"octicon octicon-link\"></span></a>1）put()</h3>\n<p data-source-line=\"134\">添加验证类型。</p>\n<pre data-source-line=\"135\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name, <span class=\"hljs-keyword\">type</span>, errmsg)</span></span></code></pre><ul data-source-line=\"138\">\n<li>name：待验证的name名称</li>\n<li>type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)</li>\n<li>errmsg：string</li>\n</ul>\n<h3 id=\"2remove\" data-source-line=\"142\"><a class=\"anchor\" href=\"#2remove\"><span class=\"octicon octicon-link\"></span></a>2）remove()</h3>\n<p data-source-line=\"143\">移除。</p>\n<pre data-source-line=\"144\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name)</span></span></code></pre><h3 id=\"3onok\" data-source-line=\"148\"><a class=\"anchor\" href=\"#3onok\"><span class=\"octicon octicon-link\"></span></a>3）onOk()</h3>\n<pre data-source-line=\"150\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(okCall)</span></span>\n\nokCall=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(selector)</span></span></code></pre><h3 id=\"4oneachokcall\" data-source-line=\"156\"><a class=\"anchor\" href=\"#4oneachokcall\"><span class=\"octicon octicon-link\"></span></a>4）onEachOkCall()</h3>\n<pre data-source-line=\"158\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span></span>\n\ncallback = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(itemDom,name,value)</span></span></code></pre><h3 id=\"5onfail\" data-source-line=\"164\"><a class=\"anchor\" href=\"#5onfail\"><span class=\"octicon octicon-link\"></span></a>5）onFail()</h3>\n<pre data-source-line=\"166\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(failCall)</span></span>\n\nfailCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(itemDom,name,value,errmsg)</span></span></code></pre><h3 id=\"6dovalidate\" data-source-line=\"172\"><a class=\"anchor\" href=\"#6dovalidate\"><span class=\"octicon octicon-link\"></span></a>6）doValidate()</h3>\n<pre data-source-line=\"174\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(selector, checkAll)</span></span></code></pre><ul data-source-line=\"177\">\n<li>selector 表单选择器</li>\n<li>checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。</li>\n</ul>\n<h3 id=\"7自验证类型\" data-source-line=\"180\"><a class=\"anchor\" href=\"#7自验证类型\"><span class=\"octicon octicon-link\"></span></a>7）自验证类型</h3>\n<ul data-source-line=\"181\">\n<li>$reg:正则表达式</li>\n<li>email:电子邮件</li>\n<li>chinese:中文</li>\n<li>url:url地址</li>\n<li>filename:文件名</li>\n<li>idcard:身份证号</li>\n<li>number:数字（整数或小数）</li>\n<li>int:整数(有符号)</li>\n<li>uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；</li>\n<li>length(min,max):长度验证(min,max)|(min,)|(,max)</li>\n<li>mobile:手机号</li>\n<li>phone:电话号码</li>\n<li>ipv4:ipv4地址</li>\n<li>unumber:(非负)数字（整数或小数）</li>\n</ul>',19,'ARTICLE',1,'2018-07-20 09:55:03','153188673971709000006',NULL,1,'核心功能',1,0,1005,'## 1.formJson\n将表单转成json对象或数组。\n\n```\nfunction(formSelector, option)\n```\n参数说明：\n1. formSelector：form选择器或dom\n\noption说明：\n1. includeAllParams:默认为false，是否包含所有的参数、包括为空的。\n2. trim:【Boolean】默认true,是否调用trim()。\n3. toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。\n\n## 2.json2Form\n用于表单回显。\n\n```\nfunction(formSelector, data)\n```\n参数说明：\n1. formSelector：form选择器或dom\n\n## 3.form\n\n```\nfunction(formSelector)\n```\n参数说明：\n1. formSelector：form选择器或dom\n\n**函数**：\n### 1）submitBy()\n\n```\nfunction(obj)\n```\nobj说明：\n- 为选择器或dom，监听click事件进行提交。\n- 为function，如下,调用submitCall()会触发表单提交。\n\n```\nvar submitCall;\nhandle.submitBy(function(callback){\n    submitCall=callback;\n})\n```\n\n### 2）url()\n设置提交地址，默认会读取表单的action属性。\n```\nfunction(url)\n```\n\n### 3）urlPrefix()\n设置url前缀，最终的提交地址为urlPrefix+url。\n```\nfunction(urlPrefix)\n```\n\n### 4）method()\n设置提交的方法，默认会读取表单的method属性。\n```\nfunction(method)\n```\n\n### 5）putValues()\n设置表单值。\n\n```\nfunction(object)\n```\n\n### 6）reset()\n重置表单。\n\n### 7）onOk()\n\n```\nfunction(callback)\n```\n\n### 8）onFail()\n\n```\nfunction(callback)\n```\n\n### 9）onValidateFail()\n\n```\nfunction(callback)\n```\n\n### 10）submit()\n提交表单。\n\n### 11）beforeSubmit()\n表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。\n\n```\nfunction(beforeSubmitCallback)\n\nbeforeSubmitCallback=function(data,callback){\n    callback(data);\n}\n```\n\n### 11）done()\n最后必须调用。\n\n## 4.validateForm(option)\n表单验证。\n\n```\nxs-validate：验证类型\nxs-validate-errmsg：验失败的提示信息\nxs-validate-emptymsg：必须项未填写的提示信息\n\n例如：\n\n```\noption说明：\n1. form：form对象或选择器\n2. onOk:function(form)，验证成功的回调\n3. onFail:function(itemDom, name, value)，验失败的回调\n4. validate:可选，validate对象\n\n\n## 5.validate()\n验证工具。\n\n### 1）put()\n添加验证类型。\n```\nfunction(name, type, errmsg)\n```\n- name：待验证的name名称\n- type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)\n- errmsg：string\n\n### 2）remove()\n移除。\n```\nfunction(name)\n```\n\n### 3）onOk()\n\n```\nfunction(okCall)\n\nokCall=function(selector)\n```\n\n### 4）onEachOkCall()\n\n```\nfunction(callback)\n\ncallback = function(itemDom,name,value)\n```\n\n### 5）onFail()\n\n```\nfunction(failCall)\n\nfailCall = function(itemDom,name,value,errmsg)\n```\n\n### 6）doValidate()\n\n```\nfunction(selector, checkAll)\n```\n- selector 表单选择器\n- checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。\n\n### 7）自验证类型\n * $reg:正则表达式\n * email:电子邮件\n * chinese:中文\n * url:url地址\n * filename:文件名\n * idcard:身份证号\n * number:数字（整数或小数）\n * int:整数(有符号)\n * uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；\n * length(min,max):长度验证(min,max)|(min,)|(,max)\n * mobile:手机号\n * phone:电话号码\n * ipv4:ipv4地址\n * unumber:(非负)数字（整数或小数）','153188636499907000002'),('153206506473901000008','常用工具方法',NULL,'<h2 id=\"1queryparam\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1queryparam\"><span class=\"octicon octicon-link\"></span></a>1.queryParam()</h2>\n<p data-source-line=\"2\">得到地址参数。</p>\n<pre data-source-line=\"4\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name, otherValue, optionUrl)</span></span></code></pre><ul data-source-line=\"7\">\n<li>name：参数名</li>\n<li>otherValue：不存在时的返回值</li>\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数</li>\n</ul>\n<h2 id=\"2isjquery\" data-source-line=\"11\"><a class=\"anchor\" href=\"#2isjquery\"><span class=\"octicon octicon-link\"></span></a>2.isJQuery()</h2>\n<p data-source-line=\"12\">判断是否为jQuery对象。</p>\n<pre data-source-line=\"14\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj)</span></span></code></pre><h2 id=\"3isjqueryordom\" data-source-line=\"18\"><a class=\"anchor\" href=\"#3isjqueryordom\"><span class=\"octicon octicon-link\"></span></a>3.isJQueryOrDOM()</h2>\n<p data-source-line=\"19\">判断是否为jQuery或Dom对象。</p>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj)</span></span></code></pre><h2 id=\"4windowslowertrigger\" data-source-line=\"25\"><a class=\"anchor\" href=\"#4windowslowertrigger\"><span class=\"octicon octicon-link\"></span></a>4.window.slowerTrigger()</h2>\n<p data-source-line=\"26\">防止快速或重复点击。</p>\n<pre data-source-line=\"27\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>)\n\n例子：\n<span class=\"hljs-title\">$</span>(<span class=\"hljs-params\">selector</span>).<span class=\"hljs-title\">click</span>(<span class=\"hljs-params\">slowerTrigger(function(</span>)</span>{\n    alert(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}));</code></pre><h2 id=\"5pako\" data-source-line=\"37\"><a class=\"anchor\" href=\"#5pako\"><span class=\"octicon octicon-link\"></span></a>5.pako</h2>\n<p data-source-line=\"38\">一个js压缩库。</p>\n<h2 id=\"6usetopuselowertopuseopeneruseparent\" data-source-line=\"40\"><a class=\"anchor\" href=\"#6usetopuselowertopuseopeneruseparent\"><span class=\"octicon octicon-link\"></span></a>6.useTop()|useLowerTop()|useOpener()|useParent()</h2>\n<p data-source-line=\"41\">如果不存在时，返结果等于当前窗口的sdk对象。</p>\n<ul data-source-line=\"42\">\n<li>useTop()：使用顶层sdk对象。</li>\n<li>useLowerTop()：使用顶层下一级sdk对象。</li>\n<li>useOpener()：使用打开者sdk对象。</li>\n<li>useParent()：使用父级sdk对象。</li>\n</ul>\n<h2 id=\"6onready\" data-source-line=\"47\"><a class=\"anchor\" href=\"#6onready\"><span class=\"octicon octicon-link\"></span></a>6.onReady</h2>\n<p data-source-line=\"48\">sdk准备好时的回调函数。</p>\n<h2 id=\"7gettopwin\" data-source-line=\"51\"><a class=\"anchor\" href=\"#7gettopwin\"><span class=\"octicon octicon-link\"></span></a>7.getTopWin</h2>\n<p data-source-line=\"52\">获取同域的顶层窗对象。例如以下代码需要相应的所有页面js中加入：</p>\n<pre data-source-line=\"54\"><code class=\"hljs\">window.WIN_VAR = <span class=\"hljs-string\">\"-test-project-\"</span>;\nvar topW<span class=\"hljs-keyword\">in</span> = sdk.getTopW<span class=\"hljs-keyword\">in</span>(WIN_VAR);</code></pre>',18,'ARTICLE',1,'2018-07-20 13:37:45','153188673971709000006',NULL,1,'核心功能',1,0,1003,'## 1.queryParam()\n得到地址参数。\n\n```\nfunction(name, otherValue, optionUrl)\n```\n- name：参数名\n- otherValue：不存在时的返回值\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\n\n## 2.isJQuery()\n判断是否为jQuery对象。\n\n```\nfunction(obj)\n```\n\n## 3.isJQueryOrDOM()\n判断是否为jQuery或Dom对象。\n\n```\nfunction(obj)\n```\n\n## 4.window.slowerTrigger()\n防止快速或重复点击。\n```\nfunction(callback)\n\n例子：\n$(selector).click(slowerTrigger(function(){\n    alert(this);\n    return false;\n}));\n```\n\n## 5.pako\n一个js压缩库。\n\n## 6.useTop()|useLowerTop()|useOpener()|useParent()\n如果不存在时，返结果等于当前窗口的sdk对象。\n- useTop()：使用顶层sdk对象。\n- useLowerTop()：使用顶层下一级sdk对象。\n- useOpener()：使用打开者sdk对象。\n- useParent()：使用父级sdk对象。\n\n## 6.onReady\nsdk准备好时的回调函数。\n\n\n## 7.getTopWin\n获取同域的顶层窗对象。例如以下代码需要相应的所有页面js中加入：\n\n```\nwindow.WIN_VAR = \"-test-project-\";\nvar topWin = sdk.getTopWin(WIN_VAR);\n```','153188636499907000002'),('153206570977301000011','数据表格',NULL,'<p data-source-line=\"1\">数据表格API,最后必须调用done()方法。</p>\n<pre data-source-line=\"3\"><code class=\"hljs\">通过\n<span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.table</span>({\n    <span class=\"hljs-attribute\">attr</span>:value\n})<span class=\"hljs-selector-class\">.done</span>();\n或\n<span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.table</span>()<span class=\"hljs-selector-class\">.attr</span>(<span class=\"hljs-selector-tag\">value</span>)<span class=\"hljs-selector-class\">.done</span>();\n调用</code></pre><h1 id=\"数据格式\" data-source-line=\"13\"><a class=\"anchor\" href=\"#数据格式\"><span class=\"octicon octicon-link\"></span></a>数据格式</h1>\n<h2 id=\"1-请求数据格式\" data-source-line=\"14\"><a class=\"anchor\" href=\"#1-请求数据格式\"><span class=\"octicon octicon-link\"></span></a>1、请求数据格式</h2>\n<pre data-source-line=\"16\"><code class=\"hljs\">{\n    <span class=\"hljs-attribute\">query</span>:{\n    \n    },\n    <span class=\"hljs-selector-tag\">settings</span>:{\n        <span class=\"hljs-attribute\">skip</span>:<span class=\"hljs-number\">0</span>,\n        limit:<span class=\"hljs-number\">20</span>\n    }\n}</code></pre><h2 id=\"2-响应数据格式\" data-source-line=\"28\"><a class=\"anchor\" href=\"#2-响应数据格式\"><span class=\"octicon octicon-link\"></span></a>2、响应数据格式</h2>\n<pre data-source-line=\"30\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    code:</span><span class=\"hljs-number\">0</span>,\n<span class=\"hljs-symbol\">    rs:</span>{\n<span class=\"hljs-symbol\">        data:</span>[],\n<span class=\"hljs-symbol\">        limit:</span><span class=\"hljs-number\">20</span>,\n<span class=\"hljs-symbol\">        skip:</span><span class=\"hljs-number\">0</span>,\n<span class=\"hljs-symbol\">        total:</span><span class=\"hljs-number\">50</span>\n    }\n}</code></pre><h1 id=\"参数或函数说明\" data-source-line=\"43\"><a class=\"anchor\" href=\"#参数或函数说明\"><span class=\"octicon octicon-link\"></span></a>参数或函数说明：</h1>\n<h2 id=\"1cols\" data-source-line=\"45\"><a class=\"anchor\" href=\"#1cols\"><span class=\"octicon octicon-link\"></span></a>1.cols</h2>\n<p data-source-line=\"46\">【Array】表格列。</p>\n<ul data-source-line=\"48\">\n<li>title：标题名称|dom|function(col)</li>\n<li>titleColor：css颜色值|function(col)</li>\n<li>sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field</li>\n<li>sortable：是否排序|function(col),会显示排序按钮</li>\n<li>fixed：left|right|function(col)，固定列</li>\n<li>initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序</li>\n<li>width：宽度值|function(col)</li>\n<li>adjustFreeWidth:是否参与分配多余的表格宽度|function(col)，默认true，且会按照比例进行分配</li>\n<li>edit：text|function(col),编辑项,isText为true时有效</li>\n<li>align：center|left|right|function(col)，设置标题的对齐方式</li>\n<li>checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列</li>\n<li>notToggle：boolean|function(col)，是否禁止拖动表格列</li>\n<li>attrTitle：boolean|function()，默认为true，对于文本是否添加title属性</li>\n<li>alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的</li>\n<li>isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本</li>\n<li>field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\".\"调用。</li>\n<li>color：css颜色值|function(item,col,index,pageInfo)</li>\n<li>enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\".\"获取内部对象值，默认true。</li>\n</ul>\n<h2 id=\"2url\" data-source-line=\"67\"><a class=\"anchor\" href=\"#2url\"><span class=\"octicon octicon-link\"></span></a>2.url</h2>\n<p data-source-line=\"68\">访问的地址。</p>\n<h2 id=\"3method\" data-source-line=\"70\"><a class=\"anchor\" href=\"#3method\"><span class=\"octicon octicon-link\"></span></a>3.method</h2>\n<p data-source-line=\"71\">访问的方法，默认post。</p>\n<h2 id=\"4data\" data-source-line=\"73\"><a class=\"anchor\" href=\"#4data\"><span class=\"octicon octicon-link\"></span></a>4.data</h2>\n<p data-source-line=\"74\">静态数据[{}]。</p>\n<h2 id=\"5container\" data-source-line=\"76\"><a class=\"anchor\" href=\"#5container\"><span class=\"octicon octicon-link\"></span></a>5.container</h2>\n<p data-source-line=\"77\">存放表格的容器，选择器或dom对象。</p>\n<h2 id=\"6width\" data-source-line=\"79\"><a class=\"anchor\" href=\"#6width\"><span class=\"octicon octicon-link\"></span></a>6.width</h2>\n<p data-source-line=\"80\">表格宽度。</p>\n<h3 id=\"adjustfreewidth\" data-source-line=\"81\"><a class=\"anchor\" href=\"#adjustfreewidth\"><span class=\"octicon octicon-link\"></span></a>adjustFreeWidth</h3>\n<p data-source-line=\"82\">是否分配多余的表格宽度|function()，默认true，且会按照比例进行分配，全局设置。</p>\n<h2 id=\"7height\" data-source-line=\"84\"><a class=\"anchor\" href=\"#7height\"><span class=\"octicon octicon-link\"></span></a>7.height</h2>\n<p data-source-line=\"85\">表格高度|full-差值,默认full-0。</p>\n<h2 id=\"8haspage\" data-source-line=\"87\"><a class=\"anchor\" href=\"#8haspage\"><span class=\"octicon octicon-link\"></span></a>8.hasPage</h2>\n<p data-source-line=\"88\">是否有分页,默认true。</p>\n<h2 id=\"9sortmulti\" data-source-line=\"90\"><a class=\"anchor\" href=\"#9sortmulti\"><span class=\"octicon octicon-link\"></span></a>9.sortMulti</h2>\n<p data-source-line=\"91\">是否支持多列同时排序,默认false。</p>\n<h2 id=\"10params\" data-source-line=\"93\"><a class=\"anchor\" href=\"#10params\"><span class=\"octicon octicon-link\"></span></a>10.params</h2>\n<p data-source-line=\"94\">查询参数，添加根参数。</p>\n<h2 id=\"11tableoptionparams\" data-source-line=\"96\"><a class=\"anchor\" href=\"#11tableoptionparams\"><span class=\"octicon octicon-link\"></span></a>11.tableOptionParams</h2>\n<p data-source-line=\"97\">用于添加到query中。</p>\n<h2 id=\"12usetableoptionqueryarray\" data-source-line=\"99\"><a class=\"anchor\" href=\"#12usetableoptionqueryarray\"><span class=\"octicon octicon-link\"></span></a>12.useTableOptionQueryArray</h2>\n<p data-source-line=\"100\">默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。</p>\n<h2 id=\"13bindform\" data-source-line=\"102\"><a class=\"anchor\" href=\"#13bindform\"><span class=\"octicon octicon-link\"></span></a>13.bindForm</h2>\n<p data-source-line=\"103\">[绑定form对象或选择器,domForClick|function(listener)]。</p>\n<h2 id=\"14size\" data-source-line=\"105\"><a class=\"anchor\" href=\"#14size\"><span class=\"octicon octicon-link\"></span></a>14.size</h2>\n<p data-source-line=\"106\">表格大小small|normal|large。</p>\n<h2 id=\"15nottoggle\" data-source-line=\"108\"><a class=\"anchor\" href=\"#15nottoggle\"><span class=\"octicon octicon-link\"></span></a>15.notToggle</h2>\n<p data-source-line=\"109\">是否禁止拖动表格列,设置表格默认值，会改变列的默认值。</p>\n<h2 id=\"16even\" data-source-line=\"111\"><a class=\"anchor\" href=\"#16even\"><span class=\"octicon octicon-link\"></span></a>16.even</h2>\n<p data-source-line=\"112\">是否开启隔行背景,默认true。</p>\n<h2 id=\"17attrtitle\" data-source-line=\"114\"><a class=\"anchor\" href=\"#17attrtitle\"><span class=\"octicon octicon-link\"></span></a>17.attrTitle</h2>\n<p data-source-line=\"115\">对于文本是否添加title属性，默认为false。</p>\n<h2 id=\"18oncelleditlistener\" data-source-line=\"117\"><a class=\"anchor\" href=\"#18oncelleditlistener\"><span class=\"octicon octicon-link\"></span></a>18.onCellEditListener</h2>\n<p data-source-line=\"118\">单元格内容被编辑后的监听函数。</p>\n<pre data-source-line=\"120\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data,name,newValue,oldValue,row,col)</span></span></code></pre><h2 id=\"19beforerequest\" data-source-line=\"124\"><a class=\"anchor\" href=\"#19beforerequest\"><span class=\"octicon octicon-link\"></span></a>19.beforeRequest</h2>\n<p data-source-line=\"125\">网络请求之前的回调。</p>\n<pre data-source-line=\"127\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(params)</span></span></code></pre><h2 id=\"20afterajaxok\" data-source-line=\"131\"><a class=\"anchor\" href=\"#20afterajaxok\"><span class=\"octicon octicon-link\"></span></a>20.afterAjaxOk</h2>\n<p data-source-line=\"132\">ajax请求成功后的回调,在onLoadCompleteListener之前。</p>\n<pre data-source-line=\"134\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json,okcallback,errcallback)</span></span>{\n    okcallback(json);\n}</code></pre><h2 id=\"21onloadcompletelistener\" data-source-line=\"140\"><a class=\"anchor\" href=\"#21onloadcompletelistener\"><span class=\"octicon octicon-link\"></span></a>21.onLoadCompleteListener</h2>\n<p data-source-line=\"141\">加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。</p>\n<pre data-source-line=\"143\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json,loadCount,pageInfo)</span></span></code></pre><h2 id=\"22beforeflush\" data-source-line=\"147\"><a class=\"anchor\" href=\"#22beforeflush\"><span class=\"octicon octicon-link\"></span></a>22.beforeFlush</h2>\n<p data-source-line=\"148\">设置刷之前的回调。</p>\n<h2 id=\"23response_code\" data-source-line=\"150\"><a class=\"anchor\" href=\"#23response_code\"><span class=\"octicon octicon-link\"></span></a>23.response_code</h2>\n<p data-source-line=\"151\">默认code，结果码。</p>\n<h2 id=\"24response_desc\" data-source-line=\"153\"><a class=\"anchor\" href=\"#24response_desc\"><span class=\"octicon octicon-link\"></span></a>24.response_desc</h2>\n<p data-source-line=\"154\">默认desc，描述。</p>\n<h2 id=\"25response_count\" data-source-line=\"156\"><a class=\"anchor\" href=\"#25response_count\"><span class=\"octicon octicon-link\"></span></a>25.response_count</h2>\n<p data-source-line=\"157\">默认rs.total,总数。</p>\n<h2 id=\"26response_data\" data-source-line=\"159\"><a class=\"anchor\" href=\"#26response_data\"><span class=\"octicon octicon-link\"></span></a>26.response_data</h2>\n<p data-source-line=\"160\">默认rs.data,数据，类为数组。</p>\n<h2 id=\"27flushby\" data-source-line=\"162\"><a class=\"anchor\" href=\"#27flushby\"><span class=\"octicon octicon-link\"></span></a>27.flushBy</h2>\n<p data-source-line=\"163\">点击刷新的按钮选择器。</p>\n<h2 id=\"28flushbychange\" data-source-line=\"165\"><a class=\"anchor\" href=\"#28flushbychange\"><span class=\"octicon octicon-link\"></span></a>28.flushByChange</h2>\n<p data-source-line=\"166\">输入组件内容改变时刷新表格，[选择器]。</p>\n<h2 id=\"29flush\" data-source-line=\"168\"><a class=\"anchor\" href=\"#29flush\"><span class=\"octicon octicon-link\"></span></a>29.flush</h2>\n<p data-source-line=\"169\">function(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。</p>\n<h2 id=\"30getselectedrows\" data-source-line=\"171\"><a class=\"anchor\" href=\"#30getselectedrows\"><span class=\"octicon octicon-link\"></span></a>30.getSelectedRows</h2>\n<p data-source-line=\"172\">function()获取所有选中行的数据。</p>\n<h2 id=\"31setcontent\" data-source-line=\"174\"><a class=\"anchor\" href=\"#31setcontent\"><span class=\"octicon octicon-link\"></span></a>31.setContent</h2>\n<p data-source-line=\"175\">function(row,col,content)设置内容。</p>\n<h2 id=\"32currentpagesize\" data-source-line=\"177\"><a class=\"anchor\" href=\"#32currentpagesize\"><span class=\"octicon octicon-link\"></span></a>32.currentPageSize</h2>\n<p data-source-line=\"178\">function()获取当前页数据行数。</p>\n<h2 id=\"33getlastpageinfo\" data-source-line=\"180\"><a class=\"anchor\" href=\"#33getlastpageinfo\"><span class=\"octicon octicon-link\"></span></a>33.getLastPageInfo</h2>\n<p data-source-line=\"181\">function()获取之前的页面信息。</p>',25,'ARTICLE',1,'2018-07-20 13:48:30','153188673971709000006',NULL,1,'UI功能',1,0,1012,'数据表格API,最后必须调用done()方法。\n\n```\n通过\nsdk.table({\n    attr:value\n}).done();\n或\nsdk.table().attr(value).done();\n调用\n```\n\n# 数据格式\n## 1、请求数据格式\n\n```\n{\n    query:{\n    \n    },\n    settings:{\n        skip:0,\n        limit:20\n    }\n}\n\n```\n## 2、响应数据格式\n\n```\n{\n    code:0,\n    rs:{\n        data:[],\n        limit:20,\n        skip:0,\n        total:50\n    }\n}\n```\n\n\n# 参数或函数说明：\n\n## 1.cols\n【Array】表格列。\n\n- title：标题名称|dom|function(col)\n- titleColor：css颜色值|function(col)\n- sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field\n- sortable：是否排序|function(col),会显示排序按钮\n- fixed：left|right|function(col)，固定列\n- initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序\n- width：宽度值|function(col)\n- adjustFreeWidth:是否参与分配多余的表格宽度|function(col)，默认true，且会按照比例进行分配\n- edit：text|function(col),编辑项,isText为true时有效\n- align：center|left|right|function(col)，设置标题的对齐方式\n- checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列\n- notToggle：boolean|function(col)，是否禁止拖动表格列\n- attrTitle：boolean|function()，默认为true，对于文本是否添加title属性\n- alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的\n- isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本\n- field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\".\"调用。\n- color：css颜色值|function(item,col,index,pageInfo)\n- enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\".\"获取内部对象值，默认true。\n\n## 2.url\n访问的地址。\n\n## 3.method\n访问的方法，默认post。\n\n## 4.data\n静态数据[{}]。\n\n## 5.container\n存放表格的容器，选择器或dom对象。\n\n## 6.width\n表格宽度。\n### adjustFreeWidth\n是否分配多余的表格宽度|function()，默认true，且会按照比例进行分配，全局设置。\n\n## 7.height\n表格高度|full-差值,默认full-0。\n\n## 8.hasPage\n是否有分页,默认true。\n\n## 9.sortMulti\n是否支持多列同时排序,默认false。\n\n## 10.params\n查询参数，添加根参数。\n\n## 11.tableOptionParams\n用于添加到query中。\n\n## 12.useTableOptionQueryArray\n默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。\n\n## 13.bindForm\n[绑定form对象或选择器,domForClick|function(listener)]。\n\n## 14.size\n表格大小small|normal|large。\n\n## 15.notToggle\n是否禁止拖动表格列,设置表格默认值，会改变列的默认值。\n\n## 16.even\n是否开启隔行背景,默认true。\n\n## 17.attrTitle\n对于文本是否添加title属性，默认为false。\n\n## 18.onCellEditListener\n单元格内容被编辑后的监听函数。\n\n```\nfunction(data,name,newValue,oldValue,row,col)\n```\n\n## 19.beforeRequest\n网络请求之前的回调。\n\n```\nfunction(params)\n```\n\n## 20.afterAjaxOk\najax请求成功后的回调,在onLoadCompleteListener之前。\n\n```\nfunction(json,okcallback,errcallback){\n    okcallback(json);\n}\n```\n\n## 21.onLoadCompleteListener\n加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。\n\n```\nfunction(json,loadCount,pageInfo)\n```\n\n## 22.beforeFlush\n设置刷之前的回调。\n\n## 23.response_code\n默认code，结果码。\n\n## 24.response_desc\n默认desc，描述。\n\n## 25.response_count\n默认rs.total,总数。\n\n## 26.response_data\n默认rs.data,数据，类为数组。\n\n## 27.flushBy\n点击刷新的按钮选择器。\n\n## 28.flushByChange\n输入组件内容改变时刷新表格，[选择器]。\n\n## 29.flush\nfunction(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。\n\n## 30.getSelectedRows\nfunction()获取所有选中行的数据。\n\n## 31.setContent\nfunction(row,col,content)设置内容。\n\n## 32.currentPageSize\nfunction()获取当前页数据行数。\n\n## 33.getLastPageInfo\nfunction()获取之前的页面信息。','153188636499907000002'),('153206873741201000017','弹出层','包括弹出页面、alert、confirm、loading、tips等','<h2 id=\"1loading\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1loading\"><span class=\"octicon octicon-link\"></span></a>1.loading</h2>\n<p data-source-line=\"2\">加载框。</p>\n<pre data-source-line=\"3\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.loading</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"6\">\n<li>type:default,star,stars</li>\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>isModal:是否是模态框，默认为true</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>onShow:显示后的回调</li>\n<li>onClosed:关闭时的回调</li>\n</ul>\n<h2 id=\"2showtoast\" data-source-line=\"14\"><a class=\"anchor\" href=\"#2showtoast\"><span class=\"octicon octicon-link\"></span></a>2.showToast()</h2>\n<p data-source-line=\"15\">function(text)直接弹出文本消息。</p>\n<h2 id=\"3toast\" data-source-line=\"17\"><a class=\"anchor\" href=\"#3toast\"><span class=\"octicon octicon-link\"></span></a>3.toast</h2>\n<p data-source-line=\"18\">弹出气泡消息。</p>\n<pre data-source-line=\"20\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.toast</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"23\">\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile</li>\n<li>isModal:是否是模态框，默认为true</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭</li>\n<li>content:显示的内容</li>\n<li>onShow:显示后的回调</li>\n<li>onClosed:关闭时的回调</li>\n</ul>\n<h2 id=\"4alert\" data-source-line=\"32\"><a class=\"anchor\" href=\"#4alert\"><span class=\"octicon octicon-link\"></span></a>4.alert</h2>\n<p data-source-line=\"33\">提示框。</p>\n<pre data-source-line=\"34\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.alert</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"37\">\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile</li>\n<li>isModal:是否是模态框，默认为true</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>title:标题|false</li>\n<li>content:显示的内容</li>\n<li>onShow:显示后的回调</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>onClosed:关闭时的回调</li>\n<li>onOk:function(),返回false不会关闭</li>\n<li>okLabel：</li>\n</ul>\n<h2 id=\"5confirm\" data-source-line=\"49\"><a class=\"anchor\" href=\"#5confirm\"><span class=\"octicon octicon-link\"></span></a>5.confirm</h2>\n<p data-source-line=\"50\">确认框。</p>\n<pre data-source-line=\"51\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.confirm</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"54\">\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile</li>\n<li>isModal:是否是模态框，默认为true</li>\n<li>title:标题|false</li>\n<li>content:显示的内容</li>\n<li>onShow:显示后的回调</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>onClosed:关闭时的回调</li>\n<li>onOk:function(),返回false不会关闭</li>\n<li>onCancel:function(),返回false不会关闭</li>\n<li>okLabel:</li>\n<li>cancelLabel：</li>\n</ul>\n<h2 id=\"6popinput\" data-source-line=\"68\"><a class=\"anchor\" href=\"#6popinput\"><span class=\"octicon octicon-link\"></span></a>6.popInput</h2>\n<p data-source-line=\"69\">弹出输入框。</p>\n<pre data-source-line=\"70\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.popInput</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"73\">\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>title:标题|false</li>\n<li>initValue:初始值</li>\n<li>maxlength:最大长度</li>\n<li>inputType:text,textarea,password,date,datetime,time</li>\n<li>range:true|fale,对date,datetime,time有效</li>\n<li>rangeSP:范围分隔符号,默认空格</li>\n</ul>\n<hr>\n<ul data-source-line=\"82\">\n<li>format:时间日期格式:默认值：yyyy-MM-dd</li>\n<li>yyyy	年份，至少四位数。如果不足四位，则前面补零</li>\n<li>y	年份，不限制位数，即不管年份多少位，前面均不补零</li>\n<li>MM	月份，至少两位数。如果不足两位，则前面补零。</li>\n<li>M	月份，允许一位数。</li>\n<li>dd	日期，至少两位数。如果不足两位，则前面补零。</li>\n<li>d	日期，允许一位数。</li>\n<li>HH	小时，至少两位数。如果不足两位，则前面补零。</li>\n<li>H	小时，允许一位数。</li>\n<li>mm	分钟，至少两位数。如果不足两位，则前面补零。</li>\n<li>m	分钟，允许一位数。</li>\n<li>ss	秒数，至少两位数。如果不足两位，则前面补零。</li>\n<li>s	秒数，允许一位数。</li>\n</ul>\n<hr>\n<ul data-source-line=\"96\">\n<li>isModal:是否是模态框，默认为true</li>\n<li>onShow:显示后的回调</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>onClosed:关闭时的回调</li>\n<li>onCancel:function()</li>\n<li>hasCancel:true/false</li>\n<li>onOk:function(val):返回false不会关闭</li>\n<li>onCancel:function()</li>\n<li>validateType:</li>\n<li>errmsg:</li>\n</ul>\n<h2 id=\"7tips\" data-source-line=\"107\"><a class=\"anchor\" href=\"#7tips\"><span class=\"octicon octicon-link\"></span></a>7.tips</h2>\n<p data-source-line=\"108\">吸附框。</p>\n<pre data-source-line=\"109\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.tips</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"112\">\n<li>target:吸附元素</li>\n<li>content:内容</li>\n<li>position:up,down,left,right</li>\n<li>bgcolor:背景颜色</li>\n<li>color:字体颜色，默认黑色</li>\n<li>tipsMore:默认true，会销毁之前的。</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>close:关闭</li>\n</ul>\n<h2 id=\"8poppage\" data-source-line=\"122\"><a class=\"anchor\" href=\"#8poppage\"><span class=\"octicon octicon-link\"></span></a>8.popPage</h2>\n<p data-source-line=\"123\">弹出页面。</p>\n<pre data-source-line=\"124\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.popPage</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"127\">\n<li>title:标题|false</li>\n<li>content:显示的内容</li>\n<li>tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body</li>\n<li>url:显示的url</li>\n<li>text:显示的文本内容</li>\n<li>textStyle:显示的文本的style，默认是:\"padding:5px;text-align:center;font-size:20px;\"</li>\n<li>size:[width,height],默认[\"80%\",\"90%\"]</li>\n<li>min:[minWidth,minHeight]</li>\n<li>max:[maxWidth,maxHeight],默认[\"100%\",\"100%\"]</li>\n<li>width:</li>\n<li>height:</li>\n<li>shade:透明度，默认0.3</li>\n<li>contentCss:object对象，设置内容区域的css，默认{margin:\"0px\"}</li>\n<li>resizable:是否允许缩放大小，默认true</li>\n<li>isModal:是否是模态框，默认为true</li>\n<li>cornerClose:是否含有角落的关闭按钮，默认为true</li>\n<li>modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true</li>\n<li>scrollbar:页面body是否有滚动条，默认false</li>\n<li>initShow:是否显示，默认true</li>\n<li>show:function(showOrHide)显示,showOrHide为false时隐藏</li>\n<li>toTop:function()置顶</li>\n<li>minmax:是否含有最大和最小化按钮，默认为true</li>\n<li>btnsAlign:left,center,right;默认right</li>\n<li>buttonsThis:按钮回调函数的this指向，默认为当前handle.</li>\n<li>buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]</li>\n<li>buttonFoucs:[index]设置按钮重点，默认为[0]</li>\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake</li>\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]</li>\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭</li>\n<li>onGetIFrame:function(iframe)</li>\n<li>onShadeClick:function()</li>\n<li>onShow:显示后的回调</li>\n<li>onClosed:function(){}关闭时的回调</li>\n<li>onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。</li>\n</ul>\n<h2 id=\"9widgetgenbutton\" data-source-line=\"162\"><a class=\"anchor\" href=\"#9widgetgenbutton\"><span class=\"octicon octicon-link\"></span></a>9.widget().genButton</h2>\n<p data-source-line=\"163\">生成按钮。</p>\n<pre data-source-line=\"164\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">sdk</span><span class=\"hljs-selector-class\">.widget</span>()<span class=\"hljs-selector-class\">.genButton</span>(...)<span class=\"hljs-selector-class\">.done</span>()</code></pre><ul data-source-line=\"167\">\n<li>size:small(默认),normal,medium,large</li>\n<li>type:primary,info,success,warn,danger/error</li>\n<li>radius:是否圆角</li>\n<li>disabled:是否禁用</li>\n<li>content:按钮内容</li>\n<li>text:按钮文本</li>\n<li>class:</li>\n<li>href:点击跳转的连接</li>\n<li>attrs:</li>\n<li>click:function()</li>\n<li>done:function()返回按钮dom</li>\n</ul>',15,'ARTICLE',1,'2018-07-20 14:38:57','153188673971709000006',NULL,1,'UI功能',1,0,1006,'## 1.loading\n加载框。\n```\nsdk.loading(...).done()\n```\n* type:default,star,stars\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* isModal:是否是模态框，默认为true\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* onShow:显示后的回调\n* onClosed:关闭时的回调\n\n## 2.showToast()\nfunction(text)直接弹出文本消息。\n\n## 3.toast\n弹出气泡消息。\n\n```\nsdk.toast(...).done()\n```\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\n* isModal:是否是模态框，默认为true\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭\n* content:显示的内容\n* onShow:显示后的回调\n* onClosed:关闭时的回调\n\n## 4.alert\n提示框。\n```\nsdk.alert(...).done()\n```\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\n* isModal:是否是模态框，默认为true\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* title:标题|false\n* content:显示的内容\n* onShow:显示后的回调\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* onClosed:关闭时的回调\n* onOk:function(),返回false不会关闭\n* okLabel：\n\n## 5.confirm\n确认框。\n```\nsdk.confirm(...).done()\n```\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile\n* isModal:是否是模态框，默认为true\n* title:标题|false\n* content:显示的内容\n* onShow:显示后的回调\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* onClosed:关闭时的回调\n* onOk:function(),返回false不会关闭\n* onCancel:function(),返回false不会关闭\n* okLabel:\n* cancelLabel：\n\n## 6.popInput\n弹出输入框。\n```\nsdk.popInput(...).done()\n```\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* title:标题|false\n* initValue:初始值\n* maxlength:最大长度\n* inputType:text,textarea,password,date,datetime,time\n* range:true|fale,对date,datetime,time有效\n* rangeSP:范围分隔符号,默认空格\n* ************************************\n* format:时间日期格式:默认值：yyyy-MM-dd\n* yyyy	年份，至少四位数。如果不足四位，则前面补零\n* y	年份，不限制位数，即不管年份多少位，前面均不补零\n* MM	月份，至少两位数。如果不足两位，则前面补零。\n* M	月份，允许一位数。\n* dd	日期，至少两位数。如果不足两位，则前面补零。\n* d	日期，允许一位数。\n* HH	小时，至少两位数。如果不足两位，则前面补零。\n* H	小时，允许一位数。\n* mm	分钟，至少两位数。如果不足两位，则前面补零。\n* m	分钟，允许一位数。\n* ss	秒数，至少两位数。如果不足两位，则前面补零。\n* s	秒数，允许一位数。\n* ************************************\n* isModal:是否是模态框，默认为true\n* onShow:显示后的回调\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* onClosed:关闭时的回调\n* onCancel:function()\n* hasCancel:true/false\n* onOk:function(val):返回false不会关闭\n* onCancel:function()\n* validateType:\n* errmsg:\n\n## 7.tips\n吸附框。\n```\nsdk.tips(...).done()\n```\n* target:吸附元素\n* content:内容\n* position:up,down,left,right\n* bgcolor:背景颜色\n* color:字体颜色，默认黑色\n* tipsMore:默认true，会销毁之前的。\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* close:关闭\n\n## 8.popPage\n弹出页面。\n```\nsdk.popPage(...).done()\n```\n* title:标题|false\n* content:显示的内容\n* tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body\n* url:显示的url\n* text:显示的文本内容\n* textStyle:显示的文本的style，默认是:\"padding:5px;text-align:center;font-size:20px;\"\n* size:[width,height],默认[\"80%\",\"90%\"]\n* min:[minWidth,minHeight]\n* max:[maxWidth,maxHeight],默认[\"100%\",\"100%\"]\n* width:\n* height:\n* shade:透明度，默认0.3\n* contentCss:object对象，设置内容区域的css，默认{margin:\"0px\"}\n* resizable:是否允许缩放大小，默认true\n* isModal:是否是模态框，默认为true\n* cornerClose:是否含有角落的关闭按钮，默认为true\n* modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true\n* scrollbar:页面body是否有滚动条，默认false\n* initShow:是否显示，默认true\n* show:function(showOrHide)显示,showOrHide为false时隐藏\n* toTop:function()置顶\n* minmax:是否含有最大和最小化按钮，默认为true\n* btnsAlign:left,center,right;默认right\n* buttonsThis:按钮回调函数的this指向，默认为当前handle.\n* buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]\n* buttonFoucs:[index]设置按钮重点，默认为[0]\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\n* onGetIFrame:function(iframe)\n* onShadeClick:function()\n* onShow:显示后的回调\n* onClosed:function(){}关闭时的回调\n* onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。\n\n## 9.widget().genButton\n生成按钮。\n```\nsdk.widget().genButton(...).done()\n```\n* size:small(默认),normal,medium,large\n* type:primary,info,success,warn,danger/error\n* radius:是否圆角\n* disabled:是否禁用\n* content:按钮内容\n* text:按钮文本\n* class:\n* href:点击跳转的连接\n* attrs:\n* click:function()\n* done:function()返回按钮dom','153188636499907000002'),('153207133240401000022','xsloader配置服务',NULL,'<h2 id=\"1设置本地配置路径\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1设置本地配置路径\"><span class=\"octicon octicon-link\"></span></a>1.设置本地配置路径</h2>\n<ul data-source-line=\"2\">\n<li>data-xsloader-conf：相对于当前页面地址的配置路径</li>\n<li>data-xsloader-conf2：相对于加载器地址的配置路径。</li>\n</ul>\n<h2 id=\"2设置入口脚本文件\" data-source-line=\"5\"><a class=\"anchor\" href=\"#2设置入口脚本文件\"><span class=\"octicon octicon-link\"></span></a>2.设置入口脚本文件</h2>\n<ul data-source-line=\"6\">\n<li>data-xsloader-main：用于手动指定main.getPath()的返回值，相对于当前页面地址。</li>\n<li>默认为：./main/当前网页名.js</li>\n</ul>\n<h2 id=\"3配置格式\" data-source-line=\"9\"><a class=\"anchor\" href=\"#3配置格式\"><span class=\"octicon octicon-link\"></span></a>3.配置格式</h2>\n<pre data-source-line=\"11\"><code class=\"hljs\">{\n	<span class=\"hljs-string\">\"properties\"</span>:{},\n	<span class=\"hljs-string\">\"main\"</span>:{\n		<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"main\"</span>,//#//入口模块名，默认<span class=\"hljs-string\">\"main\"</span>,\n		<span class=\"hljs-string\">\"getPath\"</span>:/*{f}*/function(){//#//获取主模块的路径，默认为<span class=\"hljs-string\">\"./main/当前网页名.js\"</span>\n			return dataMain || <span class=\"hljs-string\">\"./main/当前网页名.js\"</span><span class=\"hljs-comment\">;</span>\n		}/*{f}*/,\n		<span class=\"hljs-string\">\"localConfigVar\"</span>:<span class=\"hljs-string\">\"lconfig\"</span>,//#//应用配置的window变量名称\n		<span class=\"hljs-string\">\"globalConfigVar\"</span>:<span class=\"hljs-string\">\"gconfig\"</span>,//#//服务端配置的window变量名称,\n		<span class=\"hljs-string\">\"before\"</span>:/*{f}*/function(){\n			console.log(<span class=\"hljs-string\">\"before:\"</span> + name)<span class=\"hljs-comment\">;</span>\n		}/*{f}*/,\n		<span class=\"hljs-string\">\"after\"</span>:/*{f}*/function(){\n			console.log(<span class=\"hljs-string\">\"after:\"</span> + name)<span class=\"hljs-comment\">;</span>\n		}/*{f}*/\n	},\n	<span class=\"hljs-string\">\"service\"</span>:{\n		<span class=\"hljs-string\">\"confUrl\"</span>:<span class=\"hljs-string\">\"\"</span>,//#//服务端配置地址，本地配置有效\n		<span class=\"hljs-string\">\"hasGlobal\"</span><span class=\"hljs-symbol\">:false</span>,//#//是否含有服务端的全局配置，默认<span class=\"hljs-literal\">false</span>\n		<span class=\"hljs-string\">\"resUrl\"</span>:<span class=\"hljs-string\">\"\"</span>,//#//(<span class=\"hljs-name\">group:groupid:version</span>)首选资源地址,get请求格式为添加参数m=encodeURIComponent(<span class=\"hljs-name\">groupModule</span>),\n		<span class=\"hljs-string\">\"resUrls\"</span>:[]//#//备用资源地址\n	},\n	<span class=\"hljs-string\">\"chooseLoader\"</span>:/*{f}*/function(<span class=\"hljs-name\">localConfig</span>){//#//返回一个configName；当此函数为service全局配置的函数时，localConfig为应用的配置对象<span class=\"hljs-comment\">;本地配置调用时，localConfig为null。</span>\n		return <span class=\"hljs-string\">\"configName\"</span><span class=\"hljs-comment\">;</span>\n	}/*{f}*/,\n	<span class=\"hljs-string\">\"loader\"</span>:{\n		<span class=\"hljs-string\">\"configName\"</span>:{}\n	}\n}</code></pre>',14,'ARTICLE',1,'2018-07-20 15:22:12','153189041004409000012',NULL,1,'API说明',1,0,296,'## 1.设置本地配置路径\n- data-xsloader-conf：相对于当前页面地址的配置路径\n- data-xsloader-conf2：相对于加载器地址的配置路径。\n\n## 2.设置入口脚本文件\n- data-xsloader-main：用于手动指定main.getPath()的返回值，相对于当前页面地址。\n- 默认为：./main/当前网页名.js\n\n## 3.配置格式\n\n```\n{\n	\"properties\":{},\n	\"main\":{\n		\"name\":\"main\",//#//入口模块名，默认\"main\",\n		\"getPath\":/*{f}*/function(){//#//获取主模块的路径，默认为\"./main/当前网页名.js\"\n			return dataMain || \"./main/当前网页名.js\";\n		}/*{f}*/,\n		\"localConfigVar\":\"lconfig\",//#//应用配置的window变量名称\n		\"globalConfigVar\":\"gconfig\",//#//服务端配置的window变量名称,\n		\"before\":/*{f}*/function(){\n			console.log(\"before:\" + name);\n		}/*{f}*/,\n		\"after\":/*{f}*/function(){\n			console.log(\"after:\" + name);\n		}/*{f}*/\n	},\n	\"service\":{\n		\"confUrl\":\"\",//#//服务端配置地址，本地配置有效\n		\"hasGlobal\":false,//#//是否含有服务端的全局配置，默认false\n		\"resUrl\":\"\",//#//(group:groupid:version)首选资源地址,get请求格式为添加参数m=encodeURIComponent(groupModule),\n		\"resUrls\":[]//#//备用资源地址\n	},\n	\"chooseLoader\":/*{f}*/function(localConfig){//#//返回一个configName；当此函数为service全局配置的函数时，localConfig为应用的配置对象;本地配置调用时，localConfig为null。\n		return \"configName\";\n	}/*{f}*/,\n	\"loader\":{\n		\"configName\":{}\n	}\n}\n```','153189028248007000010'),('153259089682301000002','数据库规范',NULL,'<h1 id=\"一-基础\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-基础\"><span class=\"octicon octicon-link\"></span></a>一、基础</h1>\n<h2 id=\"1-编码\" data-source-line=\"3\"><a class=\"anchor\" href=\"#1-编码\"><span class=\"octicon octicon-link\"></span></a>1、编码</h2>\n<ul data-source-line=\"4\">\n<li>【<mark>强制</mark>】默认采用二进制且<mark>大小写敏感</mark>的编码规则，如MySQL中设置：</li>\n</ul>\n<pre data-source-line=\"6\"><code class=\"hljs\">字符集：utf8mb4\n排序数据库排序规则：ubf8mb4_bin</code></pre><ul data-source-line=\"10\">\n<li>【推荐】字符集采用utf8.</li>\n</ul>\n<h2 id=\"2-命名\" data-source-line=\"12\"><a class=\"anchor\" href=\"#2-命名\"><span class=\"octicon octicon-link\"></span></a>2、命名</h2>\n<ul data-source-line=\"13\">\n<li>【<mark>强制</mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线</strong>），且应见名知意。</li>\n<li>【<mark>强制</mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。</li>\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。</li>\n<li>【推荐】数据表字段不用加表名首字母前缀。</li>\n<li>【<mark>强制</mark>】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。</li>\n</ul>\n<h2 id=\"3-表结构\" data-source-line=\"19\"><a class=\"anchor\" href=\"#3-表结构\"><span class=\"octicon octicon-link\"></span></a>3、表结构</h2>\n<ul data-source-line=\"20\">\n<li>【<mark>强制</mark>】主键：数据表必须包含主键id char(21) CHARACTER SET ascii COLLATE ascii_bin（主键长度暂定21个字符，必须是ascii_bin、区分大小写），外键与此对应。</li>\n<li>【<mark>强制</mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。</li>\n<li>【<mark>强制</mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</li>\n<li>【<mark>强制</mark>】数值：小数类型为decimal，禁止使用float和double。</li>\n<li>【<mark>强制</mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。</li>\n<li>数据表基本字段：(rcode、tpid为公共服务特字段)</li>\n</ul>\n<pre data-source-line=\"27\"><code class=\"hljs\">id char(21) CHARACTER <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">ascii</span> <span class=\"hljs-keyword\">COLLATE</span> ascii_bin <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>  主键\nremark <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">512</span>) <span class=\"hljs-literal\">NULL</span>  备注\ncreatetime datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>  添加时间\nupdatetime datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>  上次修改时间\ncreator <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">21</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">ascii</span> <span class=\"hljs-keyword\">COLLATE</span> ascii_bin <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>  创建者<span class=\"hljs-keyword\">id</span>\n\ntpid <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">21</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">ascii</span> <span class=\"hljs-keyword\">COLLATE</span> ascii_bin <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> 特殊字段\nrcode <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">256</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">ascii</span> <span class=\"hljs-keyword\">COLLATE</span> ascii_bin <span class=\"hljs-literal\">NULL</span> 特殊字段</code></pre><h2 id=\"4-查询\" data-source-line=\"38\"><a class=\"anchor\" href=\"#4-查询\"><span class=\"octicon octicon-link\"></span></a>4、查询</h2>\n<ul data-source-line=\"39\">\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。</li>\n<li>【<mark>强制</mark>】不要使用count(列名)或count(常量)，而使用count(*)。</li>\n<li>【<mark>强制</mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。</li>\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。</li>\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。</li>\n</ul>',29,'ARTICLE',1,'2018-07-26 15:41:37','153259074763509000001',NULL,1,'默认分类',1,0,1007,'# 一、基础\n\n## 1、编码\n- 【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\n\n```\n字符集：utf8mb4\n排序数据库排序规则：ubf8mb4_bin\n```\n- 【推荐】字符集采用utf8.\n\n## 2、命名\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\n- 【推荐】数据表字段不用加表名首字母前缀。\n- 【==强制==】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。\n\n## 3、表结构\n- 【==强制==】主键：数据表必须包含主键id char(21) CHARACTER SET ascii COLLATE ascii_bin（主键长度暂定21个字符，必须是ascii_bin、区分大小写），外键与此对应。\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\n-  数据表基本字段：(rcode、tpid为公共服务特字段)\n\n```\nid char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL  主键\nremark varchar(512) NULL  备注\ncreatetime datetime NOT NULL  添加时间\nupdatetime datetime NOT NULL  上次修改时间\ncreator char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL  创建者id\n\ntpid char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL 特殊字段\nrcode varchar(256) CHARACTER SET ascii COLLATE ascii_bin NULL 特殊字段\n```\n\n## 4、查询\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)。\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\n- 【推荐】避免过多的连接(join)查询，不要超过3个。','153188636499907000002'),('153259570449801000005','Html与Css规范',NULL,'<h1 id=\"一-html规范\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-html规范\"><span class=\"octicon octicon-link\"></span></a>一、Html规范</h1>\n<h2 id=\"1-标签\" data-source-line=\"3\"><a class=\"anchor\" href=\"#1-标签\"><span class=\"octicon octicon-link\"></span></a>1、标签</h2>\n<ul data-source-line=\"4\">\n<li>【<mark>强制</mark>】自定义标签属性，必须以data-xs-开头，如data-xs-image。</li>\n<li>【<mark>强制</mark>】常用标签属性先后顺序：id &gt; class &gt; 表单属性(如name,maxlength,required) &gt;  style  &gt; 内嵌事件监听(如onclick,onload)。</li>\n</ul>\n<h2 id=\"2-安全\" data-source-line=\"7\"><a class=\"anchor\" href=\"#2-安全\"><span class=\"octicon octicon-link\"></span></a>2、安全</h2>\n<ul data-source-line=\"8\">\n<li>【<mark>强制</mark>】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：</li>\n</ul>\n<pre data-source-line=\"10\"><code class=\"hljs\">被禁止的方式：\n<span class=\"hljs-keyword\">var</span> content=...;\n<span class=\"hljs-keyword\">var</span> htmlStr=<span class=\"hljs-string\">\'\'</span>+content+<span class=\"hljs-string\">\'\'</span>;\nsomeDom.innerHTML=htmlStr;\n\n符合要求的方式：（jquery方式）\n<span class=\"hljs-keyword\">var</span> content=...;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">div</span>=$(<span class=\"hljs-string\">\'\'</span>,{\n    text:content\n});\n$(someDom).empty().append(<span class=\"hljs-keyword\">div</span>);</code></pre><h1 id=\"二-css规范\" data-source-line=\"25\"><a class=\"anchor\" href=\"#二-css规范\"><span class=\"octicon octicon-link\"></span></a>二、Css规范</h1>\n<h2 id=\"1-命名方案\" data-source-line=\"27\"><a class=\"anchor\" href=\"#1-命名方案\"><span class=\"octicon octicon-link\"></span></a>1、命名方案</h2>\n<ul data-source-line=\"28\">\n<li>【<mark>强制</mark>】小写字母、数字、连接线(-)。</li>\n<li>【推荐】见名知意，优先英文单词，尽量写全单词。</li>\n</ul>',18,'ARTICLE',1,'2018-07-26 17:01:45','153259074763509000001',NULL,1,'默认分类',1,0,1008,'# 一、Html规范\n\n## 1、标签\n- 【==强制==】自定义标签属性，必须以data-xs-开头，如data-xs-image。\n- 【==强制==】常用标签属性先后顺序：id > class > 表单属性(如name,maxlength,required) >  style  > 内嵌事件监听(如onclick,onload)。\n\n## 2、安全\n- 【==强制==】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：\n\n```\n被禁止的方式：\nvar content=...;\nvar htmlStr=\'\'+content+\'\';\nsomeDom.innerHTML=htmlStr;\n\n符合要求的方式：（jquery方式）\nvar content=...;\nvar div=$(\'\',{\n    text:content\n});\n$(someDom).empty().append(div);\n```\n\n\n# 二、Css规范\n\n## 1、命名方案\n- 【==强制==】小写字母、数字、连接线(-)。\n- 【推荐】见名知意，优先英文单词，尽量写全单词。','153188636499907000002'),('153259656286201000009','Java规范',NULL,'<h1 id=\"一-命名规范\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-命名规范\"><span class=\"octicon octicon-link\"></span></a>一、命名规范</h1>\n<h2 id=\"1-基础\" data-source-line=\"2\"><a class=\"anchor\" href=\"#1-基础\"><span class=\"octicon octicon-link\"></span></a>1、基础</h2>\n<p data-source-line=\"3\">【推荐】“驼峰命名法”。</p>\n<h2 id=\"2-数据库dao层\" data-source-line=\"5\"><a class=\"anchor\" href=\"#2-数据库dao层\"><span class=\"octicon octicon-link\"></span></a>2、数据库Dao层</h2>\n<ul data-source-line=\"6\">\n<li>【<mark>强制</mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。</li>\n<li>【<mark>强制</mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）</li>\n</ul>\n<pre data-source-line=\"9\"><code class=\"hljs\">AccessClass getByTied(<span class=\"hljs-symbol\">@Param</span>(<span class=\"hljs-string\">\"aid\"</span>) <span class=\"hljs-built_in\">String</span> aid, <span class=\"hljs-symbol\">@Param</span>(<span class=\"hljs-string\">\"tied\"</span>) <span class=\"hljs-built_in\">String</span> tied)<span class=\"hljs-comment\">;</span></code></pre><ul data-source-line=\"12\">\n<li>【推荐】只有一个查询条件的，不用实体参数，如：</li>\n</ul>\n<pre data-source-line=\"14\"><code class=\"hljs\">不符合：\n<span class=\"hljs-function\">AccessClass <span class=\"hljs-title\">getById</span><span class=\"hljs-params\">(AccessClass accessClass)</span></span>;\n\n符合要求：\nAccessClass getById(<span class=\"hljs-meta\">@Param</span>(<span class=\"hljs-string\">\"id\"</span>) String id);</code></pre><h2 id=\"3-数据接口统一返回对象\" data-source-line=\"21\"><a class=\"anchor\" href=\"#3-数据接口统一返回对象\"><span class=\"octicon octicon-link\"></span></a>3、数据接口统一返回对象</h2>\n<pre data-source-line=\"23\"><code class=\"hljs\">cn<span class=\"hljs-selector-class\">.xishan</span><span class=\"hljs-selector-class\">.oftenporter</span><span class=\"hljs-selector-class\">.porter</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.JResponse</span></code></pre><p data-source-line=\"26\">其json格式如下：</p>\n<pre data-source-line=\"28\"><code class=\"hljs\">{\n  <span class=\"hljs-string\">code  :</span>  <span class=\"hljs-number\">0</span>,   <span class=\"hljs-comment\">//结果码（必定含有），int型，0表示成功，其他值表示失败</span>\n  <span class=\"hljs-string\">cname :</span>  <span class=\"hljs-string\">\"SUCCESS\"</span>, <span class=\"hljs-comment\">//结果码的文字表示，便于调试查看</span>\n  <span class=\"hljs-string\">rs    :</span>  Object ,  <span class=\"hljs-comment\">//结果对象，可选，任何类型</span>\n  <span class=\"hljs-string\">desc  :</span>  String,  <span class=\"hljs-comment\">//描述内容，可选，如错误描述内容</span>\n  <span class=\"hljs-string\">extra    :</span>  Object  <span class=\"hljs-comment\">//额外的结果对象，可选，任何类型</span>\n}</code></pre><p data-source-line=\"37\">其他的内置code请见：</p>\n<pre data-source-line=\"39\"><code class=\"hljs\">cn<span class=\"hljs-selector-class\">.xishan</span><span class=\"hljs-selector-class\">.oftenporter</span><span class=\"hljs-selector-class\">.porter</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.ResultCode</span></code></pre><h2 id=\"4-安全规范\" data-source-line=\"43\"><a class=\"anchor\" href=\"#4-安全规范\"><span class=\"octicon octicon-link\"></span></a>4、安全规范</h2>\n<h3 id=\"1-请求方法规范\" data-source-line=\"45\"><a class=\"anchor\" href=\"#1-请求方法规范\"><span class=\"octicon octicon-link\"></span></a>1、请求方法规范</h3>\n<p data-source-line=\"46\">所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。</p>\n<p data-source-line=\"48\">例如spring:</p>\n<pre data-source-line=\"49\"><code class=\"hljs\"><span class=\"hljs-variable\">@RequestMapping</span>(path = <span class=\"hljs-string\">\"save\"</span>, method = RequestMethod.POST)\n<span class=\"hljs-variable\">@PortComment</span>(name = <span class=\"hljs-string\">\"保存\"</span>, desc = <span class=\"hljs-string\">\"添加或修改\"</span>)\n<span class=\"hljs-variable\">@ResponseBody</span>\npublic JResponse save(WObject wObject, E entity)\n{\n    <span class=\"hljs-selector-tag\">if</span> (entity.getId() == null)\n    {\n        theBaseService<span class=\"hljs-selector-class\">.add</span>(wObject, entity);\n    } else\n    {\n        theBaseService<span class=\"hljs-selector-class\">.updateById</span>(wObject, entity);\n    }\n    return JResponse.success(entity.getId());\n}</code></pre><p data-source-line=\"65\">对于OftenPorter框架可无需显示写出，因为默认只为GET方法。</p>\n<h2 id=\"5-日志\" data-source-line=\"67\"><a class=\"anchor\" href=\"#5-日志\"><span class=\"octicon octicon-link\"></span></a>5、日志</h2>\n<p data-source-line=\"68\">日志打印用<strong>slf4j</strong>。</p>\n<h2 id=\"6-数据接口层或控制器层\" data-source-line=\"71\"><a class=\"anchor\" href=\"#6-数据接口层或控制器层\"><span class=\"octicon octicon-link\"></span></a>6、数据接口层或控制器层</h2>\n<h3 id=\"1-无需进行通用的异常捕获\" data-source-line=\"73\"><a class=\"anchor\" href=\"#1-无需进行通用的异常捕获\"><span class=\"octicon octicon-link\"></span></a>1、无需进行通用的异常捕获</h3>\n<pre data-source-line=\"75\"><code class=\"hljs\">无需加<span class=\"hljs-selector-tag\">try-catch</span>，例如这样使得切面无法捕获特定特定的异常，且更好方式取代这种。\n<span class=\"hljs-selector-tag\">try</span>\n{\n    ....\n}\n<span class=\"hljs-selector-tag\">catch</span>(Exception e){\n    LOGGER<span class=\"hljs-selector-class\">.warn</span>(e.getMessage(), e);\n    return JResponse<span class=\"hljs-selector-class\">.failed</span>(<span class=\"hljs-string\">\"系统错误\"</span>);\n}</code></pre>',24,'ARTICLE',1,'2018-07-26 17:16:03','153259074763509000001',NULL,1,'默认分类',1,0,1009,'# 一、命名规范\n## 1、基础\n【推荐】“驼峰命名法”。\n\n## 2、数据库Dao层\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\n\n```\nAccessClass getByTied(@Param(\"aid\") String aid, @Param(\"tied\") String tied);\n```\n- 【推荐】只有一个查询条件的，不用实体参数，如：\n\n```\n不符合：\nAccessClass getById(AccessClass accessClass);\n\n符合要求：\nAccessClass getById(@Param(\"id\") String id);\n```\n## 3、数据接口统一返回对象\n\n```\ncn.xishan.oftenporter.porter.core.JResponse\n```\n其json格式如下：\n\n```\n{\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\n  cname :  \"SUCCESS\", //结果码的文字表示，便于调试查看\n  rs    :  Object ,  //结果对象，可选，任何类型\n  desc  :  String,  //描述内容，可选，如错误描述内容\n  extra    :  Object  //额外的结果对象，可选，任何类型\n}\n```\n其他的内置code请见：\n\n```\ncn.xishan.oftenporter.porter.core.ResultCode\n```\n\n## 4、安全规范\n\n### 1、请求方法规范\n所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\n\n例如spring:\n```\n@RequestMapping(path = \"save\", method = RequestMethod.POST)\n@PortComment(name = \"保存\", desc = \"添加或修改\")\n@ResponseBody\npublic JResponse save(WObject wObject, E entity)\n{\n    if (entity.getId() == null)\n    {\n        theBaseService.add(wObject, entity);\n    } else\n    {\n        theBaseService.updateById(wObject, entity);\n    }\n    return JResponse.success(entity.getId());\n}\n```\n对于OftenPorter框架可无需显示写出，因为默认只为GET方法。\n\n## 5、日志\n日志打印用**slf4j**。\n\n\n## 6、数据接口层或控制器层\n\n### 1、无需进行通用的异常捕获\n\n```\n无需加try-catch，例如这样使得切面无法捕获特定特定的异常，且更好方式取代这种。\ntry\n{\n    ....\n}\ncatch(Exception e){\n    LOGGER.warn(e.getMessage(), e);\n    return JResponse.failed(\"系统错误\");\n}\n```','153188636499907000002'),('153259822317101000015','开发环境',NULL,'<h1 id=\"一-基本环境\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-基本环境\"><span class=\"octicon octicon-link\"></span></a>一、基本环境</h1>\n<ul data-source-line=\"2\">\n<li>开发工具字符集：utf8</li>\n<li>Java：Jdk 8（高版本另外讨论）</li>\n<li>代码构建：Maven 3.5.2+（<strong>私服</strong>：配置公司maven私服）</li>\n<li>代码管理：Git</li>\n<li>数据库：Mysql5.7</li>\n</ul>\n<h1 id=\"二-开发工具\" data-source-line=\"8\"><a class=\"anchor\" href=\"#二-开发工具\"><span class=\"octicon octicon-link\"></span></a>二、开发工具</h1>\n<h2 id=\"1-java-ide\" data-source-line=\"10\"><a class=\"anchor\" href=\"#1-java-ide\"><span class=\"octicon octicon-link\"></span></a>1、Java IDE</h2>\n<ul data-source-line=\"11\">\n<li>IntelliJ IDEA 2018.1.4+ (推荐社区版)</li>\n</ul>\n<h2 id=\"2-前端开发ide\" data-source-line=\"13\"><a class=\"anchor\" href=\"#2-前端开发ide\"><span class=\"octicon octicon-link\"></span></a>2、前端开发IDE</h2>\n<ul data-source-line=\"14\">\n<li>HBuilder</li>\n</ul>',23,'ARTICLE',1,'2018-07-26 17:43:43','153259817042209000013',NULL,1,'默认分类',1,0,1010,'# 一、基本环境\n- 开发工具字符集：utf8\n- Java：Jdk 8（高版本另外讨论）\n- 代码构建：Maven 3.5.2+（**私服**：配置公司maven私服）\n- 代码管理：Git\n- 数据库：Mysql5.7\n\n# 二、开发工具\n\n##  1、Java IDE\n- IntelliJ IDEA 2018.1.4+ (推荐社区版)\n\n## 2、前端开发IDE\n- HBuilder','153188636499907000002'),('153259824154401000016','项目骨架',NULL,'<h1 id=\"一-外包组\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-外包组\"><span class=\"octicon octicon-link\"></span></a>一、外包组</h1>\n<h1 id=\"二-产品研发组\" data-source-line=\"4\"><a class=\"anchor\" href=\"#二-产品研发组\"><span class=\"octicon octicon-link\"></span></a>二、产品研发组</h1>\n<h2 id=\"1-archetype-spring-boot-web-版本202-snapshot\" data-source-line=\"6\"><a class=\"anchor\" href=\"#1-archetype-spring-boot-web-版本202-snapshot\"><span class=\"octicon octicon-link\"></span></a>1、archetype-spring-boot-web 版本:2.0.2-SNAPSHOT</h2>\n<p data-source-line=\"7\"><strong>介绍</strong>：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。</p>\n<ul data-source-line=\"8\">\n<li>添加maven骨架</li>\n</ul>\n<pre data-source-line=\"10\"><code class=\"hljs\"><span class=\"hljs-symbol\">groupId</span>:<span class=\"hljs-meta\">cn</span>.xishan<span class=\"hljs-meta\">.global</span>\n<span class=\"hljs-symbol\">artifactId</span>:archetype-spring-<span class=\"hljs-keyword\">boot-web\n</span><span class=\"hljs-symbol\">version</span>:<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">2</span>-SNAPSHOT</code></pre><ul data-source-line=\"15\">\n<li>创建maven项目</li>\n</ul>',26,'ARTICLE',1,'2018-07-26 17:44:02','153259817042209000013',NULL,1,'默认分类',1,0,1011,'# 一、外包组\n\n\n# 二、产品研发组\n\n## 1、archetype-spring-boot-web 版本:2.0.2-SNAPSHOT\n**介绍**：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。\n- 添加maven骨架\n\n```\ngroupId:cn.xishan.global\nartifactId:archetype-spring-boot-web\nversion:2.0.2-SNAPSHOT\n```\n- 创建maven项目','153188636499907000002'),('153317133222301000013','其他工具与方法',NULL,'<h2 id=\"1xssimpleedit\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1xssimpleedit\"><span class=\"octicon octicon-link\"></span></a>1.xsSimpleEdit</h2>\n<p data-source-line=\"2\">用于编辑，列表页面与编辑页面是单独的页面。</p>\n<ul data-source-line=\"3\">\n<li>******<strong><strong><strong><strong><em>[主页面]</em></strong></strong></strong></strong></li>\n<li>title:[主页面]</li>\n<li>size:[width,height] [主页面]</li>\n<li>width:[主页面]</li>\n<li>height:[主页面]</li>\n<li>min:[width,height] [主页面]</li>\n<li>max:[width,height] [主页面]</li>\n<li>url：[主页面]有表示主页面，没有表示被打开的页面</li>\n<li>saveLoading:保存时是否有等待框，默认是</li>\n<li>autoShowMsg:是否自动显示消息，默认是</li>\n<li>useParent:true</li>\n<li>********<strong><strong><strong><em>[编辑界面]</em></strong></strong></strong></li>\n<li>form:可选[编辑界面]</li>\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]</li>\n<li>path:可选,可有表单action提供[编辑界面]</li>\n<li>method:可选,可有表单method提供[编辑界面]</li>\n<li>toSave:function()保存,[编辑界面]</li>\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]</li>\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]</em></strong></strong></strong></strong></strong></strong></strong></li>\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面</li>\n<li>onConnected:function(initData,option):[主页面][编辑界面]</li>\n<li>initData:[主页面][编辑界面]</li>\n<li>handle.close:function()[主页面]</li>\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果</li>\n<li>handle.submit:function()[编辑界面]</li>\n<li>handle.putValues:function(data)[编辑界面]</li>\n</ul>\n<h2 id=\"2网络访问的简单再封装xxxwithloading\" data-source-line=\"30\"><a class=\"anchor\" href=\"#2网络访问的简单再封装xxxwithloading\"><span class=\"octicon octicon-link\"></span></a>2.网络访问的简单再封装xxxWithLoading</h2>\n<p data-source-line=\"31\">ajax访问，并带有模态加载框，且有气泡提示。\noption参数说明：</p>\n<pre data-source-line=\"34\"><code class=\"hljs\"><span class=\"hljs-symbol\">okMsg:</span>可选,访问成功的信息\n<span class=\"hljs-symbol\">errMsg:</span>可选,访问失败的信息\n<span class=\"hljs-symbol\">params:</span>对象，提交的参数</code></pre><h3 id=\"1deletewithloadingurl-callback-option\" data-source-line=\"40\"><a class=\"anchor\" href=\"#1deletewithloadingurl-callback-option\"><span class=\"octicon octicon-link\"></span></a>1)deleteWithLoading(url, callback, option)</h3>\n<p data-source-line=\"41\">请求方为DELETE。</p>\n<h3 id=\"2putwithloadingurl-callback-failcallback-option\" data-source-line=\"43\"><a class=\"anchor\" href=\"#2putwithloadingurl-callback-failcallback-option\"><span class=\"octicon octicon-link\"></span></a>2)putWithLoading(url, callback, failCallback, option)</h3>\n<p data-source-line=\"44\">请求方为PUT。</p>\n<h3 id=\"3getwithloadingurl-callback-failcallback-option\" data-source-line=\"46\"><a class=\"anchor\" href=\"#3getwithloadingurl-callback-failcallback-option\"><span class=\"octicon octicon-link\"></span></a>3)getWithLoading(url, callback, failCallback, option)</h3>\n<p data-source-line=\"47\">请求方为GET。</p>\n<h3 id=\"4postwithloadingurl-callback-failcallback-option\" data-source-line=\"49\"><a class=\"anchor\" href=\"#4postwithloadingurl-callback-failcallback-option\"><span class=\"octicon octicon-link\"></span></a>4)postWithLoading(url, callback, failCallback, option)</h3>\n<p data-source-line=\"50\">请求方为POST。</p>\n<h2 id=\"3日期格式化windowformateofxxxxxdateormilliseconds\" data-source-line=\"52\"><a class=\"anchor\" href=\"#3日期格式化windowformateofxxxxxdateormilliseconds\"><span class=\"octicon octicon-link\"></span></a>3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)</h2>\n<pre data-source-line=\"54\"><code class=\"hljs\"><span class=\"hljs-symbol\">dateOrMilliseconds:</span>Date对象或时间毫秒数</code></pre><h3 id=\"1formatofdatetimemaydayname\" data-source-line=\"57\"><a class=\"anchor\" href=\"#1formatofdatetimemaydayname\"><span class=\"octicon octicon-link\"></span></a>1)formatOfDatetimeMayDayName()</h3>\n<p data-source-line=\"58\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。</p>\n<h3 id=\"2formatofdateminutesmaydayname\" data-source-line=\"60\"><a class=\"anchor\" href=\"#2formatofdateminutesmaydayname\"><span class=\"octicon octicon-link\"></span></a>2)formatOfDateMinutesMayDayName()</h3>\n<p data-source-line=\"61\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。</p>\n<h3 id=\"3formatofdatemaydayname\" data-source-line=\"63\"><a class=\"anchor\" href=\"#3formatofdatemaydayname\"><span class=\"octicon octicon-link\"></span></a>3)formatOfDateMayDayName()</h3>\n<p data-source-line=\"64\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。</p>\n<h3 id=\"4formatofdatetime\" data-source-line=\"66\"><a class=\"anchor\" href=\"#4formatofdatetime\"><span class=\"octicon octicon-link\"></span></a>4)formatOfDatetime()</h3>\n<p data-source-line=\"67\">返回“年-月-日 时:分:秒”。</p>\n<h3 id=\"5formatofdateminutes\" data-source-line=\"69\"><a class=\"anchor\" href=\"#5formatofdateminutes\"><span class=\"octicon octicon-link\"></span></a>5)formatOfDateMinutes()</h3>\n<p data-source-line=\"70\">返回“年-月-日 时:分”。</p>\n<h3 id=\"6formatofdate\" data-source-line=\"72\"><a class=\"anchor\" href=\"#6formatofdate\"><span class=\"octicon octicon-link\"></span></a>6)formatOfDate()</h3>\n<p data-source-line=\"73\">返回“年-月-日”。</p>\n<h3 id=\"7formatofmonth\" data-source-line=\"75\"><a class=\"anchor\" href=\"#7formatofmonth\"><span class=\"octicon octicon-link\"></span></a>7)formatOfMonth()</h3>\n<p data-source-line=\"76\">返回“年-月”。</p>\n<h3 id=\"8formatofyear\" data-source-line=\"78\"><a class=\"anchor\" href=\"#8formatofyear\"><span class=\"octicon octicon-link\"></span></a>8)formatOfYear()</h3>\n<p data-source-line=\"79\">返回“年”。</p>\n<h3 id=\"9formatofmonthdayhoursminutes\" data-source-line=\"81\"><a class=\"anchor\" href=\"#9formatofmonthdayhoursminutes\"><span class=\"octicon octicon-link\"></span></a>9)formatOfMonthDayHoursMinutes()</h3>\n<p data-source-line=\"82\">返回“月-日 时:分”。</p>\n<h3 id=\"10formatofmonthday\" data-source-line=\"84\"><a class=\"anchor\" href=\"#10formatofmonthday\"><span class=\"octicon octicon-link\"></span></a>10)formatOfMonthDay()</h3>\n<p data-source-line=\"85\">返回“月-日”。</p>\n<h3 id=\"11formatofhoursminutes\" data-source-line=\"87\"><a class=\"anchor\" href=\"#11formatofhoursminutes\"><span class=\"octicon octicon-link\"></span></a>11)formatOfHoursMinutes()</h3>\n<p data-source-line=\"88\">返回“时:分”。</p>\n<h2 id=\"4xsrequestoption\" data-source-line=\"91\"><a class=\"anchor\" href=\"#4xsrequestoption\"><span class=\"octicon octicon-link\"></span></a>4.xsRequest(option)</h2>\n<p data-source-line=\"92\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。</p>\n<pre data-source-line=\"93\"><code class=\"hljs\">sdk.xsRequest({\n...\n}).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json)</span></span>{\n    <span class=\"hljs-keyword\">return</span> json.rs;\n}).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(rs)</span></span>{\n    console.<span class=\"hljs-built_in\">log</span>(rs);\n});</code></pre><p data-source-line=\"102\">option参数说明:</p>\n<ul data-source-line=\"103\">\n<li>method:请求方法，默认get，如get,post,put,delete等。</li>\n<li>url:访问的地址。</li>\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。</li>\n<li>loading:boolean类型，默认false，表示是否显示加载动画。</li>\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。</li>\n<li>successInfo：成功时的提示信息，默认undefined。</li>\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。</li>\n<li>headers:对象，请求头信息。</li>\n</ul>',31,'ARTICLE',1,'2018-08-02 08:55:32','153188673971709000006',NULL,1,'探索中',1,0,1002,'## 1.xsSimpleEdit\n用于编辑，列表页面与编辑页面是单独的页面。\n* ***************[主页面]*********\n* title:[主页面]\n* size:[width,height] [主页面]\n* width:[主页面]\n* height:[主页面]\n* min:[width,height] [主页面]\n* max:[width,height] [主页面]\n* url：[主页面]有表示主页面，没有表示被打开的页面\n* saveLoading:保存时是否有等待框，默认是\n* autoShowMsg:是否自动显示消息，默认是\n* useParent:true\n* ***************[编辑界面]*******\n* form:可选[编辑界面]\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\n* path:可选,可有表单action提供[编辑界面]\n* method:可选,可有表单method提供[编辑界面]\n* toSave:function()保存,[编辑界面]\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\n* ****************[主页面][编辑界面]***************\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\n* onConnected:function(initData,option):[主页面][编辑界面]\n* initData:[主页面][编辑界面]\n* handle.close:function()[主页面]\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\n* handle.submit:function()[编辑界面]\n* handle.putValues:function(data)[编辑界面]\n\n## 2.网络访问的简单再封装xxxWithLoading\najax访问，并带有模态加载框，且有气泡提示。\noption参数说明：\n\n```\nokMsg:可选,访问成功的信息\nerrMsg:可选,访问失败的信息\nparams:对象，提交的参数\n```\n\n### 1)deleteWithLoading(url, callback, option)\n请求方为DELETE。\n\n### 2)putWithLoading(url, callback, failCallback, option)\n请求方为PUT。\n\n### 3)getWithLoading(url, callback, failCallback, option)\n请求方为GET。\n\n### 4)postWithLoading(url, callback, failCallback, option)\n请求方为POST。\n\n## 3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)\n\n```\ndateOrMilliseconds:Date对象或时间毫秒数\n```\n### 1)formatOfDatetimeMayDayName()\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\n\n### 2)formatOfDateMinutesMayDayName()\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\n\n### 3)formatOfDateMayDayName()\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\n\n### 4)formatOfDatetime()\n返回“年-月-日 时:分:秒”。\n\n### 5)formatOfDateMinutes()\n返回“年-月-日 时:分”。\n\n### 6)formatOfDate()\n返回“年-月-日”。\n\n### 7)formatOfMonth()\n返回“年-月”。\n\n### 8)formatOfYear()\n返回“年”。\n\n### 9)formatOfMonthDayHoursMinutes()\n返回“月-日 时:分”。\n\n### 10)formatOfMonthDay()\n返回“月-日”。\n\n### 11)formatOfHoursMinutes()\n返回“时:分”。\n\n\n## 4.xsRequest(option)\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\n```\nsdk.xsRequest({\n...\n}).then(function(json){\n    return json.rs;\n}).then(function(rs){\n    console.log(rs);\n});\n```\noption参数说明:\n- method:请求方法，默认get，如get,post,put,delete等。\n- url:访问的地址。\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\n- loading:boolean类型，默认false，表示是否显示加载动画。\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\n- successInfo：成功时的提示信息，默认undefined。\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\n- headers:对象，请求头信息。','153188636499907000002'),('153386608341501000008','基于骨架archetype-spring-boot-web的项目规范','将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强','<h1 id=\"一-spring集成的说明\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-spring集成的说明\"><span class=\"octicon octicon-link\"></span></a>一、Spring集成的说明</h1>\n<h2 id=\"1控制器约定\" data-source-line=\"2\"><a class=\"anchor\" href=\"#1控制器约定\"><span class=\"octicon octicon-link\"></span></a>1.控制器约定</h2>\n<ol data-source-line=\"3\">\n<li>控制器及函数需要加上@PortComment注解</li>\n<li>控制器path=/xxx/</li>\n<li>函数path=xxx（可以为空\"\"）</li>\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。</li>\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类</li>\n<li>支持@LinkApiInvoke（默认请求方法为GET）与@WithApiInvoke</li>\n</ol>\n<p data-source-line=\"10\"><strong>例如</strong>：</p>\n<pre data-source-line=\"12\"><code class=\"hljs\"><span class=\"hljs-variable\">@Controller</span>\n<span class=\"hljs-variable\">@RequestMapping</span>(<span class=\"hljs-string\">\"/Hello/\"</span>)\n<span class=\"hljs-variable\">@PortComment</span>(name = <span class=\"hljs-string\">\"Hello接口\"</span>,desc = <span class=\"hljs-string\">\"这是描述内容\"</span>)\npublic class HelloController\n{\n\n    <span class=\"hljs-variable\">@Autowired</span>\n    HelloService helloService;\n\n    Random random=new Random();\n\n    <span class=\"hljs-variable\">@RequestMapping</span>({<span class=\"hljs-string\">\"index\"</span>, <span class=\"hljs-string\">\"\"</span>})\n    <span class=\"hljs-variable\">@PortComment</span>(name = <span class=\"hljs-string\">\"首页\"</span>)\n    <span class=\"hljs-variable\">@Anonymous</span>\n    public String index(HttpServletRequest request)\n    {\n        return \"index\";\n    }\n\n    <span class=\"hljs-variable\">@RequestMapping</span>(<span class=\"hljs-string\">\"say\"</span>)\n    <span class=\"hljs-variable\">@ResponseBody</span>\n    <span class=\"hljs-variable\">@PortComment</span>(name = <span class=\"hljs-string\">\"有话要说\"</span>)\n    <span class=\"hljs-variable\">@Transactional</span>\n    public JResponse say()\n    {\n        Hello hello = new Hello();\n        hello<span class=\"hljs-selector-class\">.setWord</span>(LogUtil.getTime() + <span class=\"hljs-string\">\":Hello World-欢迎来中国！\"</span>);\n        helloService<span class=\"hljs-selector-class\">.insert</span>(hello);\n\n        <span class=\"hljs-selector-tag\">if</span> (random.nextBoolean())\n        {\n            helloService<span class=\"hljs-selector-class\">.clearAll</span>();\n        }\n\n        return JResponse.success(helloService.listAll());\n    }\n}</code></pre><h2 id=\"2纯数据接口说明\" data-source-line=\"52\"><a class=\"anchor\" href=\"#2纯数据接口说明\"><span class=\"octicon octicon-link\"></span></a>2.纯数据接口说明</h2>\n<ol data-source-line=\"53\">\n<li>请返回JResponse。</li>\n</ol>\n<h2 id=\"3事务约定\" data-source-line=\"55\"><a class=\"anchor\" href=\"#3事务约定\"><span class=\"octicon octicon-link\"></span></a>3.事务约定</h2>\n<ol data-source-line=\"56\">\n<li>事务可加在控制器层(纯数据接口)。</li>\n</ol>\n<h2 id=\"4在service里面引入dao的方式\" data-source-line=\"58\"><a class=\"anchor\" href=\"#4在service里面引入dao的方式\"><span class=\"octicon octicon-link\"></span></a>4.在Service里面引入Dao的方式</h2>\n<p data-source-line=\"59\">请用@AutoSet注解引入，例如：</p>\n<pre data-source-line=\"61\"><code class=\"hljs\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloService</span> ...{</span>\n    <span class=\"hljs-meta\">@AutoSet</span>\n    HelloDao helloDao;\n    ...\n}</code></pre><h2 id=\"5目录结构与继承约定\" data-source-line=\"70\"><a class=\"anchor\" href=\"#5目录结构与继承约定\"><span class=\"octicon octicon-link\"></span></a>5.目录结构与继承约定</h2>\n<h3 id=\"1目录结构\" data-source-line=\"71\"><a class=\"anchor\" href=\"#1目录结构\"><span class=\"octicon octicon-link\"></span></a>(1)目录结构</h3>\n<pre data-source-line=\"73\"><code class=\"hljs\">基础包:cn<span class=\"hljs-selector-class\">.xishan</span>.${projecttype}.${project}\n--------------------\n${基础包}\n         <span class=\"hljs-selector-class\">.common</span>\n            <span class=\"hljs-selector-class\">.db</span>\n                DBUtil<span class=\"hljs-selector-class\">.java</span>\n                TheBaseEntity<span class=\"hljs-selector-class\">.java</span>\n                TheBaseDao<span class=\"hljs-selector-class\">.java</span>\n                TheBaseService<span class=\"hljs-selector-class\">.java</span>\n                TheBaseController<span class=\"hljs-selector-class\">.java</span>\n                ...\n            <span class=\"hljs-selector-class\">.util</span>\n                AppUtil<span class=\"hljs-selector-class\">.java</span>\n                ...\n         <span class=\"hljs-selector-class\">.modules</span>\n            <span class=\"hljs-selector-class\">.hello</span>\n                <span class=\"hljs-selector-class\">.controller</span>\n                    HelloController<span class=\"hljs-selector-class\">.java</span>\n                <span class=\"hljs-selector-class\">.entity</span>\n                    Hello1<span class=\"hljs-selector-class\">.java</span>\n                    Hello2<span class=\"hljs-selector-class\">.java</span>\n                    ...\n                <span class=\"hljs-selector-class\">.service</span>\n                    Hello1Dao<span class=\"hljs-selector-class\">.java</span>\n                    Hello2Dao<span class=\"hljs-selector-class\">.java</span>\n                    Hello1Service<span class=\"hljs-selector-class\">.java</span>\n                    Hello2Service<span class=\"hljs-selector-class\">.java</span>\n                    ...\n         <span class=\"hljs-selector-class\">.modules_xxxx</span>\n         <span class=\"hljs-selector-class\">.startup</span>\n            ...</code></pre><h3 id=\"2继承\" data-source-line=\"107\"><a class=\"anchor\" href=\"#2继承\"><span class=\"octicon octicon-link\"></span></a>(2)继承</h3>\n<ul data-source-line=\"108\">\n<li>Entity：TheBaseEntity</li>\n<li>Dao：TheBaseDao</li>\n<li>Service:TheBaseService</li>\n<li>Controller:TheBaseController</li>\n</ul>',20,'ARTICLE',1,'2018-08-10 09:54:43','153259817042209000013',NULL,1,'默认分类',1,0,1013,'# 一、Spring集成的说明\n## 1.控制器约定\n1. 控制器及函数需要加上@PortComment注解\n2. 控制器path=/xxx/\n3. 函数path=xxx（可以为空\"\"）\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类\n6. 支持@LinkApiInvoke（默认请求方法为GET）与@WithApiInvoke\n\n**例如**：\n\n```\n@Controller\n@RequestMapping(\"/Hello/\")\n@PortComment(name = \"Hello接口\",desc = \"这是描述内容\")\npublic class HelloController\n{\n\n    @Autowired\n    HelloService helloService;\n\n    Random random=new Random();\n\n    @RequestMapping({\"index\", \"\"})\n    @PortComment(name = \"首页\")\n    @Anonymous\n    public String index(HttpServletRequest request)\n    {\n        return \"index\";\n    }\n\n    @RequestMapping(\"say\")\n    @ResponseBody\n    @PortComment(name = \"有话要说\")\n    @Transactional\n    public JResponse say()\n    {\n        Hello hello = new Hello();\n        hello.setWord(LogUtil.getTime() + \":Hello World-欢迎来中国！\");\n        helloService.insert(hello);\n\n        if (random.nextBoolean())\n        {\n            helloService.clearAll();\n        }\n\n        return JResponse.success(helloService.listAll());\n    }\n}\n```\n\n## 2.纯数据接口说明\n1. 请返回JResponse。\n\n## 3.事务约定\n1. 事务可加在控制器层(纯数据接口)。\n\n## 4.在Service里面引入Dao的方式\n请用@AutoSet注解引入，例如：\n\n```\n@Service\npublic class HelloService ...{\n    @AutoSet\n    HelloDao helloDao;\n    ...\n}\n```\n\n## 5.目录结构与继承约定\n### (1)目录结构\n\n```\n基础包:cn.xishan.${projecttype}.${project}\n--------------------\n${基础包}\n         .common\n            .db\n                DBUtil.java\n                TheBaseEntity.java\n                TheBaseDao.java\n                TheBaseService.java\n                TheBaseController.java\n                ...\n            .util\n                AppUtil.java\n                ...\n         .modules\n            .hello\n                .controller\n                    HelloController.java\n                .entity\n                    Hello1.java\n                    Hello2.java\n                    ...\n                .service\n                    Hello1Dao.java\n                    Hello2Dao.java\n                    Hello1Service.java\n                    Hello2Service.java\n                    ...\n         .modules_xxxx\n         .startup\n            ...\n```\n\n### (2)继承\n- Entity：TheBaseEntity\n- Dao：TheBaseDao\n- Service:TheBaseService\n- Controller:TheBaseController','153188636499907000002'),('153429461039101000020','项目部署','配置文件说明','',4,'ARTICLE',1,'2018-08-15 08:56:50','153259817042209000013',NULL,1,'默认分类',1,0,1014,'','153188636499907000002'),('153484383978701000030','通用规范',NULL,'<h2 id=\"1-冗余性\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1-冗余性\"><span class=\"octicon octicon-link\"></span></a>1、冗余性</h2>\n<p data-source-line=\"2\">减少不必要的冗余代码。</p>\n<h2 id=\"2-封装性\" data-source-line=\"4\"><a class=\"anchor\" href=\"#2-封装性\"><span class=\"octicon octicon-link\"></span></a>2、封装性</h2>\n<p data-source-line=\"5\">具有适当的封装性。</p>\n<h2 id=\"3-面向对象\" data-source-line=\"7\"><a class=\"anchor\" href=\"#3-面向对象\"><span class=\"octicon octicon-link\"></span></a>3、面向对象</h2>\n<p data-source-line=\"8\">具备适当的面向对象编程。</p>',6,'ARTICLE',1,'2018-08-21 17:30:40','153259074763509000001',NULL,1,'默认分类',1,0,1015,'## 1、冗余性\n减少不必要的冗余代码。\n\n## 2、封装性\n具有适当的封装性。\n\n## 3、面向对象\n具备适当的面向对象编程。','153188636499907000002');

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `id` varchar(50) NOT NULL,
  `articleId` varchar(50) NOT NULL,
  `content` varchar(200) NOT NULL,
  `userId` varchar(50) DEFAULT NULL,
  `parentId` varchar(50) DEFAULT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `reply` varchar(200) NOT NULL DEFAULT '',
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `userName` varchar(50) NOT NULL COMMENT '匿名',
  `avatarUrl` varchar(500) NOT NULL DEFAULT 'resources/avatar/avatar0.jpg' COMMENT '用户头像 ',
  PRIMARY KEY (`id`),
  KEY `index_articleId_seq_time` (`articleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

/*Table structure for table `debug` */

DROP TABLE IF EXISTS `debug`;

CREATE TABLE `debug` (
  `id` varchar(50) NOT NULL COMMENT 'id',
  `name` varchar(100) NOT NULL COMMENT '文件夹名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `interfaceId` varchar(50) DEFAULT '',
  `moduleId` varchar(50) NOT NULL,
  `method` varchar(10) NOT NULL,
  `url` varchar(500) NOT NULL,
  `params` varchar(1000) NOT NULL,
  `headers` varchar(1000) NOT NULL,
  `paramType` varchar(100) NOT NULL,
  `version` int(11) NOT NULL DEFAULT '0',
  `uid` varchar(50) NOT NULL DEFAULT '-1',
  PRIMARY KEY (`id`),
  KEY `index_status_seq_createTime` (`status`,`sequence`,`createTime`),
  KEY `index_userId_seq_createTime` (`interfaceId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `debug` */

/*Table structure for table `error` */

DROP TABLE IF EXISTS `error`;

CREATE TABLE `error` (
  `id` varchar(50) NOT NULL COMMENT '主键',
  `errorCode` varchar(50) NOT NULL COMMENT '错误码编码',
  `errorMsg` varchar(128) NOT NULL COMMENT '错误码描述',
  `projectId` varchar(50) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`),
  KEY `index_mod_seq_time` (`projectId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `error` */

insert  into `error`(`id`,`errorCode`,`errorMsg`,`projectId`,`createTime`,`status`,`sequence`) values ('153188649800403000003','0','成功','153188636499907000002','2018-07-18 12:01:38',1,2),('153188653620203000004','4004','用户友好错误信息，可以直接显示desc信息给用户','153188636499907000002','2018-07-18 12:02:16',1,3);

/*Table structure for table `hot_search` */

DROP TABLE IF EXISTS `hot_search`;

CREATE TABLE `hot_search` (
  `id` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `times` int(11) NOT NULL DEFAULT '0' COMMENT '搜索次数',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `keyword` varchar(200) COLLATE utf8_unicode_ci NOT NULL COMMENT '搜索关键字',
  PRIMARY KEY (`id`),
  UNIQUE KEY `keyword_UNIQUE` (`keyword`),
  KEY `index_times` (`times`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

/*Data for the table `hot_search` */

/*Table structure for table `interface` */

DROP TABLE IF EXISTS `interface`;

CREATE TABLE `interface` (
  `id` varchar(50) NOT NULL COMMENT '主键',
  `url` varchar(200) NOT NULL COMMENT 'api链接',
  `method` varchar(50) NOT NULL COMMENT ' 请求方式',
  `param` text COMMENT '参数列表',
  `paramRemark` text COMMENT '请求参数备注',
  `requestExam` text COMMENT '请求示例',
  `responseParam` text COMMENT '返回参数说明',
  `errorList` text COMMENT '接口错误码列表',
  `trueExam` text COMMENT '正确返回示例',
  `falseExam` text COMMENT '错误返回示例',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否可用;0不可用；1可用;-1 删除',
  `moduleId` varchar(50) NOT NULL COMMENT '所属模块ID',
  `interfaceName` varchar(100) NOT NULL COMMENT '接口名',
  `remark` text,
  `errors` text COMMENT '错误码、错误码信息',
  `updateBy` varchar(100) DEFAULT NULL,
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `version` varchar(20) NOT NULL DEFAULT '1.0' COMMENT '版本号',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `header` text,
  `fullUrl` varchar(255) NOT NULL DEFAULT '',
  `monitorType` int(11) NOT NULL DEFAULT '0' COMMENT '监控类型，多选：\nNetwork("网络异常",1),Include("包含指定字符串",2),NotInclude("不包含指定字符串",3),NotEqual("不等于指定字符串",4);	\n',
  `monitorText` varchar(500) NOT NULL DEFAULT '' COMMENT '监控比较内容',
  `monitorEmails` varchar(200) DEFAULT NULL,
  `isTemplate` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否是模板',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  `contentType` varchar(45) NOT NULL DEFAULT 'application/json' COMMENT '接口返回contentType',
  PRIMARY KEY (`id`),
  KEY `Index_fullUrl` (`fullUrl`),
  KEY `index_mod_seq_time` (`moduleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

/*Data for the table `interface` */

/*Table structure for table `log` */

DROP TABLE IF EXISTS `log`;

CREATE TABLE `log` (
  `id` varchar(50) NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `modelClass` varchar(50) NOT NULL,
  `modelName` varchar(50) NOT NULL,
  `type` varchar(20) NOT NULL,
  `updateBy` varchar(50) NOT NULL DEFAULT '' COMMENT '操作人',
  `remark` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `identy` varchar(50) NOT NULL COMMENT '数据唯一主键',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `log` */

insert  into `log`(`id`,`status`,`createTime`,`sequence`,`modelClass`,`modelName`,`type`,`updateBy`,`remark`,`content`,`identy`) values ('152611982039908000005',1,'2018-05-12 18:10:20',0,'InterfaceWithBLOBs','接口','UPDATE','超级管理员','测试接口1','{\"contentType\":\"application/json\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"errorList\":\"\",\"errors\":\"[]\",\"falseExam\":\"{}\",\"fullUrl\":\"http://test.com/test.json\",\"header\":\"[{\\\"name\\\":\\\"header\\\",\\\"def\\\":\\\"1\\\",\\\"remark\\\":\\\"备注\\\",\\\"necessary\\\":\\\"true\\\",\\\"type\\\":\\\"string\\\"}]\",\"id\":\"152611979419112000003\",\"interfaceName\":\"测试接口1\",\"isTemplate\":false,\"method\":\"GET,\",\"moduleId\":\"152611971673309000002\",\"monitorEmails\":\"\",\"monitorText\":\"\",\"monitorType\":0,\"param\":\"form=[{\\\"name\\\":\\\"test\\\",\\\"def\\\":\\\"test\\\",\\\"remark\\\":\\\"test\\\",\\\"necessary\\\":\\\"true\\\",\\\"inUrl\\\":\\\"false\\\",\\\"type\\\":\\\"string\\\"}]\",\"paramRemark\":\"[]\",\"projectId\":\"152611968062607000001\",\"remark\":\"<h3>我是测试项目<\\/h3>\",\"requestExam\":\"请求地址:http://test.com/test.json\\r\\n请求头:\\r\\n\\theader=1\\r\\n请求参数:\\r\\n\\ttest=test\",\"responseParam\":\"[{\\\"deep\\\":\\\"0\\\",\\\"name\\\":\\\"test\\\",\\\"remark\\\":\\\"tet\\\",\\\"type\\\":\\\"string\\\",\\\"necessary\\\":\\\"true\\\"}]\",\"sequence\":1,\"status\":0,\"trueExam\":\"{\\n}\",\"updateBy\":\"userName：admin | trueName：超级管理员\",\"updateTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"url\":\"/test.json\",\"version\":\"1.0.1\"}','152611979419112000003'),('152611988182408000006',1,'2018-05-12 18:11:22',1,'Module','模块','UPDATE','超级管理员','我是测试模块1','{\"canDelete\":1,\"category\":\"分类1,分类2\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":37,\"time\":1526119717000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611971673309000002\",\"name\":\"我是测试模块1\",\"projectId\":\"152611968062607000001\",\"remark\":\"我是测试模块1\",\"sequence\":1,\"status\":1,\"templateId\":\"\",\"url\":\"http://test.com\",\"userId\":\"admin\",\"version\":0}','152611971673309000002'),('153188666359108000005',1,'2018-07-18 12:04:24',2,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188675794808000007',1,'2018-07-18 12:05:58',3,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188679778808000008',1,'2018-07-18 12:06:38',4,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188684267508000009',1,'2018-07-18 12:07:23',5,'Project','项目','UPDATE','超级管理员','测试项目','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":1,\"time\":1526119681000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611968062607000001\",\"luceneSearch\":1,\"name\":\"测试项目\",\"password\":\"\",\"remark\":\"我是测试项目\",\"sequence\":0,\"status\":2,\"type\":2,\"userId\":\"admin\"}','152611968062607000001'),('153189030665708000011',1,'2018-07-18 13:05:07',6,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153189043709608000013',1,'2018-07-18 13:07:17',7,'Module','模块','UPDATE','超级管理员','入门','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":6,\"month\":6,\"seconds\":50,\"time\":1531890410000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189041004409000012\",\"name\":\"入门\",\"projectId\":\"153189028248007000010\",\"remark\":\"\",\"sequence\":3,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153189041004409000012'),('153189123842208000015',1,'2018-07-18 13:20:38',8,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153189476462908000016',1,'2018-07-18 14:19:25',9,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":3,\"commentCount\":0,\"content\":\"<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n\\t<span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n\\t\\t<span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n\\t<span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n\\t\\t\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n\\t\\t\\t<span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n\\t\\t}\\n\\t}\\n});<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"```\\nxsloader({\\n    properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153189535925008000017',1,'2018-07-18 14:29:19',10,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用例子<\\/h2>\\n<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n        <span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n    <span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n        \\n    },\\n    <span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n            <span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">\\tbaseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\turlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tpaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdepsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdeps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tmodulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdefineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdefaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\twaitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\tautoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">\\tinstance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\tproperties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">\\t\\tname1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">\\t\\t\\tsubName1:<\\/span>anyType\\n\\t\\t},\\n<span class=\\\"hljs-symbol\\\">\\t\\tname3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname5:<\\/span>function(){}\\n\\t}\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190185922508000018',1,'2018-07-18 16:17:39',11,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190191434708000019',1,'2018-07-18 16:18:34',12,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190223064308000020',1,'2018-07-18 16:23:51',13,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190293721608000021',1,'2018-07-18 16:35:37',14,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\r\\n\\r\\n```\\r\\nproperties: {\\r\\n        B: \\\"moduleB\\\"\\r\\n    },\\r\\n    autoUrlArgs: false,\\r\\n    urlArgs: {\\r\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\r\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\r\\n        \\\"moduleC\\\": \\\"v=123\\\"\\r\\n    },\\r\\n    paths: {\\r\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\r\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\r\\n    },\\r\\n    depsPaths: {\\r\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\r\\n    },\\r\\n    deps: {\\r\\n        \\r\\n    },\\r\\n    modulePrefix: {\\r\\n        \\\"util/\\\": {\\r\\n            replace: \\\"lib/util/\\\"\\r\\n        }\\r\\n    }\\r\\n});\\r\\n```\\r\\n## 二、config格式\\r\\n```\\r\\n{\\r\\n    baseUrl:\\\"\\\",\\r\\n    urlArgs:{},\\r\\n    paths:{},\\r\\n    depsPaths:{},\\r\\n    deps:{},\\r\\n    modulePrefix:{},\\r\\n    defineFunction:{},\\r\\n    defaultVersion:{},\\r\\n    waitSeconds:10,\\r\\n    autoUrlArgs:false,\\r\\n    instance:\\\"single\\\",\\r\\n    properties:{\\r\\n        name1:anyType,\\r\\n        name2:{\\r\\n            subName1:anyType\\r\\n        },\\r\\n        name3:\\\"123\\\",\\r\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\r\\n        name5:function(){}\\r\\n    }\\r\\n}\\r\\n```\\r\\n## 三、属性说明\\r\\n\\r\\n### 1.baseUrl\\r\\n【String】基础参考路径，默认为当前页所在目录。\\r\\n\\r\\n### 2.路径:==相对与绝对路径==；\\r\\n1. **./** 表示当前目录；\\r\\n2. **../** 表示上一级目录；\\r\\n3. **xx/** 表示相对于baseUrl；\\r\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\r\\n\\r\\n### 3.urlArgs\\r\\n【对象】\\r\\n```\\r\\n{\\r\\n    \\\"key\\\":value,\\r\\n    \\\"key2\\\":value2\\r\\n}\\r\\n```\\r\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\r\\n2. key为绝对地址；\\r\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\r\\n4. key为含有modulePrefix前缀的地址；\\r\\n5. key为模块名；\\r\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\r\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190352282708000022',1,'2018-07-18 16:45:23',15,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"84\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190362131908000023',1,'2018-07-18 16:47:01',16,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"69\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"79\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"82\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"89\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"90\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"98\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"99\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"103\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190366358608000024',1,'2018-07-18 16:47:44',17,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n        <span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n    <span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n        \\n    },\\n    <span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n            <span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"32\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"59\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"62\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"68\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"80\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"84\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"91\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"100\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"104\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader({\\n    properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190411783808000025',1,'2018-07-18 16:55:18',18,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"36\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"37\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"43\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"45\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"55\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"58\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"59\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"66\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"79\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190457006908000026',1,'2018-07-18 17:02:50',19,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"36\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"37\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"43\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"45\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"55\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"58\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"59\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"66\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"79\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"82\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"85\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"88\\\">【对象】用于配置依赖。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n### 8.deps\\n【对象】用于配置依赖。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190547914008000027',1,'2018-07-18 17:17:59',20,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"39\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"47\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"59\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"65\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"72\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"80\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"81\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"87\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"92\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"97\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"102\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"104\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"110\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"111\\\">\\n<li>ke为\\\"*\\\"表对depsPaths中的所有模块加上此依赖:\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表为指定的模块或路径的js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"113\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"114\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. ke为\\\"\\\\*\\\"表对depsPaths中的所有模块加上此依赖:\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表为指定的模块或路径的js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n---\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190577890408000028',1,'2018-07-18 17:22:59',21,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190589246008000029',1,'2018-07-18 17:24:52',22,'Project','项目','UPDATE','超级管理员','xsloader.js加载器','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":4,\"month\":6,\"seconds\":42,\"time\":1531890282000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189028248007000010\",\"luceneSearch\":1,\"name\":\"xsloader.js加载器\",\"password\":\"\",\"remark\":\"开源地址:https://github.com/gzxishan/xsloader\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153189028248007000010'),('153190595123108000030',1,'2018-07-18 17:25:51',23,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190638384408000031',1,'2018-07-18 17:33:04',24,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190650026908000034',1,'2018-07-18 17:35:00',25,'ArticleWithBLOBs','文章','UPDATE','超级管理员','require','{\"brief\":\"使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"require\",\"projectId\":\"153189028248007000010\",\"sequence\":4,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190652854508000035',1,'2018-07-18 17:35:29',26,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190654572708000036',1,'2018-07-18 17:35:46',27,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190664470908000037',1,'2018-07-18 17:37:25',28,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190740554608000038',1,'2018-07-18 17:50:06',29,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190751401508000039',1,'2018-07-18 17:51:54',30,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190772663208000040',1,'2018-07-18 17:55:27',31,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">content可以是任何类型，当content为function时表示回调函数。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\ncontent可以是任何类型，当content为function时表示回调函数。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190831086208000041',1,'2018-07-18 18:05:11',32,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5重要说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190856398108000042',1,'2018-07-18 18:09:24',33,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6重要说明\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"63\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190859980608000043',1,'2018-07-18 18:10:00',34,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"require\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190864877608000044',1,'2018-07-18 18:10:49',35,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190947305708000045',1,'2018-07-18 18:24:33',36,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190949260608000046',1,'2018-07-18 18:24:53',37,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190950798608000047',1,'2018-07-18 18:25:08',38,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190951711608000048',1,'2018-07-18 18:25:17',39,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190988606108000052',1,'2018-07-18 18:31:26',40,'InterfaceWithBLOBs','接口','DELTET','超级管理员','测试接口1','{\"contentType\":\"application/json\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"errorList\":\"000001,\",\"errors\":\"[{\\\"createTime\\\":{\\\"date\\\":12,\\\"day\\\":6,\\\"hours\\\":18,\\\"minutes\\\":10,\\\"month\\\":4,\\\"seconds\\\":9,\\\"time\\\":1526119809000,\\\"timezoneOffset\\\":-480,\\\"year\\\":118},\\\"errorCode\\\":\\\"000001\\\",\\\"errorMsg\\\":\\\"错误码1\\\",\\\"id\\\":\\\"152611980854003000004\\\",\\\"projectId\\\":\\\"152611968062607000001\\\",\\\"sequence\\\":0,\\\"status\\\":1}]\",\"falseExam\":\"{}\",\"fullUrl\":\"http://test.com/test.json\",\"header\":\"[{\\\"name\\\":\\\"header\\\",\\\"def\\\":\\\"1\\\",\\\"remark\\\":\\\"备注\\\",\\\"necessary\\\":\\\"true\\\",\\\"type\\\":\\\"string\\\"}]\",\"id\":\"152611979419112000003\",\"interfaceName\":\"测试接口1\",\"isTemplate\":false,\"method\":\"GET,\",\"moduleId\":\"152611971673309000002\",\"monitorEmails\":\"\",\"monitorText\":\"\",\"monitorType\":0,\"param\":\"form=[{\\\"name\\\":\\\"test\\\",\\\"def\\\":\\\"test\\\",\\\"remark\\\":\\\"test\\\",\\\"necessary\\\":\\\"true\\\",\\\"inUrl\\\":\\\"false\\\",\\\"type\\\":\\\"string\\\"}]\",\"paramRemark\":\"[]\",\"projectId\":\"152611968062607000001\",\"remark\":\"<h3>我是测试项目<\\/h3>\",\"requestExam\":\"请求地址:http://test.com/test.json\\r\\n请求头:\\r\\n\\theader=1\\r\\n请求参数:\\r\\n\\ttest=test\",\"responseParam\":\"[{\\\"deep\\\":\\\"0\\\",\\\"name\\\":\\\"test\\\",\\\"remark\\\":\\\"tet\\\",\\\"type\\\":\\\"string\\\",\\\"necessary\\\":\\\"true\\\"}]\",\"sequence\":1,\"status\":0,\"trueExam\":\"{\\n}\",\"updateBy\":\"userName：admin | trueName：超级管理员\",\"updateTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"url\":\"/test.json\",\"version\":\"1.0.1\"}','152611979419112000003'),('153190990596308000053',1,'2018-07-18 18:31:46',41,'ArticleWithBLOBs','文章','DELTET','超级管理员','V8.0.0使用视频-用户版','{\"brief\":\"V8.0.0使用视频-用户版，觉得有用的可以去https://gitee.com/CrapApi/CrapApi 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下\",\"canComment\":1,\"canDelete\":1,\"category\":\"帮助文档\",\"click\":3,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"3\\\">V8.0.0使用视频-用户版，觉得有用的可以去 <a href=\\\"https://gitee.com/CrapApi/CrapApi\\\">https://gitee.com/CrapApi/CrapApi<\\/a> 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下<\\/p>\\n<iframe height=\\\"498\\\" width=\\\"100%\\\" src=\\\"http://player.youku.com/embed/XMzU4NjQwODIzNg==\\\" frameborder=\\\"0\\\" \'allowfullscreen\'=\\\"\\\"><\\/iframe>\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":13,\"month\":4,\"seconds\":3,\"time\":1526119983000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611998276001000007\",\"markdown\":\"V8.0.0使用视频-用户版，觉得有用的可以去 https://gitee.com/CrapApi/CrapApi 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下\\n\\n&lt;iframe height=498 width=100% src=\'http://player.youku.com/embed/XMzU4NjQwODIzNg==\' frameborder=0 \'allowfullscreen\'&gt;&lt;/iframe&gt;\",\"mkey\":\"\",\"moduleId\":\"152611971673309000002\",\"name\":\"V8.0.0使用视频-用户版\",\"projectId\":\"152611968062607000001\",\"sequence\":1,\"status\":2,\"type\":\"ARTICLE\"}','152611998276001000007'),('153190990975208000054',1,'2018-07-18 18:31:50',42,'Module','模块','DELTET','超级管理员','我是测试模块1','{\"canDelete\":1,\"category\":\"分类1,分类2,帮助文档\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":37,\"time\":1526119717000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611971673309000002\",\"name\":\"我是测试模块1\",\"projectId\":\"152611968062607000001\",\"remark\":\"我是测试模块1\",\"sequence\":1,\"status\":1,\"templateId\":\"\",\"url\":\"http://test.com\",\"userId\":\"admin\",\"version\":0}','152611971673309000002'),('153190993039608000055',1,'2018-07-18 18:32:10',43,'Project','项目','DELTET','超级管理员','测试项目','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":1,\"time\":1526119681000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611968062607000001\",\"luceneSearch\":1,\"name\":\"测试项目\",\"password\":\"\",\"remark\":\"我是测试项目\",\"sequence\":0,\"status\":1,\"type\":2,\"userId\":\"admin\"}','152611968062607000001'),('153196212615808000001',1,'2018-07-19 09:02:06',44,'Module','模块','UPDATE','超级管理员','基础','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":6,\"month\":6,\"seconds\":50,\"time\":1531890410000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189041004409000012\",\"name\":\"基础\",\"projectId\":\"153189028248007000010\",\"remark\":\"\",\"sequence\":3,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153189041004409000012'),('153196258978308000002',1,'2018-07-19 09:09:50',45,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":14,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196260794808000003',1,'2018-07-19 09:10:08',46,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":1000,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153196261671308000004',1,'2018-07-19 09:10:17',47,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":500,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153196262378408000005',1,'2018-07-19 09:10:24',48,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153196263160008000006',1,'2018-07-19 09:10:32',49,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196263919108000007',1,'2018-07-19 09:10:39',50,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153196278023108000008',1,'2018-07-19 09:13:00',51,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":16,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196285699608000009',1,'2018-07-19 09:14:17',52,'Project','项目','UPDATE','超级管理员','xsloader.js加载器','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":4,\"month\":6,\"seconds\":42,\"time\":1531890282000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189028248007000010\",\"luceneSearch\":1,\"name\":\"xsloader.js加载器\",\"password\":\"\",\"remark\":\"文档请看“文章”，开源地址:https://github.com/gzxishan/xsloader\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153189028248007000010'),('153196302598008000010',1,'2018-07-19 09:17:06',53,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":19,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196351163708000011',1,'2018-07-19 09:25:12',54,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":20,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\"><strong>例如<\\/strong>：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n**例如**：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196437370008000012',1,'2018-07-19 09:39:34',55,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件定义、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":500,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153196742937908000013',1,'2018-07-19 10:30:29',56,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196774397408000014',1,'2018-07-19 10:35:44',57,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">var<\\/span> http=<span class=\\\"hljs-keyword\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\nhttp(<span class=\\\"hljs-attr\\\">...<\\/span>)<span class=\\\"hljs-attr\\\">...<\\/span>done();<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"9\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n\\n<span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"33\\\"><strong>注意<\\/strong>：参数与函数是一一对应的。<\\/p>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n\\nhttp()\\n.url(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>).method(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>).params({})\\n.ok(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\n})\\n.fail(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\n})\\n.done();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"50\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"53\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"56\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"59\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"62\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"64\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"65\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"68\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"71\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"74\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"76\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"83\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"85\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"92\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"95\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"98\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"100\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"101\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"103\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"108\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"112\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"119\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"122\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"123\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"125\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"130\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"131\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok调用，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\nhttp(...)...done();\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：参数与函数是一一对应的。\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok调用，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196785821308000015',1,'2018-07-19 10:37:38',58,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：参数与函数是一一对应的。<\\/p>\\n<pre data-source-line=\\\"40\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"56\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"59\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"62\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"64\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"65\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"68\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"71\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"74\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"76\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"77\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"79\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"86\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"88\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"95\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"98\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"100\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"101\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"104\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"106\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"111\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"114\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"115\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"117\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"122\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"125\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"126\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"128\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"133\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"134\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：参数与函数是一一对应的。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196892972408000016',1,'2018-07-19 10:55:30',59,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196904052608000017',1,'2018-07-19 10:57:21',60,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196918423608000018',1,'2018-07-19 10:59:44',61,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":8,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback,xhr)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback,xhr) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196960790308000019',1,'2018-07-19 11:06:48',62,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196976534008000020',1,'2018-07-19 11:09:25',63,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":12,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文上传结束的回调,不论成与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文上传成功的回调。\\n\\n\\n### uploadError\\n【function】文上传失败的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调,不论成与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196979981008000021',1,'2018-07-19 11:10:00',64,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":13,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文件上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文件上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文件上传结束的回调,不论成功与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文件上传成功的回调。\\n\\n\\n### uploadError\\n【function】文件上传失败的回调。\\n\\n### uploadEnd\\n【function】文件上传结束的回调,不论成功与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153197276134208000022',1,'2018-07-19 11:59:21',65,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197354752208000023',1,'2018-07-19 12:12:28',66,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。<br>\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## xsloader.script()\\n得到xsloader的script对象。\\n\\n## xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## xsloader.asyncCall(fun)\\n异步执行。\\n\\n## xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。<br>\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197381459108000024',1,'2018-07-19 12:16:55',67,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"appendargs2urlurl-urlargs\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#appendargs2urlurl-urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>appendArgs2Url(url, urlArgs)<\\/h2>\\n<p data-source-line=\\\"102\\\">为url添加参数。<\\/p>\\n<ol data-source-line=\\\"103\\\">\\n<li>urlArgs为字符串：如\\\"a=1&amp;b=2\\\"。<\\/li>\\n<li>urlArgs对象。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"querystring2paramsmapargsstr-decode\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#querystring2paramsmapargsstr-decode\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>queryString2ParamsMap(argsStr, decode)<\\/h2>\\n<p data-source-line=\\\"107\\\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">queryString2ParamsMap<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-string\\\">\\\"a=1&amp;b=2\\\"<\\/span>)<\\/span><\\/span>\\n返回：\\n{\\n    <span class=\\\"hljs-selector-tag\\\">a<\\/span>:<span class=\\\"hljs-string\\\">\\\"1\\\"<\\/span>,\\n    <span class=\\\"hljs-selector-tag\\\">b<\\/span>:<span class=\\\"hljs-string\\\">\\\"2\\\"<\\/span>\\n}<\\/code><\\/pre><h2 id=\\\"arrayprototypeindexofelemfromindex\\\" data-source-line=\\\"118\\\"><a class=\\\"anchor\\\" href=\\\"#arrayprototypeindexofelemfromindex\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>Array.prototype.indexOf(elem,[fromIndex])<\\/h2>\\n<p data-source-line=\\\"119\\\">查找元素在数组中出现的位置。<\\/p>\\n<h2 id=\\\"arraypushalltargetarrarr\\\" data-source-line=\\\"121\\\"><a class=\\\"anchor\\\" href=\\\"#arraypushalltargetarrarr\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>Array.pushAll(targetArr,arr)<\\/h2>\\n<p data-source-line=\\\"122\\\">将arr中的所有元素push到targetArr中。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## xsloader.script()\\n得到xsloader的script对象。\\n\\n## xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## xsloader.asyncCall(fun)\\n异步执行。\\n\\n## xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\\n\\n## appendArgs2Url(url, urlArgs)\\n为url添加参数。\\n1. urlArgs为字符串：如\\\"a=1&b=2\\\"。\\n2. urlArgs对象。\\n\\n## queryString2ParamsMap(argsStr, decode)\\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\\n\\n```\\nqueryString2ParamsMap(\\\"a=1&b=2\\\")\\n返回：\\n{\\n    a:\\\"1\\\",\\n    b:\\\"2\\\"\\n}\\n```\\n\\n## Array.prototype.indexOf(elem,[fromIndex])\\n查找元素在数组中出现的位置。\\n\\n## Array.pushAll(targetArr,arr)\\n将arr中的所有元素push到targetArr中。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197390973508000025',1,'2018-07-19 12:18:30',68,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#2xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"3xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#3xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"4xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#4xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"5xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#5xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"6xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#6xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"7xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#7xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"8randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#8randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"9xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#9xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"10xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#10xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"11xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#11xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"12xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#12xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"13startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#13startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"14endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#14endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"15xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#15xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"16xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#16xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"17indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#17indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"18indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#18indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"19getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#19getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"20appendargs2urlurl-urlargs\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#20appendargs2urlurl-urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.appendArgs2Url(url, urlArgs)<\\/h2>\\n<p data-source-line=\\\"102\\\">为url添加参数。<\\/p>\\n<ol data-source-line=\\\"103\\\">\\n<li>urlArgs为字符串：如\\\"a=1&amp;b=2\\\"。<\\/li>\\n<li>urlArgs对象。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"21querystring2paramsmapargsstr-decode\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#21querystring2paramsmapargsstr-decode\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.queryString2ParamsMap(argsStr, decode)<\\/h2>\\n<p data-source-line=\\\"107\\\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">queryString2ParamsMap<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-string\\\">\\\"a=1&amp;b=2\\\"<\\/span>)<\\/span><\\/span>\\n返回：\\n{\\n    <span class=\\\"hljs-selector-tag\\\">a<\\/span>:<span class=\\\"hljs-string\\\">\\\"1\\\"<\\/span>,\\n    <span class=\\\"hljs-selector-tag\\\">b<\\/span>:<span class=\\\"hljs-string\\\">\\\"2\\\"<\\/span>\\n}<\\/code><\\/pre><h2 id=\\\"22arrayprototypeindexofelemfromindex\\\" data-source-line=\\\"118\\\"><a class=\\\"anchor\\\" href=\\\"#22arrayprototypeindexofelemfromindex\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.Array.prototype.indexOf(elem,[fromIndex])<\\/h2>\\n<p data-source-line=\\\"119\\\">查找元素在数组中出现的位置。<\\/p>\\n<h2 id=\\\"23arraypushalltargetarrarr\\\" data-source-line=\\\"121\\\"><a class=\\\"anchor\\\" href=\\\"#23arraypushalltargetarrarr\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.Array.pushAll(targetArr,arr)<\\/h2>\\n<p data-source-line=\\\"122\\\">将arr中的所有元素push到targetArr中。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## 1.xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## 2.xsloader.script()\\n得到xsloader的script对象。\\n\\n## 3.xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## 4.xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## 5.xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## 6.xsloader.asyncCall(fun)\\n异步执行。\\n\\n## 7.xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## 8.randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## 9.xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## 10.xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## 11.xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## 12.xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## 13.startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## 14.endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## 15.xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## 16.xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## 17.indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## 18.indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## 19.getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\\n\\n## 20.appendArgs2Url(url, urlArgs)\\n为url添加参数。\\n1. urlArgs为字符串：如\\\"a=1&b=2\\\"。\\n2. urlArgs对象。\\n\\n## 21.queryString2ParamsMap(argsStr, decode)\\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\\n\\n```\\nqueryString2ParamsMap(\\\"a=1&b=2\\\")\\n返回：\\n{\\n    a:\\\"1\\\",\\n    b:\\\"2\\\"\\n}\\n```\\n\\n## 22.Array.prototype.indexOf(elem,[fromIndex])\\n查找元素在数组中出现的位置。\\n\\n## 23.Array.pushAll(targetArr,arr)\\n将arr中的所有元素push到targetArr中。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197915401408000026',1,'2018-07-19 13:45:54',69,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153197961573908000027',1,'2018-07-19 13:53:36',70,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"option说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#option说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>option说明<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    cmd:<\\/span>命令类型名\\n<span class=\\\"hljs-symbol\\\">    originSend:<\\/span>发送源\\n<span class=\\\"hljs-symbol\\\">    originReceive:<\\/span>接收源\\n<span class=\\\"hljs-symbol\\\">    listener:<\\/span>消息监听\\n<span class=\\\"hljs-symbol\\\">    connected:<\\/span>成功连接\\n<span class=\\\"hljs-symbol\\\">    conndata:<\\/span>连接数据\\n}<\\/code><\\/pre><p data-source-line=\\\"13\\\"><strong>参数说明<\\/strong>:<\\/p>\\n<ol data-source-line=\\\"14\\\">\\n<li>cmd:只有相同命令类型的，才可以进行连接<\\/li>\\n<li>originSend:【String】或【function(source)】(返回origin)<\\/li>\\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)<\\/li>\\n<li>listener:【function(data,sender,extra)】<\\/li>\\n<li>connected:【function(sender,conndata,extra)】<\\/li>\\n<li>conndata:【对象】连接时传递的对象<\\/li>\\n<li>extra.originStr：【字符串】对方页面的地址<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"## option说明\\n\\n```\\n{\\n    cmd:命令类型名\\n    originSend:发送源\\n    originReceive:接收源\\n    listener:消息监听\\n    connected:成功连接\\n    conndata:连接数据\\n}\\n```\\n**参数说明**:\\n1. cmd:只有相同命令类型的，才可以进行连接\\n2. originSend:【String】或【function(source)】(返回origin)\\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\\n4. listener:【function(data,sender,extra)】\\n5. connected:【function(sender,conndata,extra)】\\n6. conndata:【对象】连接时传递的对象\\n7. extra.originStr：【字符串】对方页面的地址\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153198184686908000001',1,'2018-07-19 14:30:47',71,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> xsmsg=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xsmsg\\\"<\\/span>);<\\/code><\\/pre><h2 id=\\\"1option说明\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#1option说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.option说明<\\/h2>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    cmd:<\\/span>命令类型名\\n<span class=\\\"hljs-symbol\\\">    originSend:<\\/span>发送源\\n<span class=\\\"hljs-symbol\\\">    originReceive:<\\/span>接收源\\n<span class=\\\"hljs-symbol\\\">    listener:<\\/span>消息监听\\n<span class=\\\"hljs-symbol\\\">    connected:<\\/span>成功连接\\n<span class=\\\"hljs-symbol\\\">    conndata:<\\/span>连接数据\\n}<\\/code><\\/pre><p data-source-line=\\\"19\\\"><strong>参数说明<\\/strong>:<\\/p>\\n<ol data-source-line=\\\"20\\\">\\n<li>cmd:只有相同命令类型的，才可以进行连接<\\/li>\\n<li>originSend:【String】或【function(source)】(返回origin)<\\/li>\\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)<\\/li>\\n<li>listener:【function(data,sender,extra)】<\\/li>\\n<li>connected:【function(sender,conndata,extra)】<\\/li>\\n<li>conndata:【对象】连接时传递的对象<\\/li>\\n<li>extra.originStr：【字符串】对方页面的地址<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2connectiframeiframe-option\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#2connectiframeiframe-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.connectIFrame(iframe, option)<\\/h2>\\n<h2 id=\\\"3connectparent-functionoption\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3connectparent-functionoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.connectParent = function(option)<\\/h2>\\n<h2 id=\\\"a\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#a\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a><\\/h2>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"```\\nvar xsmsg=require(\\\"xsmsg\\\");\\n```\\n\\n\\n## 1.option说明\\n\\n```\\n{\\n    cmd:命令类型名\\n    originSend:发送源\\n    originReceive:接收源\\n    listener:消息监听\\n    connected:成功连接\\n    conndata:连接数据\\n}\\n```\\n**参数说明**:\\n1. cmd:只有相同命令类型的，才可以进行连接\\n2. originSend:【String】或【function(source)】(返回origin)\\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\\n4. listener:【function(data,sender,extra)】\\n5. connected:【function(sender,conndata,extra)】\\n6. conndata:【对象】连接时传递的对象\\n7. extra.originStr：【字符串】对方页面的地址\\n\\n## 2.connectIFrame(iframe, option)\\n\\n## 3.connectParent = function(option)\\n\\n##\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153198266818308000002',1,'2018-07-19 14:44:28',72,'Module','模块','UPDATE','超级管理员','JS Sdk','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":12,\"minutes\":5,\"month\":6,\"seconds\":40,\"time\":1531886740000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188673971709000006\",\"name\":\"JS Sdk\",\"projectId\":\"153188636499907000002\",\"remark\":\"\",\"sequence\":2,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153188673971709000006'),('153199505975108000003',1,'2018-07-19 18:11:00',73,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":16,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】文件上传开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文件上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文件上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文件上传结束的回调,不论成功与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】文件上传开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文件上传成功的回调。\\n\\n\\n### uploadError\\n【function】文件上传失败的回调。\\n\\n### uploadEnd\\n【function】文件上传结束的回调,不论成功与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153205080237108000002',1,'2018-07-20 09:40:02',74,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于html5的存储封装','{\"brief\":\"lsave,lget,ldel,ssave,sget,sdel\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":19,\"month\":6,\"seconds\":42,\"time\":1532049582000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153204958241201000001\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"基于html5的存储封装\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153204958241201000001'),('153205391187808000004',1,'2018-07-20 10:31:52',75,'ArticleWithBLOBs','文章','UPDATE','超级管理员','form表单','{\"brief\":\"form表单转对象，对象回显到表单\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":55,\"month\":6,\"seconds\":3,\"time\":1532051703000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153205170284601000003\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"form表单\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153205170284601000003'),('153206385677508000005',1,'2018-07-20 13:17:37',76,'ArticleWithBLOBs','文章','UPDATE','超级管理员','form表单','{\"brief\":\"form表单转对象，对象回显到表单\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1formjson\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1formjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.formJson<\\/h2>\\n<p data-source-line=\\\"2\\\">可以把表单转成json对象或数组。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, option)<\\/span><\\/span>\\n\\nformSelector：<span class=\\\"hljs-keyword\\\">form<\\/span>选择器或dom<\\/code><\\/pre><p data-source-line=\\\"9\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"10\\\">\\n<li>includeAllParams:是否包含所有的参数、包括为空的,默认为false。<\\/li>\\n<li>trim:【Boolean】,是否调用trim()，默认true。<\\/li>\\n<li>toArray:【Boolean】，默认false。为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":55,\"month\":6,\"seconds\":3,\"time\":1532051703000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153205170284601000003\",\"markdown\":\"## 1.formJson\\n可以把表单转成json对象或数组。\\n\\n```\\nfunction(formSelector, option)\\n\\nformSelector：form选择器或dom\\n```\\noption说明：\\n1. includeAllParams:是否包含所有的参数、包括为空的,默认为false。\\n2. trim:【Boolean】,是否调用trim()，默认true。\\n3. toArray:【Boolean】，默认false。为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"form表单\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153205170284601000003'),('153206486426808000006',1,'2018-07-20 13:34:24',77,'ArticleWithBLOBs','文章','UPDATE','超级管理员','form表单','{\"brief\":\"form表单转对象，对象回显到表单\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1formjson\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1formjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.formJson<\\/h2>\\n<p data-source-line=\\\"2\\\">将表单转成json对象或数组。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, option)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"7\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"8\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"11\\\">\\n<li>includeAllParams:默认为false，是否包含所有的参数、包括为空的。<\\/li>\\n<li>trim:【Boolean】默认true,是否调用trim()。<\\/li>\\n<li>toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2json2form\\\" data-source-line=\\\"15\\\"><a class=\\\"anchor\\\" href=\\\"#2json2form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.json2Form<\\/h2>\\n<p data-source-line=\\\"16\\\">用于表单回显。<\\/p>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, data)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"21\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"22\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3form\\\" data-source-line=\\\"24\\\"><a class=\\\"anchor\\\" href=\\\"#3form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.form<\\/h2>\\n<pre data-source-line=\\\"26\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"29\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"30\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"32\\\"><strong>函数<\\/strong>：<\\/p>\\n<h3 id=\\\"1submitby\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1submitby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1）submitBy()<\\/h3>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"38\\\">obj说明：<\\/p>\\n<ul data-source-line=\\\"39\\\">\\n<li>为选择器或dom，监听click事件进行提交。<\\/li>\\n<li>为function，如下,调用submitCall()会触发表单提交。<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> submitCall;\\nhandle.submitBy(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span>{\\n    submitCall=<span class=\\\"hljs-keyword\\\">callback<\\/span>;\\n})<\\/code><\\/pre><h3 id=\\\"2url\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2）url()<\\/h3>\\n<p data-source-line=\\\"50\\\">设置提交地址，默认会读取表单的action属性。<\\/p>\\n<pre data-source-line=\\\"51\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(url)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"3urlprefix\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3urlprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3）urlPrefix()<\\/h3>\\n<p data-source-line=\\\"56\\\">设置url前缀，最终的提交地址为urlPrefix+url。<\\/p>\\n<pre data-source-line=\\\"57\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(urlPrefix)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"4method\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#4method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4）method()<\\/h3>\\n<p data-source-line=\\\"62\\\">设置提交的方法，默认会读取表单的method属性。<\\/p>\\n<pre data-source-line=\\\"63\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<\\/span><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">method<\\/span>)<\\/span><\\/code><\\/pre><h3 id=\\\"5putvalues\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#5putvalues\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5）putValues()<\\/h3>\\n<p data-source-line=\\\"68\\\">设置表单值。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">object<\\/span>)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"6reset\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#6reset\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6）reset()<\\/h3>\\n<p data-source-line=\\\"75\\\">重置表单。<\\/p>\\n<h3 id=\\\"7onok\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#7onok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7）onOk()<\\/h3>\\n<pre data-source-line=\\\"79\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"8onfail\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#8onfail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8）onFail()<\\/h3>\\n<pre data-source-line=\\\"85\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"9onvalidatefail\\\" data-source-line=\\\"89\\\"><a class=\\\"anchor\\\" href=\\\"#9onvalidatefail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9）onValidateFail()<\\/h3>\\n<pre data-source-line=\\\"91\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"10submit\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#10submit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10）submit()<\\/h3>\\n<p data-source-line=\\\"96\\\">提交表单。<\\/p>\\n<h3 id=\\\"11beforesubmit\\\" data-source-line=\\\"98\\\"><a class=\\\"anchor\\\" href=\\\"#11beforesubmit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）beforeSubmit()<\\/h3>\\n<p data-source-line=\\\"99\\\">表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。<\\/p>\\n<pre data-source-line=\\\"101\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(beforeSubmitCallback)<\\/span><\\/span>\\n\\nbeforeSubmitCallback=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,callback)<\\/span><\\/span>{\\n    callback(<span class=\\\"hljs-keyword\\\">data<\\/span>);\\n}<\\/code><\\/pre><h3 id=\\\"11done\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#11done\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）done()<\\/h3>\\n<p data-source-line=\\\"110\\\">最后必须调用。<\\/p>\\n<h2 id=\\\"4validateformoption\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#4validateformoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.validateForm(option)<\\/h2>\\n<p data-source-line=\\\"113\\\">表验证。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\">xs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：\\n&lt;<span class=\\\"hljs-selector-tag\\\">input<\\/span> name=<span class=\\\"hljs-string\\\">\\\"mobile\\\"<\\/span> xs-validate=<span class=\\\"hljs-string\\\">\\\"mobile\\\"<\\/span> xs-validate-emptymsg=<span class=\\\"hljs-string\\\">\\\"手机号不能为空\\\"<\\/span> /&gt;<\\/code><\\/pre><p data-source-line=\\\"123\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"124\\\">\\n<li>form：form对象或选择器<\\/li>\\n<li>onOk:function(form)，验证成功的回调<\\/li>\\n<li>onFail:function(itemDom, name, value)，验失败的回调<\\/li>\\n<li>validate:可选，validate对象<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":55,\"month\":6,\"seconds\":3,\"time\":1532051703000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153205170284601000003\",\"markdown\":\"## 1.formJson\\n将表单转成json对象或数组。\\n\\n```\\nfunction(formSelector, option)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\noption说明：\\n1. includeAllParams:默认为false，是否包含所有的参数、包括为空的。\\n2. trim:【Boolean】默认true,是否调用trim()。\\n3. toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。\\n\\n## 2.json2Form\\n用于表单回显。\\n\\n```\\nfunction(formSelector, data)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n## 3.form\\n\\n```\\nfunction(formSelector)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n**函数**：\\n### 1）submitBy()\\n\\n```\\nfunction(obj)\\n```\\nobj说明：\\n- 为选择器或dom，监听click事件进行提交。\\n- 为function，如下,调用submitCall()会触发表单提交。\\n\\n```\\nvar submitCall;\\nhandle.submitBy(function(callback){\\n    submitCall=callback;\\n})\\n```\\n\\n### 2）url()\\n设置提交地址，默认会读取表单的action属性。\\n```\\nfunction(url)\\n```\\n\\n### 3）urlPrefix()\\n设置url前缀，最终的提交地址为urlPrefix+url。\\n```\\nfunction(urlPrefix)\\n```\\n\\n### 4）method()\\n设置提交的方法，默认会读取表单的method属性。\\n```\\nfunction(method)\\n```\\n\\n### 5）putValues()\\n设置表单值。\\n\\n```\\nfunction(object)\\n```\\n\\n### 6）reset()\\n重置表单。\\n\\n### 7）onOk()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 8）onFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 9）onValidateFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 10）submit()\\n提交表单。\\n\\n### 11）beforeSubmit()\\n表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。\\n\\n```\\nfunction(beforeSubmitCallback)\\n\\nbeforeSubmitCallback=function(data,callback){\\n    callback(data);\\n}\\n```\\n\\n### 11）done()\\n最后必须调用。\\n\\n## 4.validateForm(option)\\n表验证。\\n\\n```\\nxs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：\\n<input name=\\\"mobile\\\" xs-validate=\\\"mobile\\\" xs-validate-emptymsg=\\\"手机号不能为空\\\" />\\n```\\noption说明：\\n1. form：form对象或选择器\\n2. onOk:function(form)，验证成功的回调\\n3. onFail:function(itemDom, name, value)，验失败的回调\\n4. validate:可选，validate对象\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"form表单\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153205170284601000003'),('153206493285508000007',1,'2018-07-20 13:35:33',78,'ArticleWithBLOBs','文章','UPDATE','超级管理员','form表单','{\"brief\":\"form表单转对象，对象回显到表单\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1formjson\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1formjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.formJson<\\/h2>\\n<p data-source-line=\\\"2\\\">将表单转成json对象或数组。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, option)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"7\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"8\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"11\\\">\\n<li>includeAllParams:默认为false，是否包含所有的参数、包括为空的。<\\/li>\\n<li>trim:【Boolean】默认true,是否调用trim()。<\\/li>\\n<li>toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2json2form\\\" data-source-line=\\\"15\\\"><a class=\\\"anchor\\\" href=\\\"#2json2form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.json2Form<\\/h2>\\n<p data-source-line=\\\"16\\\">用于表单回显。<\\/p>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, data)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"21\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"22\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3form\\\" data-source-line=\\\"24\\\"><a class=\\\"anchor\\\" href=\\\"#3form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.form<\\/h2>\\n<pre data-source-line=\\\"26\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"29\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"30\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"32\\\"><strong>函数<\\/strong>：<\\/p>\\n<h3 id=\\\"1submitby\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1submitby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1）submitBy()<\\/h3>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"38\\\">obj说明：<\\/p>\\n<ul data-source-line=\\\"39\\\">\\n<li>为选择器或dom，监听click事件进行提交。<\\/li>\\n<li>为function，如下,调用submitCall()会触发表单提交。<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> submitCall;\\nhandle.submitBy(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span>{\\n    submitCall=<span class=\\\"hljs-keyword\\\">callback<\\/span>;\\n})<\\/code><\\/pre><h3 id=\\\"2url\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2）url()<\\/h3>\\n<p data-source-line=\\\"50\\\">设置提交地址，默认会读取表单的action属性。<\\/p>\\n<pre data-source-line=\\\"51\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(url)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"3urlprefix\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3urlprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3）urlPrefix()<\\/h3>\\n<p data-source-line=\\\"56\\\">设置url前缀，最终的提交地址为urlPrefix+url。<\\/p>\\n<pre data-source-line=\\\"57\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(urlPrefix)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"4method\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#4method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4）method()<\\/h3>\\n<p data-source-line=\\\"62\\\">设置提交的方法，默认会读取表单的method属性。<\\/p>\\n<pre data-source-line=\\\"63\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<\\/span><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">method<\\/span>)<\\/span><\\/code><\\/pre><h3 id=\\\"5putvalues\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#5putvalues\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5）putValues()<\\/h3>\\n<p data-source-line=\\\"68\\\">设置表单值。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">object<\\/span>)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"6reset\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#6reset\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6）reset()<\\/h3>\\n<p data-source-line=\\\"75\\\">重置表单。<\\/p>\\n<h3 id=\\\"7onok\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#7onok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7）onOk()<\\/h3>\\n<pre data-source-line=\\\"79\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"8onfail\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#8onfail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8）onFail()<\\/h3>\\n<pre data-source-line=\\\"85\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"9onvalidatefail\\\" data-source-line=\\\"89\\\"><a class=\\\"anchor\\\" href=\\\"#9onvalidatefail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9）onValidateFail()<\\/h3>\\n<pre data-source-line=\\\"91\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"10submit\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#10submit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10）submit()<\\/h3>\\n<p data-source-line=\\\"96\\\">提交表单。<\\/p>\\n<h3 id=\\\"11beforesubmit\\\" data-source-line=\\\"98\\\"><a class=\\\"anchor\\\" href=\\\"#11beforesubmit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）beforeSubmit()<\\/h3>\\n<p data-source-line=\\\"99\\\">表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。<\\/p>\\n<pre data-source-line=\\\"101\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(beforeSubmitCallback)<\\/span><\\/span>\\n\\nbeforeSubmitCallback=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,callback)<\\/span><\\/span>{\\n    callback(<span class=\\\"hljs-keyword\\\">data<\\/span>);\\n}<\\/code><\\/pre><h3 id=\\\"11done\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#11done\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）done()<\\/h3>\\n<p data-source-line=\\\"110\\\">最后必须调用。<\\/p>\\n<h2 id=\\\"4validateformoption\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#4validateformoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.validateForm(option)<\\/h2>\\n<p data-source-line=\\\"113\\\">表单验证。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\">xs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：<\\/code><\\/pre><p data-source-line=\\\"123\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"124\\\">\\n<li>form：form对象或选择器<\\/li>\\n<li>onOk:function(form)，验证成功的回调<\\/li>\\n<li>onFail:function(itemDom, name, value)，验失败的回调<\\/li>\\n<li>validate:可选，validate对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"5validate\\\" data-source-line=\\\"130\\\"><a class=\\\"anchor\\\" href=\\\"#5validate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.validate()<\\/h2>\\n<p data-source-line=\\\"131\\\">验证工具。<\\/p>\\n<h3 id=\\\"1put\\\" data-source-line=\\\"133\\\"><a class=\\\"anchor\\\" href=\\\"#1put\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1）put()<\\/h3>\\n<p data-source-line=\\\"134\\\">添加验证类型。<\\/p>\\n<pre data-source-line=\\\"135\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, <span class=\\\"hljs-keyword\\\">type<\\/span>, errmsg)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"138\\\">\\n<li>name：待验证的name名称<\\/li>\\n<li>type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)<\\/li>\\n<li>errmsg：string<\\/li>\\n<\\/ul>\\n<h3 id=\\\"2remove\\\" data-source-line=\\\"142\\\"><a class=\\\"anchor\\\" href=\\\"#2remove\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2）remove()<\\/h3>\\n<p data-source-line=\\\"143\\\">移除。<\\/p>\\n<pre data-source-line=\\\"144\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"3onok\\\" data-source-line=\\\"148\\\"><a class=\\\"anchor\\\" href=\\\"#3onok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3）onOk()<\\/h3>\\n<pre data-source-line=\\\"150\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(okCall)<\\/span><\\/span>\\n\\nokCall=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(selector)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"4oneachokcall\\\" data-source-line=\\\"156\\\"><a class=\\\"anchor\\\" href=\\\"#4oneachokcall\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4）onEachOkCall()<\\/h3>\\n<pre data-source-line=\\\"158\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span>\\n\\ncallback = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(itemDom,name,value)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"5onfail\\\" data-source-line=\\\"164\\\"><a class=\\\"anchor\\\" href=\\\"#5onfail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5）onFail()<\\/h3>\\n<pre data-source-line=\\\"166\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(failCall)<\\/span><\\/span>\\n\\nfailCall = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(itemDom,name,value,errmsg)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"6dovalidate\\\" data-source-line=\\\"172\\\"><a class=\\\"anchor\\\" href=\\\"#6dovalidate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6）doValidate()<\\/h3>\\n<pre data-source-line=\\\"174\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(selector, checkAll)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"177\\\">\\n<li>selector 表单选择器<\\/li>\\n<li>checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。<\\/li>\\n<\\/ul>\\n<h3 id=\\\"7自验证类型\\\" data-source-line=\\\"180\\\"><a class=\\\"anchor\\\" href=\\\"#7自验证类型\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7）自验证类型<\\/h3>\\n<ul data-source-line=\\\"181\\\">\\n<li>1.$reg:正则表达是<\\/li>\\n<li>2.email<\\/li>\\n<li>3.chinese:中文<\\/li>\\n<li>4.url<\\/li>\\n<li>5.filename:文件名<\\/li>\\n<li>6.idcard:身份证号<\\/li>\\n<li>7.number:数字（整数或小数）<\\/li>\\n<li>8.int:整数(有符号)<\\/li>\\n<li>9.uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；<\\/li>\\n<li>10.length(min,max):长度验证(min,max)|(min,)|(,max)<\\/li>\\n<li>11.mobile:手机号<\\/li>\\n<li>12.phone:电话号码<\\/li>\\n<li>13.ipv4:ipv4地址<\\/li>\\n<li>14.unumber:(非负)数字（整数或小数）<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":55,\"month\":6,\"seconds\":3,\"time\":1532051703000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153205170284601000003\",\"markdown\":\"## 1.formJson\\n将表单转成json对象或数组。\\n\\n```\\nfunction(formSelector, option)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\noption说明：\\n1. includeAllParams:默认为false，是否包含所有的参数、包括为空的。\\n2. trim:【Boolean】默认true,是否调用trim()。\\n3. toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。\\n\\n## 2.json2Form\\n用于表单回显。\\n\\n```\\nfunction(formSelector, data)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n## 3.form\\n\\n```\\nfunction(formSelector)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n**函数**：\\n### 1）submitBy()\\n\\n```\\nfunction(obj)\\n```\\nobj说明：\\n- 为选择器或dom，监听click事件进行提交。\\n- 为function，如下,调用submitCall()会触发表单提交。\\n\\n```\\nvar submitCall;\\nhandle.submitBy(function(callback){\\n    submitCall=callback;\\n})\\n```\\n\\n### 2）url()\\n设置提交地址，默认会读取表单的action属性。\\n```\\nfunction(url)\\n```\\n\\n### 3）urlPrefix()\\n设置url前缀，最终的提交地址为urlPrefix+url。\\n```\\nfunction(urlPrefix)\\n```\\n\\n### 4）method()\\n设置提交的方法，默认会读取表单的method属性。\\n```\\nfunction(method)\\n```\\n\\n### 5）putValues()\\n设置表单值。\\n\\n```\\nfunction(object)\\n```\\n\\n### 6）reset()\\n重置表单。\\n\\n### 7）onOk()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 8）onFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 9）onValidateFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 10）submit()\\n提交表单。\\n\\n### 11）beforeSubmit()\\n表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。\\n\\n```\\nfunction(beforeSubmitCallback)\\n\\nbeforeSubmitCallback=function(data,callback){\\n    callback(data);\\n}\\n```\\n\\n### 11）done()\\n最后必须调用。\\n\\n## 4.validateForm(option)\\n表单验证。\\n\\n```\\nxs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：\\n\\n```\\noption说明：\\n1. form：form对象或选择器\\n2. onOk:function(form)，验证成功的回调\\n3. onFail:function(itemDom, name, value)，验失败的回调\\n4. validate:可选，validate对象\\n\\n\\n## 5.validate()\\n验证工具。\\n\\n### 1）put()\\n添加验证类型。\\n```\\nfunction(name, type, errmsg)\\n```\\n- name：待验证的name名称\\n- type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)\\n- errmsg：string\\n\\n### 2）remove()\\n移除。\\n```\\nfunction(name)\\n```\\n\\n### 3）onOk()\\n\\n```\\nfunction(okCall)\\n\\nokCall=function(selector)\\n```\\n\\n### 4）onEachOkCall()\\n\\n```\\nfunction(callback)\\n\\ncallback = function(itemDom,name,value)\\n```\\n\\n### 5）onFail()\\n\\n```\\nfunction(failCall)\\n\\nfailCall = function(itemDom,name,value,errmsg)\\n```\\n\\n### 6）doValidate()\\n\\n```\\nfunction(selector, checkAll)\\n```\\n- selector 表单选择器\\n- checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。\\n\\n### 7）自验证类型\\n * 1.$reg:正则表达是\\n * 2.email\\n * 3.chinese:中文\\n * 4.url\\n * 5.filename:文件名\\n * 6.idcard:身份证号\\n * 7.number:数字（整数或小数）\\n * 8.int:整数(有符号)\\n * 9.uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；\\n * 10.length(min,max):长度验证(min,max)|(min,)|(,max)\\n * 11.mobile:手机号\\n * 12.phone:电话号码\\n * 13.ipv4:ipv4地址\\n * 14.unumber:(非负)数字（整数或小数）\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"form表单\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153205170284601000003'),('153206558453408000009',1,'2018-07-20 13:46:25',79,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153206567633008000010',1,'2018-07-20 13:47:56',80,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1queryparam\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1queryparam\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.queryParam()<\\/h2>\\n<p data-source-line=\\\"2\\\">得到地址参数。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, otherValue, optionUrl)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>name：参数名<\\/li>\\n<li>otherValue：不存在时的返回值<\\/li>\\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2isjquery\\\" data-source-line=\\\"11\\\"><a class=\\\"anchor\\\" href=\\\"#2isjquery\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.isJQuery()<\\/h2>\\n<p data-source-line=\\\"12\\\">判断是否为jQuery对象。<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"3isjqueryordom\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3isjqueryordom\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.isJQueryOrDOM()<\\/h2>\\n<p data-source-line=\\\"19\\\">判断是否为jQuery或Dom对象。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"4windowslowertrigger\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#4windowslowertrigger\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.window.slowerTrigger()<\\/h2>\\n<p data-source-line=\\\"26\\\">防止快速或重复点击。<\\/p>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">callback<\\/span>)\\n\\n例子：\\n<span class=\\\"hljs-title\\\">$<\\/span>(<span class=\\\"hljs-params\\\">selector<\\/span>).<span class=\\\"hljs-title\\\">click<\\/span>(<span class=\\\"hljs-params\\\">slowerTrigger(function(<\\/span>)<\\/span>{\\n    alert(<span class=\\\"hljs-keyword\\\">this<\\/span>);\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-literal\\\">false<\\/span>;\\n}));<\\/code><\\/pre>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"## 1.queryParam()\\n得到地址参数。\\n\\n```\\nfunction(name, otherValue, optionUrl)\\n```\\n- name：参数名\\n- otherValue：不存在时的返回值\\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\\n\\n## 2.isJQuery()\\n判断是否为jQuery对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 3.isJQueryOrDOM()\\n判断是否为jQuery或Dom对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 4.window.slowerTrigger()\\n防止快速或重复点击。\\n```\\nfunction(callback)\\n\\n例子：\\n$(selector).click(slowerTrigger(function(){\\n    alert(this);\\n    return false;\\n}));\\n```\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153206601615808000012',1,'2018-07-20 13:53:36',81,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1queryparam\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1queryparam\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.queryParam()<\\/h2>\\n<p data-source-line=\\\"2\\\">得到地址参数。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, otherValue, optionUrl)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>name：参数名<\\/li>\\n<li>otherValue：不存在时的返回值<\\/li>\\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2isjquery\\\" data-source-line=\\\"11\\\"><a class=\\\"anchor\\\" href=\\\"#2isjquery\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.isJQuery()<\\/h2>\\n<p data-source-line=\\\"12\\\">判断是否为jQuery对象。<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"3isjqueryordom\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3isjqueryordom\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.isJQueryOrDOM()<\\/h2>\\n<p data-source-line=\\\"19\\\">判断是否为jQuery或Dom对象。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"4windowslowertrigger\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#4windowslowertrigger\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.window.slowerTrigger()<\\/h2>\\n<p data-source-line=\\\"26\\\">防止快速或重复点击。<\\/p>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">callback<\\/span>)\\n\\n例子：\\n<span class=\\\"hljs-title\\\">$<\\/span>(<span class=\\\"hljs-params\\\">selector<\\/span>).<span class=\\\"hljs-title\\\">click<\\/span>(<span class=\\\"hljs-params\\\">slowerTrigger(function(<\\/span>)<\\/span>{\\n    alert(<span class=\\\"hljs-keyword\\\">this<\\/span>);\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-literal\\\">false<\\/span>;\\n}));<\\/code><\\/pre><h2 id=\\\"5pako\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#5pako\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.pako<\\/h2>\\n<p data-source-line=\\\"38\\\">sdk.pako为pako模块，一个js压缩库。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"## 1.queryParam()\\n得到地址参数。\\n\\n```\\nfunction(name, otherValue, optionUrl)\\n```\\n- name：参数名\\n- otherValue：不存在时的返回值\\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\\n\\n## 2.isJQuery()\\n判断是否为jQuery对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 3.isJQueryOrDOM()\\n判断是否为jQuery或Dom对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 4.window.slowerTrigger()\\n防止快速或重复点击。\\n```\\nfunction(callback)\\n\\n例子：\\n$(selector).click(slowerTrigger(function(){\\n    alert(this);\\n    return false;\\n}));\\n```\\n\\n## 5.pako\\nsdk.pako为pako模块，一个js压缩库。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1003,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153206632473008000013',1,'2018-07-20 13:58:45',82,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":1000,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153206785630608000014',1,'2018-07-20 14:24:16',83,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据表格','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":48,\"month\":6,\"seconds\":30,\"time\":1532065710000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206570977301000011\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"数据表格\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206570977301000011'),('153206816171108000015',1,'2018-07-20 14:29:22',84,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据表格','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":0,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"1\\\">数据表格API,最后必须调用done()方法。<\\/p>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">通过\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">attr<\\/span>:value\\n})<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n或\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>()<span class=\\\"hljs-selector-class\\\">.attr<\\/span>(<span class=\\\"hljs-selector-tag\\\">value<\\/span>)<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n调用<\\/code><\\/pre><h1 id=\\\"参数或函数说明\\\" data-source-line=\\\"12\\\"><a class=\\\"anchor\\\" href=\\\"#参数或函数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>参数或函数说明：<\\/h1>\\n<h2 id=\\\"1cols\\\" data-source-line=\\\"14\\\"><a class=\\\"anchor\\\" href=\\\"#1cols\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.cols<\\/h2>\\n<p data-source-line=\\\"15\\\">【Array】表格列。<\\/p>\\n<ul data-source-line=\\\"17\\\">\\n<li>title：标题名称|dom|function(col)<\\/li>\\n<li>titleColor：css颜色值|function(col)<\\/li>\\n<li>sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field<\\/li>\\n<li>sortable：是否排序|function(col),会显示排序按钮<\\/li>\\n<li>fixed：left|right|function(col)，固定列<\\/li>\\n<li>initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序<\\/li>\\n<li>width：宽度值|function(col)<\\/li>\\n<li>edit：text|function(col),编辑项,isText为true时有效<\\/li>\\n<li>align：center|left|right|function(col)，设置标题的对齐方式<\\/li>\\n<li>checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列<\\/li>\\n<li>notToggle：boolean|function(col)，是否禁止拖动表格列<\\/li>\\n<li>attrTitle：boolean|function()，默认为true，对于文本是否添加title属性<\\/li>\\n<li>alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的<\\/li>\\n<li>isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本<\\/li>\\n<li>field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。<\\/li>\\n<li>color：css颜色值|function(item,col,index,pageInfo)<\\/li>\\n<li>enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2url\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.url<\\/h2>\\n<p data-source-line=\\\"36\\\">访问的地址。<\\/p>\\n<h2 id=\\\"3method\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#3method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.method<\\/h2>\\n<p data-source-line=\\\"39\\\">访问的方法，默认post。<\\/p>\\n<h2 id=\\\"4data\\\" data-source-line=\\\"41\\\"><a class=\\\"anchor\\\" href=\\\"#4data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.data<\\/h2>\\n<p data-source-line=\\\"42\\\">静态数据[{}]。<\\/p>\\n<h2 id=\\\"5container\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#5container\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.container<\\/h2>\\n<p data-source-line=\\\"45\\\">存放表格的容器，选择器或dom对象。<\\/p>\\n<h2 id=\\\"6width\\\" data-source-line=\\\"47\\\"><a class=\\\"anchor\\\" href=\\\"#6width\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.width<\\/h2>\\n<p data-source-line=\\\"48\\\">表格宽度。<\\/p>\\n<h2 id=\\\"7height\\\" data-source-line=\\\"50\\\"><a class=\\\"anchor\\\" href=\\\"#7height\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.height<\\/h2>\\n<p data-source-line=\\\"51\\\">表格高度|full-差值,默认full-0。<\\/p>\\n<h2 id=\\\"8haspage\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#8haspage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.hasPage<\\/h2>\\n<p data-source-line=\\\"54\\\">是否有分页,默认true。<\\/p>\\n<h2 id=\\\"9sortmulti\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#9sortmulti\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.sortMulti<\\/h2>\\n<p data-source-line=\\\"57\\\">是否支持多列同时排序,默认false。<\\/p>\\n<h2 id=\\\"10params\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#10params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.params<\\/h2>\\n<p data-source-line=\\\"60\\\">查询参数，添加根参数。<\\/p>\\n<h2 id=\\\"11tableoptionparams\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#11tableoptionparams\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.tableOptionParams<\\/h2>\\n<p data-source-line=\\\"63\\\">用于添加到query中。<\\/p>\\n<h2 id=\\\"12usetableoptionqueryarray\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#12usetableoptionqueryarray\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.useTableOptionQueryArray<\\/h2>\\n<p data-source-line=\\\"66\\\">默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。<\\/p>\\n<h2 id=\\\"13bindform\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#13bindform\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.bindForm<\\/h2>\\n<p data-source-line=\\\"69\\\">[绑定form对象或选择器,domForClick|function(listener)]。<\\/p>\\n<h2 id=\\\"14size\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#14size\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.size<\\/h2>\\n<p data-source-line=\\\"72\\\">表格大小small|normal|large。<\\/p>\\n<h2 id=\\\"15nottoggle\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#15nottoggle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.notToggle<\\/h2>\\n<p data-source-line=\\\"75\\\">是否禁止拖动表格列,设置表格默认值，会改变列的默认值。<\\/p>\\n<h2 id=\\\"16even\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#16even\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.even<\\/h2>\\n<p data-source-line=\\\"78\\\">是否开启隔行背景,默认true。<\\/p>\\n<h2 id=\\\"17attrtitle\\\" data-source-line=\\\"80\\\"><a class=\\\"anchor\\\" href=\\\"#17attrtitle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.attrTitle<\\/h2>\\n<p data-source-line=\\\"81\\\">对于文本是否添加title属性，默认为false。<\\/p>\\n<h2 id=\\\"18oncelleditlistener\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#18oncelleditlistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.onCellEditListener<\\/h2>\\n<p data-source-line=\\\"84\\\">单元格内容被编辑后的监听函数。<\\/p>\\n<pre data-source-line=\\\"86\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,name,newValue,oldValue,row,col)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"19beforerequest\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#19beforerequest\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.beforeRequest<\\/h2>\\n<p data-source-line=\\\"91\\\">网络请求之前的回调。<\\/p>\\n<pre data-source-line=\\\"93\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(params)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"20afterajaxok\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#20afterajaxok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.afterAjaxOk<\\/h2>\\n<p data-source-line=\\\"98\\\">ajax请求成功后的回调,在onLoadCompleteListener之前。<\\/p>\\n<pre data-source-line=\\\"100\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,okcallback,errcallback)<\\/span><\\/span>{\\n    okcallback(json);\\n}<\\/code><\\/pre><h2 id=\\\"21onloadcompletelistener\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#21onloadcompletelistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.onLoadCompleteListener<\\/h2>\\n<p data-source-line=\\\"107\\\">加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,loadCount,pageInfo)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"22beforeflush\\\" data-source-line=\\\"113\\\"><a class=\\\"anchor\\\" href=\\\"#22beforeflush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.beforeFlush<\\/h2>\\n<p data-source-line=\\\"114\\\">设置刷之前的回调。<\\/p>\\n<h2 id=\\\"23\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#23\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.<\\/h2>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":48,\"month\":6,\"seconds\":30,\"time\":1532065710000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206570977301000011\",\"markdown\":\"数据表格API,最后必须调用done()方法。\\n\\n```\\n通过\\nsdk.table({\\n    attr:value\\n}).done();\\n或\\nsdk.table().attr(value).done();\\n调用\\n```\\n# 参数或函数说明：\\n\\n## 1.cols\\n【Array】表格列。\\n\\n- title：标题名称|dom|function(col)\\n- titleColor：css颜色值|function(col)\\n- sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field\\n- sortable：是否排序|function(col),会显示排序按钮\\n- fixed：left|right|function(col)，固定列\\n- initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序\\n- width：宽度值|function(col)\\n- edit：text|function(col),编辑项,isText为true时有效\\n- align：center|left|right|function(col)，设置标题的对齐方式\\n- checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列\\n- notToggle：boolean|function(col)，是否禁止拖动表格列\\n- attrTitle：boolean|function()，默认为true，对于文本是否添加title属性\\n- alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的\\n- isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本\\n- field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。\\n- color：css颜色值|function(item,col,index,pageInfo)\\n- enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。\\n\\n## 2.url\\n访问的地址。\\n\\n## 3.method\\n访问的方法，默认post。\\n\\n## 4.data\\n静态数据[{}]。\\n\\n## 5.container\\n存放表格的容器，选择器或dom对象。\\n\\n## 6.width\\n表格宽度。\\n\\n## 7.height\\n表格高度|full-差值,默认full-0。\\n\\n## 8.hasPage\\n是否有分页,默认true。\\n\\n## 9.sortMulti\\n是否支持多列同时排序,默认false。\\n\\n## 10.params\\n查询参数，添加根参数。\\n\\n## 11.tableOptionParams\\n用于添加到query中。\\n\\n## 12.useTableOptionQueryArray\\n默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。\\n\\n## 13.bindForm\\n[绑定form对象或选择器,domForClick|function(listener)]。\\n\\n## 14.size\\n表格大小small|normal|large。\\n\\n## 15.notToggle\\n是否禁止拖动表格列,设置表格默认值，会改变列的默认值。\\n\\n## 16.even\\n是否开启隔行背景,默认true。\\n\\n## 17.attrTitle\\n对于文本是否添加title属性，默认为false。\\n\\n## 18.onCellEditListener\\n单元格内容被编辑后的监听函数。\\n\\n```\\nfunction(data,name,newValue,oldValue,row,col)\\n```\\n\\n## 19.beforeRequest\\n网络请求之前的回调。\\n\\n```\\nfunction(params)\\n```\\n\\n## 20.afterAjaxOk\\najax请求成功后的回调,在onLoadCompleteListener之前。\\n\\n```\\nfunction(json,okcallback,errcallback){\\n    okcallback(json);\\n}\\n```\\n\\n## 21.onLoadCompleteListener\\n加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。\\n\\n```\\nfunction(json,loadCount,pageInfo)\\n```\\n\\n## 22.beforeFlush\\n设置刷之前的回调。\\n\\n## 23.\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"数据表格\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206570977301000011'),('153206849832908000016',1,'2018-07-20 14:34:58',85,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1queryparam\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1queryparam\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.queryParam()<\\/h2>\\n<p data-source-line=\\\"2\\\">得到地址参数。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, otherValue, optionUrl)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>name：参数名<\\/li>\\n<li>otherValue：不存在时的返回值<\\/li>\\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2isjquery\\\" data-source-line=\\\"11\\\"><a class=\\\"anchor\\\" href=\\\"#2isjquery\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.isJQuery()<\\/h2>\\n<p data-source-line=\\\"12\\\">判断是否为jQuery对象。<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"3isjqueryordom\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3isjqueryordom\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.isJQueryOrDOM()<\\/h2>\\n<p data-source-line=\\\"19\\\">判断是否为jQuery或Dom对象。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"4windowslowertrigger\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#4windowslowertrigger\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.window.slowerTrigger()<\\/h2>\\n<p data-source-line=\\\"26\\\">防止快速或重复点击。<\\/p>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">callback<\\/span>)\\n\\n例子：\\n<span class=\\\"hljs-title\\\">$<\\/span>(<span class=\\\"hljs-params\\\">selector<\\/span>).<span class=\\\"hljs-title\\\">click<\\/span>(<span class=\\\"hljs-params\\\">slowerTrigger(function(<\\/span>)<\\/span>{\\n    alert(<span class=\\\"hljs-keyword\\\">this<\\/span>);\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-literal\\\">false<\\/span>;\\n}));<\\/code><\\/pre><h2 id=\\\"5pako\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#5pako\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.pako<\\/h2>\\n<p data-source-line=\\\"38\\\">一个js压缩库。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"## 1.queryParam()\\n得到地址参数。\\n\\n```\\nfunction(name, otherValue, optionUrl)\\n```\\n- name：参数名\\n- otherValue：不存在时的返回值\\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\\n\\n## 2.isJQuery()\\n判断是否为jQuery对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 3.isJQueryOrDOM()\\n判断是否为jQuery或Dom对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 4.window.slowerTrigger()\\n防止快速或重复点击。\\n```\\nfunction(callback)\\n\\n例子：\\n$(selector).click(slowerTrigger(function(){\\n    alert(this);\\n    return false;\\n}));\\n```\\n\\n## 5.pako\\n一个js压缩库。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1003,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153206883937108000018',1,'2018-07-20 14:40:39',86,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"1queryparam\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1queryparam\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.queryParam()<\\/h2>\\n<p data-source-line=\\\"2\\\">得到地址参数。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, otherValue, optionUrl)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>name：参数名<\\/li>\\n<li>otherValue：不存在时的返回值<\\/li>\\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2isjquery\\\" data-source-line=\\\"11\\\"><a class=\\\"anchor\\\" href=\\\"#2isjquery\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.isJQuery()<\\/h2>\\n<p data-source-line=\\\"12\\\">判断是否为jQuery对象。<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"3isjqueryordom\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3isjqueryordom\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.isJQueryOrDOM()<\\/h2>\\n<p data-source-line=\\\"19\\\">判断是否为jQuery或Dom对象。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"4windowslowertrigger\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#4windowslowertrigger\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.window.slowerTrigger()<\\/h2>\\n<p data-source-line=\\\"26\\\">防止快速或重复点击。<\\/p>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">callback<\\/span>)\\n\\n例子：\\n<span class=\\\"hljs-title\\\">$<\\/span>(<span class=\\\"hljs-params\\\">selector<\\/span>).<span class=\\\"hljs-title\\\">click<\\/span>(<span class=\\\"hljs-params\\\">slowerTrigger(function(<\\/span>)<\\/span>{\\n    alert(<span class=\\\"hljs-keyword\\\">this<\\/span>);\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-literal\\\">false<\\/span>;\\n}));<\\/code><\\/pre><h2 id=\\\"5pako\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#5pako\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.pako<\\/h2>\\n<p data-source-line=\\\"38\\\">一个js压缩库。<\\/p>\\n<h2 id=\\\"6usetopuselowertopuseopeneruseparent\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#6usetopuselowertopuseopeneruseparent\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.useTop()|useLowerTop()|useOpener()|useParent()<\\/h2>\\n<p data-source-line=\\\"41\\\">如果不存在时，返结果等于当前窗口的sdk对象。<\\/p>\\n<ul data-source-line=\\\"42\\\">\\n<li>useTop()：使用顶层sdk对象。<\\/li>\\n<li>useLowerTop()：使用顶层下一级sdk对象。<\\/li>\\n<li>useOpener()：使用打开者sdk对象。<\\/li>\\n<li>useParent()：使用父级sdk对象。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"## 1.queryParam()\\n得到地址参数。\\n\\n```\\nfunction(name, otherValue, optionUrl)\\n```\\n- name：参数名\\n- otherValue：不存在时的返回值\\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\\n\\n## 2.isJQuery()\\n判断是否为jQuery对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 3.isJQueryOrDOM()\\n判断是否为jQuery或Dom对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 4.window.slowerTrigger()\\n防止快速或重复点击。\\n```\\nfunction(callback)\\n\\n例子：\\n$(selector).click(slowerTrigger(function(){\\n    alert(this);\\n    return false;\\n}));\\n```\\n\\n## 5.pako\\n一个js压缩库。\\n\\n## 6.useTop()|useLowerTop()|useOpener()|useParent()\\n如果不存在时，返结果等于当前窗口的sdk对象。\\n- useTop()：使用顶层sdk对象。\\n- useLowerTop()：使用顶层下一级sdk对象。\\n- useOpener()：使用打开者sdk对象。\\n- useParent()：使用父级sdk对象。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1004,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153206962479808000019',1,'2018-07-20 14:53:45',87,'ArticleWithBLOBs','文章','UPDATE','超级管理员','弹出层','{\"brief\":\"包括弹出页面、alert、confirm、loading、tips等\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":14,\"minutes\":38,\"month\":6,\"seconds\":57,\"time\":1532068737000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206873741201000017\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"弹出层\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206873741201000017'),('153206981112508000020',1,'2018-07-20 14:56:51',88,'ArticleWithBLOBs','文章','UPDATE','超级管理员','弹出层','{\"brief\":\"包括弹出页面、alert、confirm、loading、tips等\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1loading\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1loading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.loading<\\/h2>\\n<p data-source-line=\\\"3\\\">加载框。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.loading<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>type:default,star,stars<\\/li>\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2showtoast\\\" data-source-line=\\\"15\\\"><a class=\\\"anchor\\\" href=\\\"#2showtoast\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.showToast()<\\/h2>\\n<p data-source-line=\\\"16\\\">function(text)直接弹出文本消息。<\\/p>\\n<h2 id=\\\"3toast\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3toast\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.toast<\\/h2>\\n<p data-source-line=\\\"19\\\">弹出气泡消息。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.toast<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"24\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<\\/ul>\\n<h2 id=\\\"4alert\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#4alert\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.alert<\\/h2>\\n<p data-source-line=\\\"34\\\">提示框。<\\/p>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.alert<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"38\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onOk:function(),返回false不会关闭<\\/li>\\n<li>okLabel：<\\/li>\\n<\\/ul>\\n<h2 id=\\\"5confirm\\\" data-source-line=\\\"50\\\"><a class=\\\"anchor\\\" href=\\\"#5confirm\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.confirm<\\/h2>\\n<p data-source-line=\\\"51\\\">确认框。<\\/p>\\n<pre data-source-line=\\\"52\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.confirm<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"55\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onOk:function(),返回false不会关闭<\\/li>\\n<li>onCancel:function(),返回false不会关闭<\\/li>\\n<li>okLabel:<\\/li>\\n<li>cancelLabel：<\\/li>\\n<\\/ul>\\n<h2 id=\\\"6popinput\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#6popinput\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.popInput<\\/h2>\\n<p data-source-line=\\\"70\\\">弹出输入框。<\\/p>\\n<pre data-source-line=\\\"71\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.popInput<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"74\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>initValue:初始值<\\/li>\\n<li>maxlength:最大长度<\\/li>\\n<li>inputType:text,textarea,password,date,datetime,time<\\/li>\\n<li>range:true|fale,对date,datetime,time有效<\\/li>\\n<li>rangeSP:范围分隔符号,默认空格<\\/li>\\n<\\/ul>\\n<hr>\\n<ul data-source-line=\\\"83\\\">\\n<li>format:时间日期格式:默认值：yyyy-MM-dd<\\/li>\\n<li>yyyy\\t年份，至少四位数。如果不足四位，则前面补零<\\/li>\\n<li>y\\t年份，不限制位数，即不管年份多少位，前面均不补零<\\/li>\\n<li>MM\\t月份，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>M\\t月份，允许一位数。<\\/li>\\n<li>dd\\t日期，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>d\\t日期，允许一位数。<\\/li>\\n<li>HH\\t小时，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>H\\t小时，允许一位数。<\\/li>\\n<li>mm\\t分钟，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>m\\t分钟，允许一位数。<\\/li>\\n<li>ss\\t秒数，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>s\\t秒数，允许一位数。<\\/li>\\n<\\/ul>\\n<hr>\\n<ul data-source-line=\\\"97\\\">\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onCancel:function()<\\/li>\\n<li>hasCancel:true/false<\\/li>\\n<li>onOk:function(val):返回false不会关闭<\\/li>\\n<li>onCancel:function()<\\/li>\\n<li>validateType:<\\/li>\\n<li>errmsg:<\\/li>\\n<\\/ul>\\n<h2 id=\\\"7tips\\\" data-source-line=\\\"108\\\"><a class=\\\"anchor\\\" href=\\\"#7tips\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.tips<\\/h2>\\n<p data-source-line=\\\"109\\\">吸附框。<\\/p>\\n<pre data-source-line=\\\"110\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.tips<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"113\\\">\\n<li>target:吸附元素<\\/li>\\n<li>content:内容<\\/li>\\n<li>position:up,down,left,right<\\/li>\\n<li>bgcolor:背景颜色<\\/li>\\n<li>color:字体颜色，默认黑色<\\/li>\\n<li>tipsMore:默认true，会销毁之前的。<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>close:关闭<\\/li>\\n<\\/ul>\\n<h2 id=\\\"8poppage\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#8poppage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.popPage<\\/h2>\\n<p data-source-line=\\\"124\\\">弹出页面。<\\/p>\\n<pre data-source-line=\\\"125\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.popPage<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"128\\\">\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body<\\/li>\\n<li>url:显示的url<\\/li>\\n<li>text:显示的文本内容<\\/li>\\n<li>textStyle:显示的文本的style，默认是:\\\"padding:5px;text-align:center;font-size:20px;\\\"<\\/li>\\n<li>size:[width,height],默认[\\\"80%\\\",\\\"90%\\\"]<\\/li>\\n<li>min:[minWidth,minHeight]<\\/li>\\n<li>max:[maxWidth,maxHeight],默认[\\\"100%\\\",\\\"100%\\\"]<\\/li>\\n<li>width:<\\/li>\\n<li>height:<\\/li>\\n<li>shade:透明度，默认0.3<\\/li>\\n<li>contentCss:object对象，设置内容区域的css，默认{margin:\\\"0px\\\"}<\\/li>\\n<li>resizable:是否允许缩放大小，默认true<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>cornerClose:是否含有角落的关闭按钮，默认为true<\\/li>\\n<li>modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true<\\/li>\\n<li>scrollbar:页面body是否有滚动条，默认false<\\/li>\\n<li>initShow:是否显示，默认true<\\/li>\\n<li>show:function(showOrHide)显示,showOrHide为false时隐藏<\\/li>\\n<li>toTop:function()置顶<\\/li>\\n<li>minmax:是否含有最大和最小化按钮，默认为true<\\/li>\\n<li>btnsAlign:left,center,right;默认right<\\/li>\\n<li>buttonsThis:按钮回调函数的this指向，默认为当前handle.<\\/li>\\n<li>buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]<\\/li>\\n<li>buttonFoucs:[index]设置按钮重点，默认为[0]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onGetIFrame:function(iframe)<\\/li>\\n<li>onShadeClick:function()<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:function(){}关闭时的回调<\\/li>\\n<li>onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"9widgetgenbutton\\\" data-source-line=\\\"163\\\"><a class=\\\"anchor\\\" href=\\\"#9widgetgenbutton\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.widget().genButton<\\/h2>\\n<p data-source-line=\\\"164\\\">生成按钮。<\\/p>\\n<pre data-source-line=\\\"165\\\"><code class=\\\"hljs\\\">sdk<span class=\\\"hljs-selector-class\\\">.widget<\\/span>()<span class=\\\"hljs-selector-class\\\">.genButton<\\/span>(...)<span class=\\\"hljs-selector-tag\\\">done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"168\\\">\\n<li>size:small(默认),normal,medium,large<\\/li>\\n<li>type:primary,info,success,warn,danger/error<\\/li>\\n<li>radius:是否圆角<\\/li>\\n<li>disabled:是否禁用<\\/li>\\n<li>content:按钮内容<\\/li>\\n<li>text:按钮文本<\\/li>\\n<li>class:<\\/li>\\n<li>href:点击跳转的连接<\\/li>\\n<li>attrs:<\\/li>\\n<li>click:function()<\\/li>\\n<li>done:function()返回按钮dom<\\/li>\\n<\\/ul>\\n<h2 id=\\\"10xssimpleedit\\\" data-source-line=\\\"180\\\"><a class=\\\"anchor\\\" href=\\\"#10xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.xsSimpleEdit<\\/h2>\\n<ul data-source-line=\\\"181\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":14,\"minutes\":38,\"month\":6,\"seconds\":57,\"time\":1532068737000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206873741201000017\",\"markdown\":\"## 1.loading\\n加载框。\\n```\\nsdk.loading(...)done()\\n```\\n* type:default,star,stars\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onShow:显示后的回调\\n* onClosed:关闭时的回调\\n\\n## 2.showToast()\\nfunction(text)直接弹出文本消息。\\n\\n## 3.toast\\n弹出气泡消息。\\n\\n```\\nsdk.toast(...)done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭\\n* content:显示的内容\\n* onShow:显示后的回调\\n* onClosed:关闭时的回调\\n\\n## 4.alert\\n提示框。\\n```\\nsdk.alert(...)done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* title:标题|false\\n* content:显示的内容\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onOk:function(),返回false不会关闭\\n* okLabel：\\n\\n## 5.confirm\\n确认框。\\n```\\nsdk.confirm(...)done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* title:标题|false\\n* content:显示的内容\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onOk:function(),返回false不会关闭\\n* onCancel:function(),返回false不会关闭\\n* okLabel:\\n* cancelLabel：\\n\\n## 6.popInput\\n弹出输入框。\\n```\\nsdk.popInput(...)done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* title:标题|false\\n* initValue:初始值\\n* maxlength:最大长度\\n* inputType:text,textarea,password,date,datetime,time\\n* range:true|fale,对date,datetime,time有效\\n* rangeSP:范围分隔符号,默认空格\\n* ************************************\\n* format:时间日期格式:默认值：yyyy-MM-dd\\n* yyyy\\t年份，至少四位数。如果不足四位，则前面补零\\n* y\\t年份，不限制位数，即不管年份多少位，前面均不补零\\n* MM\\t月份，至少两位数。如果不足两位，则前面补零。\\n* M\\t月份，允许一位数。\\n* dd\\t日期，至少两位数。如果不足两位，则前面补零。\\n* d\\t日期，允许一位数。\\n* HH\\t小时，至少两位数。如果不足两位，则前面补零。\\n* H\\t小时，允许一位数。\\n* mm\\t分钟，至少两位数。如果不足两位，则前面补零。\\n* m\\t分钟，允许一位数。\\n* ss\\t秒数，至少两位数。如果不足两位，则前面补零。\\n* s\\t秒数，允许一位数。\\n* ************************************\\n* isModal:是否是模态框，默认为true\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onCancel:function()\\n* hasCancel:true/false\\n* onOk:function(val):返回false不会关闭\\n* onCancel:function()\\n* validateType:\\n* errmsg:\\n\\n## 7.tips\\n吸附框。\\n```\\nsdk.tips(...)done()\\n```\\n* target:吸附元素\\n* content:内容\\n* position:up,down,left,right\\n* bgcolor:背景颜色\\n* color:字体颜色，默认黑色\\n* tipsMore:默认true，会销毁之前的。\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* close:关闭\\n\\n## 8.popPage\\n弹出页面。\\n```\\nsdk.popPage(...)done()\\n```\\n* title:标题|false\\n* content:显示的内容\\n* tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body\\n* url:显示的url\\n* text:显示的文本内容\\n* textStyle:显示的文本的style，默认是:\\\"padding:5px;text-align:center;font-size:20px;\\\"\\n* size:[width,height],默认[\\\"80%\\\",\\\"90%\\\"]\\n* min:[minWidth,minHeight]\\n* max:[maxWidth,maxHeight],默认[\\\"100%\\\",\\\"100%\\\"]\\n* width:\\n* height:\\n* shade:透明度，默认0.3\\n* contentCss:object对象，设置内容区域的css，默认{margin:\\\"0px\\\"}\\n* resizable:是否允许缩放大小，默认true\\n* isModal:是否是模态框，默认为true\\n* cornerClose:是否含有角落的关闭按钮，默认为true\\n* modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true\\n* scrollbar:页面body是否有滚动条，默认false\\n* initShow:是否显示，默认true\\n* show:function(showOrHide)显示,showOrHide为false时隐藏\\n* toTop:function()置顶\\n* minmax:是否含有最大和最小化按钮，默认为true\\n* btnsAlign:left,center,right;默认right\\n* buttonsThis:按钮回调函数的this指向，默认为当前handle.\\n* buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]\\n* buttonFoucs:[index]设置按钮重点，默认为[0]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onGetIFrame:function(iframe)\\n* onShadeClick:function()\\n* onShow:显示后的回调\\n* onClosed:function(){}关闭时的回调\\n* onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。\\n\\n## 9.widget().genButton\\n生成按钮。\\n```\\nsdk.widget().genButton(...)done()\\n```\\n* size:small(默认),normal,medium,large\\n* type:primary,info,success,warn,danger/error\\n* radius:是否圆角\\n* disabled:是否禁用\\n* content:按钮内容\\n* text:按钮文本\\n* class:\\n* href:点击跳转的连接\\n* attrs:\\n* click:function()\\n* done:function()返回按钮dom\\n\\n## 10.xsSimpleEdit\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"弹出层\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153206873741201000017'),('153207168698908000023',1,'2018-07-20 15:28:07',89,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsloader配置服务','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":15,\"minutes\":22,\"month\":6,\"seconds\":12,\"time\":1532071332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153207133240401000022\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsloader配置服务\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153207133240401000022'),('153257765333408000001',1,'2018-07-26 12:00:53',90,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsloader配置服务','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"1设置本地配置路径\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1设置本地配置路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.设置本地配置路径<\\/h2>\\n<ul data-source-line=\\\"2\\\">\\n<li>data-xsloader-conf：相对于当前页面地址的配置路径<\\/li>\\n<li>data-xsloader-conf2：相对于加载器地址的配置路径。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2设置入口脚本文件\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2设置入口脚本文件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.设置入口脚本文件<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>data-xsloader-main：用于手动指定main.getPath()的返回值，相对于当前页面地址。<\\/li>\\n<li>默认为：./main/当前网页名.js<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3配置格式\\\" data-source-line=\\\"9\\\"><a class=\\\"anchor\\\" href=\\\"#3配置格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.配置格式<\\/h2>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\">{\\n\\tproperties:{},\\n\\tmain:{\\n\\t\\tname:<span class=\\\"hljs-string\\\">\\\"main\\\"<\\/span>,<span class=\\\"hljs-comment\\\">//入口模块名，默认\\\"main\\\",<\\/span>\\n\\t\\tgetPath:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{<span class=\\\"hljs-comment\\\">//获取主模块的路径，默认为\\\"./main/当前网页名.js\\\"<\\/span>\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">return<\\/span> dataMain || <span class=\\\"hljs-string\\\">\\\"./main/当前网页名.js\\\"<\\/span>;\\n\\t\\t},\\n\\t\\tlocalConfigVar:<span class=\\\"hljs-string\\\">\\\"lconfig\\\"<\\/span>,<span class=\\\"hljs-comment\\\">//应用配置的window变量名称<\\/span>\\n\\t\\tglobalConfigVar:<span class=\\\"hljs-string\\\">\\\"gconfig\\\"<\\/span>,<span class=\\\"hljs-comment\\\">//服务端配置的window变量名称,<\\/span>\\n\\t\\tbefore:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\t\\t\\t<span class=\\\"hljs-built_in\\\">console<\\/span>.log(<span class=\\\"hljs-string\\\">\\\"before:\\\"<\\/span> + name);\\n\\t\\t},\\n\\t\\tafter:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\t\\t\\t<span class=\\\"hljs-built_in\\\">console<\\/span>.log(<span class=\\\"hljs-string\\\">\\\"after:\\\"<\\/span> + name);\\n\\t\\t}\\n\\t},\\n\\tservice:{\\n\\t\\tconfUrl:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,<span class=\\\"hljs-comment\\\">//服务端配置地址，本地配置有效<\\/span>\\n\\t\\thasGlobal:<span class=\\\"hljs-literal\\\">false<\\/span>,<span class=\\\"hljs-comment\\\">//是否含有服务端的全局配置，默认false<\\/span>\\n\\t\\tresUrl:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,<span class=\\\"hljs-comment\\\">//(group:groupid:version)首选资源地址,get请求格式为添加参数m=encodeURIComponent(groupModule),<\\/span>\\n\\t\\tresUrls:[]<span class=\\\"hljs-comment\\\">//备用资源地址<\\/span>\\n\\t},\\n\\tchooseLoader:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">localConfig<\\/span>)<\\/span>{<span class=\\\"hljs-comment\\\">//返回一个configName；当此函数为service全局配置的函数时，localConfig为应用的配置对象;本地配置调用时，localConfig为null。<\\/span>\\n\\t\\t<span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-string\\\">\\\"configName\\\"<\\/span>;\\n\\t},\\n\\tloader:{\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"configName\\\"<\\/span>:{}\\n\\t}\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":15,\"minutes\":22,\"month\":6,\"seconds\":12,\"time\":1532071332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153207133240401000022\",\"markdown\":\"## 1.设置本地配置路径\\n- data-xsloader-conf：相对于当前页面地址的配置路径\\n- data-xsloader-conf2：相对于加载器地址的配置路径。\\n\\n## 2.设置入口脚本文件\\n- data-xsloader-main：用于手动指定main.getPath()的返回值，相对于当前页面地址。\\n- 默认为：./main/当前网页名.js\\n\\n## 3.配置格式\\n\\n```\\n{\\n\\tproperties:{},\\n\\tmain:{\\n\\t\\tname:\\\"main\\\",//入口模块名，默认\\\"main\\\",\\n\\t\\tgetPath:function(){//获取主模块的路径，默认为\\\"./main/当前网页名.js\\\"\\n\\t\\t\\treturn dataMain || \\\"./main/当前网页名.js\\\";\\n\\t\\t},\\n\\t\\tlocalConfigVar:\\\"lconfig\\\",//应用配置的window变量名称\\n\\t\\tglobalConfigVar:\\\"gconfig\\\",//服务端配置的window变量名称,\\n\\t\\tbefore:function(){\\n\\t\\t\\tconsole.log(\\\"before:\\\" + name);\\n\\t\\t},\\n\\t\\tafter:function(){\\n\\t\\t\\tconsole.log(\\\"after:\\\" + name);\\n\\t\\t}\\n\\t},\\n\\tservice:{\\n\\t\\tconfUrl:\\\"\\\",//服务端配置地址，本地配置有效\\n\\t\\thasGlobal:false,//是否含有服务端的全局配置，默认false\\n\\t\\tresUrl:\\\"\\\",//(group:groupid:version)首选资源地址,get请求格式为添加参数m=encodeURIComponent(groupModule),\\n\\t\\tresUrls:[]//备用资源地址\\n\\t},\\n\\tchooseLoader:function(localConfig){//返回一个configName；当此函数为service全局配置的函数时，localConfig为应用的配置对象;本地配置调用时，localConfig为null。\\n\\t\\treturn \\\"configName\\\";\\n\\t},\\n\\tloader:{\\n\\t\\t\\\"configName\\\":{}\\n\\t}\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsloader配置服务\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153207133240401000022'),('153259129076708000003',1,'2018-07-26 15:48:11',91,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259273708808000004',1,'2018-07-26 16:12:17',92,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259356774108000005',1,'2018-07-26 16:26:08',93,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>数据字段不用加表名首字母前缀<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】数据表必须主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li><\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 数据字段不用加表名首字母前缀\\n\\n## 3、表结构\\n- 【==强制==】数据表必须主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n-\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259526027108000001',1,'2018-07-26 16:54:20',94,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据字段不用加表名首字母前缀<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"32\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据字段不用加表名首字母前缀\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259539263408000002',1,'2018-07-26 16:56:33',95,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":6,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据字段不用加表名首字母前缀<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"32\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据字段不用加表名首字母前缀\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259551610408000003',1,'2018-07-26 16:58:36',96,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":7,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据字段不用加表名首字母前缀<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"24\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"33\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据字段不用加表名首字母前缀\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259558485508000004',1,'2018-07-26 16:59:45',97,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":8,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据表字段不用加表名首字母前缀。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"24\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"33\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据表字段不用加表名首字母前缀。\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)或count(主键id)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153259627840208000006',1,'2018-07-26 17:11:18',98,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Html与Css规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":1,\"month\":6,\"seconds\":45,\"time\":1532595705000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259570449801000005\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Html与Css规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1008,\"status\":1,\"type\":\"ARTICLE\"}','153259570449801000005'),('153259635632108000007',1,'2018-07-26 17:12:36',99,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Html与Css规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-html规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-html规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Html规范<\\/h1>\\n<h2 id=\\\"1-标签\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-标签\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、标签<\\/h2>\\n<ul data-source-line=\\\"4\\\">\\n<li>【<mark>强制<\\/mark>】自定义标签属性，必须以data-xs-开头，如data-xs-image。<\\/li>\\n<li>【<mark>强制<\\/mark>】常用标签属性先后顺序：id &gt; class &gt; 表单属性(如name,maxlength,required) &gt;  style  &gt; 内嵌事件监听(如onclick,onload)。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2-安全\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#2-安全\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、安全<\\/h2>\\n<ul data-source-line=\\\"8\\\">\\n<li>【<mark>强制<\\/mark>】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\">被禁止的方式：\\n<span class=\\\"hljs-keyword\\\">var<\\/span> content=...;\\n<span class=\\\"hljs-keyword\\\">var<\\/span> htmlStr=<span class=\\\"hljs-string\\\">\'&lt;div&gt;\'<\\/span>+content+<span class=\\\"hljs-string\\\">\'&lt;/div&gt;\'<\\/span>;\\nsomeDom.innerHTML=htmlStr;\\n\\n符合要求的方式：（jquery方式）\\n<span class=\\\"hljs-keyword\\\">var<\\/span> content=...;\\n<span class=\\\"hljs-keyword\\\">var<\\/span> <span class=\\\"hljs-keyword\\\">div<\\/span>=$(<span class=\\\"hljs-string\\\">\'&lt;div&gt;\'<\\/span>,{\\n    text:content\\n});\\n$(someDom).empty().append(<span class=\\\"hljs-keyword\\\">div<\\/span>);<\\/code><\\/pre><h1 id=\\\"二-css规范\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#二-css规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、Css规范<\\/h1>\\n<h2 id=\\\"1-命名方案\\\" data-source-line=\\\"27\\\"><a class=\\\"anchor\\\" href=\\\"#1-命名方案\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、命名方案<\\/h2>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":1,\"month\":6,\"seconds\":45,\"time\":1532595705000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259570449801000005\",\"markdown\":\"# 一、Html规范\\n\\n## 1、标签\\n- 【==强制==】自定义标签属性，必须以data-xs-开头，如data-xs-image。\\n- 【==强制==】常用标签属性先后顺序：id > class > 表单属性(如name,maxlength,required) >  style  > 内嵌事件监听(如onclick,onload)。\\n\\n## 2、安全\\n- 【==强制==】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：\\n\\n```\\n被禁止的方式：\\nvar content=...;\\nvar htmlStr=\'<div>\'+content+\'<\\/div>\';\\nsomeDom.innerHTML=htmlStr;\\n\\n符合要求的方式：（jquery方式）\\nvar content=...;\\nvar div=$(\'<div>\',{\\n    text:content\\n});\\n$(someDom).empty().append(div);\\n```\\n\\n\\n# 二、Css规范\\n\\n## 1、命名方案\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Html与Css规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1008,\"status\":1,\"type\":\"ARTICLE\"}','153259570449801000005'),('153259648962008000008',1,'2018-07-26 17:14:50',100,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Html与Css规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-html规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-html规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Html规范<\\/h1>\\n<h2 id=\\\"1-标签\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-标签\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、标签<\\/h2>\\n<ul data-source-line=\\\"4\\\">\\n<li>【<mark>强制<\\/mark>】自定义标签属性，必须以data-xs-开头，如data-xs-image。<\\/li>\\n<li>【<mark>强制<\\/mark>】常用标签属性先后顺序：id &gt; class &gt; 表单属性(如name,maxlength,required) &gt;  style  &gt; 内嵌事件监听(如onclick,onload)。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2-安全\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#2-安全\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、安全<\\/h2>\\n<ul data-source-line=\\\"8\\\">\\n<li>【<mark>强制<\\/mark>】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\">被禁止的方式：\\n<span class=\\\"hljs-keyword\\\">var<\\/span> content=...;\\n<span class=\\\"hljs-keyword\\\">var<\\/span> htmlStr=<span class=\\\"hljs-string\\\">\'&lt;div&gt;\'<\\/span>+content+<span class=\\\"hljs-string\\\">\'&lt;/div&gt;\'<\\/span>;\\nsomeDom.innerHTML=htmlStr;\\n\\n符合要求的方式：（jquery方式）\\n<span class=\\\"hljs-keyword\\\">var<\\/span> content=...;\\n<span class=\\\"hljs-keyword\\\">var<\\/span> <span class=\\\"hljs-keyword\\\">div<\\/span>=$(<span class=\\\"hljs-string\\\">\'&lt;div&gt;\'<\\/span>,{\\n    text:content\\n});\\n$(someDom).empty().append(<span class=\\\"hljs-keyword\\\">div<\\/span>);<\\/code><\\/pre><h1 id=\\\"二-css规范\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#二-css规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、Css规范<\\/h1>\\n<h2 id=\\\"1-命名方案\\\" data-source-line=\\\"27\\\"><a class=\\\"anchor\\\" href=\\\"#1-命名方案\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、命名方案<\\/h2>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":1,\"month\":6,\"seconds\":45,\"time\":1532595705000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259570449801000005\",\"markdown\":\"# 一、Html规范\\n\\n## 1、标签\\n- 【==强制==】自定义标签属性，必须以data-xs-开头，如data-xs-image。\\n- 【==强制==】常用标签属性先后顺序：id > class > 表单属性(如name,maxlength,required) >  style  > 内嵌事件监听(如onclick,onload)。\\n\\n## 2、安全\\n- 【==强制==】当存在变量时，禁止通过字符串拼接的方式生成html代码，如：\\n\\n```\\n被禁止的方式：\\nvar content=...;\\nvar htmlStr=\'\'+content+\'\';\\nsomeDom.innerHTML=htmlStr;\\n\\n符合要求的方式：（jquery方式）\\nvar content=...;\\nvar div=$(\'\',{\\n    text:content\\n});\\n$(someDom).empty().append(div);\\n```\\n\\n\\n# 二、Css规范\\n\\n## 1、命名方案\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Html与Css规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1008,\"status\":1,\"type\":\"ARTICLE\"}','153259570449801000005'),('153259775315408000010',1,'2018-07-26 17:35:53',101,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153259798156808000011',1,'2018-07-26 17:39:42',102,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<p data-source-line=\\\"6\\\">以下基于Mybatis，其他数据层框架类似。<\\/p>\\n<ul data-source-line=\\\"7\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"13\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"15\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"24\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"27\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"29\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码,必须，int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n以下基于Mybatis，其他数据层框架类似。\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码,必须，int型，0表示成功，其他值表示失败\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153259817621508000014',1,'2018-07-26 17:42:56',103,'ArticleWithBLOBs','文章','DELTET','超级管理员','开发环境','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":40,\"month\":6,\"seconds\":54,\"time\":1532598054000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259805389901000012\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"开发环境\",\"projectId\":\"153188636499907000002\",\"sequence\":1010,\"status\":1,\"type\":\"ARTICLE\"}','153259805389901000012'),('153265651733208000001',1,'2018-07-27 09:55:17',104,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":11,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据表字段不用加表名首字母前缀。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"17\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"24\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"33\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据表字段不用加表名首字母前缀。\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153265657324908000002',1,'2018-07-27 09:56:13',105,'Module','模块','UPDATE','超级管理员','技术规范','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":39,\"month\":6,\"seconds\":8,\"time\":1532590748000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259074763509000001\",\"name\":\"技术规范\",\"projectId\":\"153188636499907000002\",\"remark\":\"\",\"sequence\":5,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153259074763509000001'),('153265666510308000003',1,'2018-07-27 09:57:45',106,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":13,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<p data-source-line=\\\"4\\\">【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/p>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><h2 id=\\\"2-命名\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"11\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据表字段不用加表名首字母前缀。<\\/li>\\n<li>【<mark>强制<\\/mark>】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"17\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"18\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"25\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"34\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据表字段不用加表名首字母前缀。\\n- 【==强制==】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153265671558308000004',1,'2018-07-27 09:58:36',107,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":100,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153265691525808000005',1,'2018-07-27 10:01:55',108,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<p data-source-line=\\\"6\\\">以下基于Mybatis，其他数据层框架类似。<\\/p>\\n<ul data-source-line=\\\"7\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"13\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"15\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"24\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"27\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"29\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"38\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"40\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n以下基于Mybatis，其他数据层框架类似。\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153265829659808000006',1,'2018-07-27 10:24:57',109,'ArticleWithBLOBs','文章','UPDATE','超级管理员','开发环境','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":43,\"month\":6,\"seconds\":43,\"time\":1532598223000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259822317101000015\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"开发环境\",\"projectId\":\"153188636499907000002\",\"sequence\":1010,\"status\":1,\"type\":\"ARTICLE\"}','153259822317101000015'),('153292252178008000007',1,'2018-07-30 11:48:42',110,'Module','模块','UPDATE','超级管理员','JS Sdk帮助文档','{\"canDelete\":1,\"category\":\"核心功能,UI功能\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":12,\"minutes\":5,\"month\":6,\"seconds\":40,\"time\":1531886740000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188673971709000006\",\"name\":\"JS Sdk帮助文档\",\"projectId\":\"153188636499907000002\",\"remark\":\"请看**文章**\",\"sequence\":2,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153188673971709000006'),('153292380353508000008',1,'2018-07-30 12:10:04',111,'ArticleWithBLOBs','文章','UPDATE','超级管理员','项目骨架','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":12,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":44,\"month\":6,\"seconds\":2,\"time\":1532598242000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259824154401000016\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"项目骨架\",\"projectId\":\"153188636499907000002\",\"sequence\":1011,\"status\":1,\"type\":\"ARTICLE\"}','153259824154401000016'),('153292676412008000009',1,'2018-07-30 12:59:24',112,'ArticleWithBLOBs','文章','UPDATE','超级管理员','项目骨架','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":12,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-外包组\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-外包组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、外包组<\\/h1>\\n<h1 id=\\\"二-产品研发组\\\" data-source-line=\\\"4\\\"><a class=\\\"anchor\\\" href=\\\"#二-产品研发组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、产品研发组<\\/h1>\\n<h2 id=\\\"1-archetype-spring-boot-web-版本201\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#1-archetype-spring-boot-web-版本201\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、archetype-spring-boot-web 版本:2.0.1<\\/h2>\\n<p data-source-line=\\\"7\\\"><strong>介绍<\\/strong>：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x<\\/p>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":44,\"month\":6,\"seconds\":2,\"time\":1532598242000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259824154401000016\",\"markdown\":\"# 一、外包组\\n\\n\\n# 二、产品研发组\\n\\n## 1、archetype-spring-boot-web 版本:2.0.1\\n**介绍**：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"项目骨架\",\"projectId\":\"153188636499907000002\",\"sequence\":1011,\"status\":1,\"type\":\"ARTICLE\"}','153259824154401000016'),('153292682916308000010',1,'2018-07-30 13:00:29',113,'ArticleWithBLOBs','文章','UPDATE','超级管理员','项目骨架','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":13,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-外包组\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-外包组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、外包组<\\/h1>\\n<h1 id=\\\"二-产品研发组\\\" data-source-line=\\\"4\\\"><a class=\\\"anchor\\\" href=\\\"#二-产品研发组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、产品研发组<\\/h1>\\n<h2 id=\\\"1-archetype-spring-boot-web-版本201\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#1-archetype-spring-boot-web-版本201\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、archetype-spring-boot-web 版本:2.0.1<\\/h2>\\n<p data-source-line=\\\"7\\\"><strong>介绍<\\/strong>：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。<\\/p>\\n<ul data-source-line=\\\"8\\\">\\n<li>添加骨架<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">groupId<\\/span>:<span class=\\\"hljs-meta\\\">cn<\\/span>.xishan<span class=\\\"hljs-meta\\\">.global<\\/span>\\n<span class=\\\"hljs-symbol\\\">artifactId<\\/span>:archetype-spring-<span class=\\\"hljs-keyword\\\">boot-web\\n<\\/span><span class=\\\"hljs-symbol\\\">version<\\/span>:<span class=\\\"hljs-number\\\">2<\\/span>.<span class=\\\"hljs-number\\\">0<\\/span>.<span class=\\\"hljs-number\\\">1<\\/span>-SNAPSHOT<\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":44,\"month\":6,\"seconds\":2,\"time\":1532598242000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259824154401000016\",\"markdown\":\"# 一、外包组\\n\\n\\n# 二、产品研发组\\n\\n## 1、archetype-spring-boot-web 版本:2.0.1\\n**介绍**：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。\\n- 添加骨架\\n\\n```\\ngroupId:cn.xishan.global\\nartifactId:archetype-spring-boot-web\\nversion:2.0.1-SNAPSHOT\\n```\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"项目骨架\",\"projectId\":\"153188636499907000002\",\"sequence\":1011,\"status\":1,\"type\":\"ARTICLE\"}','153259824154401000016'),('153310986580308000011',1,'2018-08-01 15:51:06',114,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据表格','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":10,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"1\\\">数据表格API,最后必须调用done()方法。<\\/p>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">通过\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">attr<\\/span>:value\\n})<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n或\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>()<span class=\\\"hljs-selector-class\\\">.attr<\\/span>(<span class=\\\"hljs-selector-tag\\\">value<\\/span>)<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n调用<\\/code><\\/pre><h1 id=\\\"参数或函数说明\\\" data-source-line=\\\"12\\\"><a class=\\\"anchor\\\" href=\\\"#参数或函数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>参数或函数说明：<\\/h1>\\n<h2 id=\\\"1cols\\\" data-source-line=\\\"14\\\"><a class=\\\"anchor\\\" href=\\\"#1cols\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.cols<\\/h2>\\n<p data-source-line=\\\"15\\\">【Array】表格列。<\\/p>\\n<ul data-source-line=\\\"17\\\">\\n<li>title：标题名称|dom|function(col)<\\/li>\\n<li>titleColor：css颜色值|function(col)<\\/li>\\n<li>sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field<\\/li>\\n<li>sortable：是否排序|function(col),会显示排序按钮<\\/li>\\n<li>fixed：left|right|function(col)，固定列<\\/li>\\n<li>initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序<\\/li>\\n<li>width：宽度值|function(col)<\\/li>\\n<li>edit：text|function(col),编辑项,isText为true时有效<\\/li>\\n<li>align：center|left|right|function(col)，设置标题的对齐方式<\\/li>\\n<li>checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列<\\/li>\\n<li>notToggle：boolean|function(col)，是否禁止拖动表格列<\\/li>\\n<li>attrTitle：boolean|function()，默认为true，对于文本是否添加title属性<\\/li>\\n<li>alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的<\\/li>\\n<li>isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本<\\/li>\\n<li>field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。<\\/li>\\n<li>color：css颜色值|function(item,col,index,pageInfo)<\\/li>\\n<li>enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2url\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.url<\\/h2>\\n<p data-source-line=\\\"36\\\">访问的地址。<\\/p>\\n<h2 id=\\\"3method\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#3method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.method<\\/h2>\\n<p data-source-line=\\\"39\\\">访问的方法，默认post。<\\/p>\\n<h2 id=\\\"4data\\\" data-source-line=\\\"41\\\"><a class=\\\"anchor\\\" href=\\\"#4data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.data<\\/h2>\\n<p data-source-line=\\\"42\\\">静态数据[{}]。<\\/p>\\n<h2 id=\\\"5container\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#5container\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.container<\\/h2>\\n<p data-source-line=\\\"45\\\">存放表格的容器，选择器或dom对象。<\\/p>\\n<h2 id=\\\"6width\\\" data-source-line=\\\"47\\\"><a class=\\\"anchor\\\" href=\\\"#6width\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.width<\\/h2>\\n<p data-source-line=\\\"48\\\">表格宽度。<\\/p>\\n<h2 id=\\\"7height\\\" data-source-line=\\\"50\\\"><a class=\\\"anchor\\\" href=\\\"#7height\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.height<\\/h2>\\n<p data-source-line=\\\"51\\\">表格高度|full-差值,默认full-0。<\\/p>\\n<h2 id=\\\"8haspage\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#8haspage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.hasPage<\\/h2>\\n<p data-source-line=\\\"54\\\">是否有分页,默认true。<\\/p>\\n<h2 id=\\\"9sortmulti\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#9sortmulti\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.sortMulti<\\/h2>\\n<p data-source-line=\\\"57\\\">是否支持多列同时排序,默认false。<\\/p>\\n<h2 id=\\\"10params\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#10params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.params<\\/h2>\\n<p data-source-line=\\\"60\\\">查询参数，添加根参数。<\\/p>\\n<h2 id=\\\"11tableoptionparams\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#11tableoptionparams\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.tableOptionParams<\\/h2>\\n<p data-source-line=\\\"63\\\">用于添加到query中。<\\/p>\\n<h2 id=\\\"12usetableoptionqueryarray\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#12usetableoptionqueryarray\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.useTableOptionQueryArray<\\/h2>\\n<p data-source-line=\\\"66\\\">默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。<\\/p>\\n<h2 id=\\\"13bindform\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#13bindform\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.bindForm<\\/h2>\\n<p data-source-line=\\\"69\\\">[绑定form对象或选择器,domForClick|function(listener)]。<\\/p>\\n<h2 id=\\\"14size\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#14size\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.size<\\/h2>\\n<p data-source-line=\\\"72\\\">表格大小small|normal|large。<\\/p>\\n<h2 id=\\\"15nottoggle\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#15nottoggle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.notToggle<\\/h2>\\n<p data-source-line=\\\"75\\\">是否禁止拖动表格列,设置表格默认值，会改变列的默认值。<\\/p>\\n<h2 id=\\\"16even\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#16even\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.even<\\/h2>\\n<p data-source-line=\\\"78\\\">是否开启隔行背景,默认true。<\\/p>\\n<h2 id=\\\"17attrtitle\\\" data-source-line=\\\"80\\\"><a class=\\\"anchor\\\" href=\\\"#17attrtitle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.attrTitle<\\/h2>\\n<p data-source-line=\\\"81\\\">对于文本是否添加title属性，默认为false。<\\/p>\\n<h2 id=\\\"18oncelleditlistener\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#18oncelleditlistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.onCellEditListener<\\/h2>\\n<p data-source-line=\\\"84\\\">单元格内容被编辑后的监听函数。<\\/p>\\n<pre data-source-line=\\\"86\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,name,newValue,oldValue,row,col)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"19beforerequest\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#19beforerequest\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.beforeRequest<\\/h2>\\n<p data-source-line=\\\"91\\\">网络请求之前的回调。<\\/p>\\n<pre data-source-line=\\\"93\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(params)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"20afterajaxok\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#20afterajaxok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.afterAjaxOk<\\/h2>\\n<p data-source-line=\\\"98\\\">ajax请求成功后的回调,在onLoadCompleteListener之前。<\\/p>\\n<pre data-source-line=\\\"100\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,okcallback,errcallback)<\\/span><\\/span>{\\n    okcallback(json);\\n}<\\/code><\\/pre><h2 id=\\\"21onloadcompletelistener\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#21onloadcompletelistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.onLoadCompleteListener<\\/h2>\\n<p data-source-line=\\\"107\\\">加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,loadCount,pageInfo)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"22beforeflush\\\" data-source-line=\\\"113\\\"><a class=\\\"anchor\\\" href=\\\"#22beforeflush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.beforeFlush<\\/h2>\\n<p data-source-line=\\\"114\\\">设置刷之前的回调。<\\/p>\\n<h2 id=\\\"23response_code\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#23response_code\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.response_code<\\/h2>\\n<p data-source-line=\\\"117\\\">默认code，结果码。<\\/p>\\n<h2 id=\\\"24response_desc\\\" data-source-line=\\\"119\\\"><a class=\\\"anchor\\\" href=\\\"#24response_desc\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>24.response_desc<\\/h2>\\n<p data-source-line=\\\"120\\\">默认desc，描述。<\\/p>\\n<h2 id=\\\"25response_count\\\" data-source-line=\\\"122\\\"><a class=\\\"anchor\\\" href=\\\"#25response_count\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>25.response_count<\\/h2>\\n<p data-source-line=\\\"123\\\">默认rs.total,总数。<\\/p>\\n<h2 id=\\\"26response_data\\\" data-source-line=\\\"125\\\"><a class=\\\"anchor\\\" href=\\\"#26response_data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>26.response_data<\\/h2>\\n<p data-source-line=\\\"126\\\">默认rs.data,数据，类为数组。<\\/p>\\n<h2 id=\\\"27flushby\\\" data-source-line=\\\"128\\\"><a class=\\\"anchor\\\" href=\\\"#27flushby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>27.flushBy<\\/h2>\\n<p data-source-line=\\\"129\\\">点击刷新的按钮选择器。<\\/p>\\n<h2 id=\\\"28flushbychange\\\" data-source-line=\\\"131\\\"><a class=\\\"anchor\\\" href=\\\"#28flushbychange\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>28.flushByChange<\\/h2>\\n<p data-source-line=\\\"132\\\">输入组件内容改变时刷新表格，[选择器]。<\\/p>\\n<h2 id=\\\"29flush\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#29flush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>29.flush<\\/h2>\\n<p data-source-line=\\\"135\\\">function(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。<\\/p>\\n<h2 id=\\\"30getselectedrows\\\" data-source-line=\\\"137\\\"><a class=\\\"anchor\\\" href=\\\"#30getselectedrows\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>30.getSelectedRows<\\/h2>\\n<p data-source-line=\\\"138\\\">function()获取所有选中行的数据。<\\/p>\\n<h2 id=\\\"31setcontent\\\" data-source-line=\\\"140\\\"><a class=\\\"anchor\\\" href=\\\"#31setcontent\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>31.setContent<\\/h2>\\n<p data-source-line=\\\"141\\\">function(row,col,content)设置内容。<\\/p>\\n<h2 id=\\\"32currentpagesize\\\" data-source-line=\\\"143\\\"><a class=\\\"anchor\\\" href=\\\"#32currentpagesize\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>32.currentPageSize<\\/h2>\\n<p data-source-line=\\\"144\\\">function()获取当前页数据行数。<\\/p>\\n<h2 id=\\\"33getlastpageinfo\\\" data-source-line=\\\"146\\\"><a class=\\\"anchor\\\" href=\\\"#33getlastpageinfo\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>33.getLastPageInfo<\\/h2>\\n<p data-source-line=\\\"147\\\">function()获取之前的页面信息。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":48,\"month\":6,\"seconds\":30,\"time\":1532065710000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206570977301000011\",\"markdown\":\"数据表格API,最后必须调用done()方法。\\n\\n```\\n通过\\nsdk.table({\\n    attr:value\\n}).done();\\n或\\nsdk.table().attr(value).done();\\n调用\\n```\\n# 参数或函数说明：\\n\\n## 1.cols\\n【Array】表格列。\\n\\n- title：标题名称|dom|function(col)\\n- titleColor：css颜色值|function(col)\\n- sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field\\n- sortable：是否排序|function(col),会显示排序按钮\\n- fixed：left|right|function(col)，固定列\\n- initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序\\n- width：宽度值|function(col)\\n- edit：text|function(col),编辑项,isText为true时有效\\n- align：center|left|right|function(col)，设置标题的对齐方式\\n- checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列\\n- notToggle：boolean|function(col)，是否禁止拖动表格列\\n- attrTitle：boolean|function()，默认为true，对于文本是否添加title属性\\n- alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的\\n- isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本\\n- field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。\\n- color：css颜色值|function(item,col,index,pageInfo)\\n- enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。\\n\\n## 2.url\\n访问的地址。\\n\\n## 3.method\\n访问的方法，默认post。\\n\\n## 4.data\\n静态数据[{}]。\\n\\n## 5.container\\n存放表格的容器，选择器或dom对象。\\n\\n## 6.width\\n表格宽度。\\n\\n## 7.height\\n表格高度|full-差值,默认full-0。\\n\\n## 8.hasPage\\n是否有分页,默认true。\\n\\n## 9.sortMulti\\n是否支持多列同时排序,默认false。\\n\\n## 10.params\\n查询参数，添加根参数。\\n\\n## 11.tableOptionParams\\n用于添加到query中。\\n\\n## 12.useTableOptionQueryArray\\n默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。\\n\\n## 13.bindForm\\n[绑定form对象或选择器,domForClick|function(listener)]。\\n\\n## 14.size\\n表格大小small|normal|large。\\n\\n## 15.notToggle\\n是否禁止拖动表格列,设置表格默认值，会改变列的默认值。\\n\\n## 16.even\\n是否开启隔行背景,默认true。\\n\\n## 17.attrTitle\\n对于文本是否添加title属性，默认为false。\\n\\n## 18.onCellEditListener\\n单元格内容被编辑后的监听函数。\\n\\n```\\nfunction(data,name,newValue,oldValue,row,col)\\n```\\n\\n## 19.beforeRequest\\n网络请求之前的回调。\\n\\n```\\nfunction(params)\\n```\\n\\n## 20.afterAjaxOk\\najax请求成功后的回调,在onLoadCompleteListener之前。\\n\\n```\\nfunction(json,okcallback,errcallback){\\n    okcallback(json);\\n}\\n```\\n\\n## 21.onLoadCompleteListener\\n加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。\\n\\n```\\nfunction(json,loadCount,pageInfo)\\n```\\n\\n## 22.beforeFlush\\n设置刷之前的回调。\\n\\n## 23.response_code\\n默认code，结果码。\\n\\n## 24.response_desc\\n默认desc，描述。\\n\\n## 25.response_count\\n默认rs.total,总数。\\n\\n## 26.response_data\\n默认rs.data,数据，类为数组。\\n\\n## 27.flushBy\\n点击刷新的按钮选择器。\\n\\n## 28.flushByChange\\n输入组件内容改变时刷新表格，[选择器]。\\n\\n## 29.flush\\nfunction(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。\\n\\n## 30.getSelectedRows\\nfunction()获取所有选中行的数据。\\n\\n## 31.setContent\\nfunction(row,col,content)设置内容。\\n\\n## 32.currentPageSize\\nfunction()获取当前页数据行数。\\n\\n## 33.getLastPageInfo\\nfunction()获取之前的页面信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"数据表格\",\"projectId\":\"153188636499907000002\",\"sequence\":1003,\"status\":1,\"type\":\"ARTICLE\"}','153206570977301000011'),('153317130899508000012',1,'2018-08-02 08:55:09',115,'Module','模块','UPDATE','超级管理员','JS Sdk帮助文档','{\"canDelete\":1,\"category\":\"核心功能,UI功能\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":12,\"minutes\":5,\"month\":6,\"seconds\":40,\"time\":1531886740000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188673971709000006\",\"name\":\"JS Sdk帮助文档\",\"projectId\":\"153188636499907000002\",\"remark\":\"请看**文章**,以\\\"window.\\\"开头的表示全局访问、否则表示sdk访问的方式。\",\"sequence\":2,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153188673971709000006'),('153317148666508000014',1,'2018-08-02 08:58:07',116,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153317151630508000015',1,'2018-08-02 08:58:36',117,'ArticleWithBLOBs','文章','UPDATE','超级管理员','弹出层','{\"brief\":\"包括弹出页面、alert、confirm、loading、tips等\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"1loading\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1loading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.loading<\\/h2>\\n<p data-source-line=\\\"2\\\">加载框。<\\/p>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.loading<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"6\\\">\\n<li>type:default,star,stars<\\/li>\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2showtoast\\\" data-source-line=\\\"14\\\"><a class=\\\"anchor\\\" href=\\\"#2showtoast\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.showToast()<\\/h2>\\n<p data-source-line=\\\"15\\\">function(text)直接弹出文本消息。<\\/p>\\n<h2 id=\\\"3toast\\\" data-source-line=\\\"17\\\"><a class=\\\"anchor\\\" href=\\\"#3toast\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.toast<\\/h2>\\n<p data-source-line=\\\"18\\\">弹出气泡消息。<\\/p>\\n<pre data-source-line=\\\"20\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.toast<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"23\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<\\/ul>\\n<h2 id=\\\"4alert\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#4alert\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.alert<\\/h2>\\n<p data-source-line=\\\"33\\\">提示框。<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.alert<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"37\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onOk:function(),返回false不会关闭<\\/li>\\n<li>okLabel：<\\/li>\\n<\\/ul>\\n<h2 id=\\\"5confirm\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#5confirm\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.confirm<\\/h2>\\n<p data-source-line=\\\"50\\\">确认框。<\\/p>\\n<pre data-source-line=\\\"51\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.confirm<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"54\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onOk:function(),返回false不会关闭<\\/li>\\n<li>onCancel:function(),返回false不会关闭<\\/li>\\n<li>okLabel:<\\/li>\\n<li>cancelLabel：<\\/li>\\n<\\/ul>\\n<h2 id=\\\"6popinput\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#6popinput\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.popInput<\\/h2>\\n<p data-source-line=\\\"69\\\">弹出输入框。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.popInput<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"73\\\">\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>title:标题|false<\\/li>\\n<li>initValue:初始值<\\/li>\\n<li>maxlength:最大长度<\\/li>\\n<li>inputType:text,textarea,password,date,datetime,time<\\/li>\\n<li>range:true|fale,对date,datetime,time有效<\\/li>\\n<li>rangeSP:范围分隔符号,默认空格<\\/li>\\n<\\/ul>\\n<hr>\\n<ul data-source-line=\\\"82\\\">\\n<li>format:时间日期格式:默认值：yyyy-MM-dd<\\/li>\\n<li>yyyy\\t年份，至少四位数。如果不足四位，则前面补零<\\/li>\\n<li>y\\t年份，不限制位数，即不管年份多少位，前面均不补零<\\/li>\\n<li>MM\\t月份，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>M\\t月份，允许一位数。<\\/li>\\n<li>dd\\t日期，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>d\\t日期，允许一位数。<\\/li>\\n<li>HH\\t小时，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>H\\t小时，允许一位数。<\\/li>\\n<li>mm\\t分钟，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>m\\t分钟，允许一位数。<\\/li>\\n<li>ss\\t秒数，至少两位数。如果不足两位，则前面补零。<\\/li>\\n<li>s\\t秒数，允许一位数。<\\/li>\\n<\\/ul>\\n<hr>\\n<ul data-source-line=\\\"96\\\">\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onClosed:关闭时的回调<\\/li>\\n<li>onCancel:function()<\\/li>\\n<li>hasCancel:true/false<\\/li>\\n<li>onOk:function(val):返回false不会关闭<\\/li>\\n<li>onCancel:function()<\\/li>\\n<li>validateType:<\\/li>\\n<li>errmsg:<\\/li>\\n<\\/ul>\\n<h2 id=\\\"7tips\\\" data-source-line=\\\"107\\\"><a class=\\\"anchor\\\" href=\\\"#7tips\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.tips<\\/h2>\\n<p data-source-line=\\\"108\\\">吸附框。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.tips<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"112\\\">\\n<li>target:吸附元素<\\/li>\\n<li>content:内容<\\/li>\\n<li>position:up,down,left,right<\\/li>\\n<li>bgcolor:背景颜色<\\/li>\\n<li>color:字体颜色，默认黑色<\\/li>\\n<li>tipsMore:默认true，会销毁之前的。<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>close:关闭<\\/li>\\n<\\/ul>\\n<h2 id=\\\"8poppage\\\" data-source-line=\\\"122\\\"><a class=\\\"anchor\\\" href=\\\"#8poppage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.popPage<\\/h2>\\n<p data-source-line=\\\"123\\\">弹出页面。<\\/p>\\n<pre data-source-line=\\\"124\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.popPage<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"127\\\">\\n<li>title:标题|false<\\/li>\\n<li>content:显示的内容<\\/li>\\n<li>tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body<\\/li>\\n<li>url:显示的url<\\/li>\\n<li>text:显示的文本内容<\\/li>\\n<li>textStyle:显示的文本的style，默认是:\\\"padding:5px;text-align:center;font-size:20px;\\\"<\\/li>\\n<li>size:[width,height],默认[\\\"80%\\\",\\\"90%\\\"]<\\/li>\\n<li>min:[minWidth,minHeight]<\\/li>\\n<li>max:[maxWidth,maxHeight],默认[\\\"100%\\\",\\\"100%\\\"]<\\/li>\\n<li>width:<\\/li>\\n<li>height:<\\/li>\\n<li>shade:透明度，默认0.3<\\/li>\\n<li>contentCss:object对象，设置内容区域的css，默认{margin:\\\"0px\\\"}<\\/li>\\n<li>resizable:是否允许缩放大小，默认true<\\/li>\\n<li>isModal:是否是模态框，默认为true<\\/li>\\n<li>cornerClose:是否含有角落的关闭按钮，默认为true<\\/li>\\n<li>modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true<\\/li>\\n<li>scrollbar:页面body是否有滚动条，默认false<\\/li>\\n<li>initShow:是否显示，默认true<\\/li>\\n<li>show:function(showOrHide)显示,showOrHide为false时隐藏<\\/li>\\n<li>toTop:function()置顶<\\/li>\\n<li>minmax:是否含有最大和最小化按钮，默认为true<\\/li>\\n<li>btnsAlign:left,center,right;默认right<\\/li>\\n<li>buttonsThis:按钮回调函数的this指向，默认为当前handle.<\\/li>\\n<li>buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]<\\/li>\\n<li>buttonFoucs:[index]设置按钮重点，默认为[0]<\\/li>\\n<li>anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake<\\/li>\\n<li>position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]<\\/li>\\n<li>closeTime:自动关闭的时间，毫秒,默认0不会关闭<\\/li>\\n<li>onGetIFrame:function(iframe)<\\/li>\\n<li>onShadeClick:function()<\\/li>\\n<li>onShow:显示后的回调<\\/li>\\n<li>onClosed:function(){}关闭时的回调<\\/li>\\n<li>onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"9widgetgenbutton\\\" data-source-line=\\\"162\\\"><a class=\\\"anchor\\\" href=\\\"#9widgetgenbutton\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.widget().genButton<\\/h2>\\n<p data-source-line=\\\"163\\\">生成按钮。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.widget<\\/span>()<span class=\\\"hljs-selector-class\\\">.genButton<\\/span>(...)<span class=\\\"hljs-selector-class\\\">.done<\\/span>()<\\/code><\\/pre><ul data-source-line=\\\"167\\\">\\n<li>size:small(默认),normal,medium,large<\\/li>\\n<li>type:primary,info,success,warn,danger/error<\\/li>\\n<li>radius:是否圆角<\\/li>\\n<li>disabled:是否禁用<\\/li>\\n<li>content:按钮内容<\\/li>\\n<li>text:按钮文本<\\/li>\\n<li>class:<\\/li>\\n<li>href:点击跳转的连接<\\/li>\\n<li>attrs:<\\/li>\\n<li>click:function()<\\/li>\\n<li>done:function()返回按钮dom<\\/li>\\n<\\/ul>\\n<h2 id=\\\"10xssimpleedit\\\" data-source-line=\\\"179\\\"><a class=\\\"anchor\\\" href=\\\"#10xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.xsSimpleEdit<\\/h2>\\n<ul data-source-line=\\\"180\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":14,\"minutes\":38,\"month\":6,\"seconds\":57,\"time\":1532068737000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206873741201000017\",\"markdown\":\"## 1.loading\\n加载框。\\n```\\nsdk.loading(...).done()\\n```\\n* type:default,star,stars\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onShow:显示后的回调\\n* onClosed:关闭时的回调\\n\\n## 2.showToast()\\nfunction(text)直接弹出文本消息。\\n\\n## 3.toast\\n弹出气泡消息。\\n\\n```\\nsdk.toast(...).done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认2000,0不会关闭\\n* content:显示的内容\\n* onShow:显示后的回调\\n* onClosed:关闭时的回调\\n\\n## 4.alert\\n提示框。\\n```\\nsdk.alert(...).done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* type:default(无表情),warn(警告),success,error,question,lock,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* title:标题|false\\n* content:显示的内容\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onOk:function(),返回false不会关闭\\n* okLabel：\\n\\n## 5.confirm\\n确认框。\\n```\\nsdk.confirm(...).done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* type:default(无表情),warn,success,error/danger,question,lock,fail,unhappy,smile\\n* isModal:是否是模态框，默认为true\\n* title:标题|false\\n* content:显示的内容\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onOk:function(),返回false不会关闭\\n* onCancel:function(),返回false不会关闭\\n* okLabel:\\n* cancelLabel：\\n\\n## 6.popInput\\n弹出输入框。\\n```\\nsdk.popInput(...).done()\\n```\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* title:标题|false\\n* initValue:初始值\\n* maxlength:最大长度\\n* inputType:text,textarea,password,date,datetime,time\\n* range:true|fale,对date,datetime,time有效\\n* rangeSP:范围分隔符号,默认空格\\n* ************************************\\n* format:时间日期格式:默认值：yyyy-MM-dd\\n* yyyy\\t年份，至少四位数。如果不足四位，则前面补零\\n* y\\t年份，不限制位数，即不管年份多少位，前面均不补零\\n* MM\\t月份，至少两位数。如果不足两位，则前面补零。\\n* M\\t月份，允许一位数。\\n* dd\\t日期，至少两位数。如果不足两位，则前面补零。\\n* d\\t日期，允许一位数。\\n* HH\\t小时，至少两位数。如果不足两位，则前面补零。\\n* H\\t小时，允许一位数。\\n* mm\\t分钟，至少两位数。如果不足两位，则前面补零。\\n* m\\t分钟，允许一位数。\\n* ss\\t秒数，至少两位数。如果不足两位，则前面补零。\\n* s\\t秒数，允许一位数。\\n* ************************************\\n* isModal:是否是模态框，默认为true\\n* onShow:显示后的回调\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onClosed:关闭时的回调\\n* onCancel:function()\\n* hasCancel:true/false\\n* onOk:function(val):返回false不会关闭\\n* onCancel:function()\\n* validateType:\\n* errmsg:\\n\\n## 7.tips\\n吸附框。\\n```\\nsdk.tips(...).done()\\n```\\n* target:吸附元素\\n* content:内容\\n* position:up,down,left,right\\n* bgcolor:背景颜色\\n* color:字体颜色，默认黑色\\n* tipsMore:默认true，会销毁之前的。\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* close:关闭\\n\\n## 8.popPage\\n弹出页面。\\n```\\nsdk.popPage(...).done()\\n```\\n* title:标题|false\\n* content:显示的内容\\n* tcontent:显示的内容，如果为dom或jquery对象，关闭时不会被添加到body\\n* url:显示的url\\n* text:显示的文本内容\\n* textStyle:显示的文本的style，默认是:\\\"padding:5px;text-align:center;font-size:20px;\\\"\\n* size:[width,height],默认[\\\"80%\\\",\\\"90%\\\"]\\n* min:[minWidth,minHeight]\\n* max:[maxWidth,maxHeight],默认[\\\"100%\\\",\\\"100%\\\"]\\n* width:\\n* height:\\n* shade:透明度，默认0.3\\n* contentCss:object对象，设置内容区域的css，默认{margin:\\\"0px\\\"}\\n* resizable:是否允许缩放大小，默认true\\n* isModal:是否是模态框，默认为true\\n* cornerClose:是否含有角落的关闭按钮，默认为true\\n* modalShadeClose:在模态状态下，点击阴影进行关闭，默认为true\\n* scrollbar:页面body是否有滚动条，默认false\\n* initShow:是否显示，默认true\\n* show:function(showOrHide)显示,showOrHide为false时隐藏\\n* toTop:function()置顶\\n* minmax:是否含有最大和最小化按钮，默认为true\\n* btnsAlign:left,center,right;默认right\\n* buttonsThis:按钮回调函数的this指向，默认为当前handle.\\n* buttons:[label1,callback1(btnDom),label2,callback2(btnDom),...]\\n* buttonFoucs:[index]设置按钮重点，默认为[0]\\n* anim:no(无动画),zoomIn(默认),drop,rise,leftfly,turn,fade,shake\\n* position:center,left,top,right,bottom,ltop,lbottom,rtop,rbottom,[left,top]\\n* closeTime:自动关闭的时间，毫秒,默认0不会关闭\\n* onGetIFrame:function(iframe)\\n* onShadeClick:function()\\n* onShow:显示后的回调\\n* onClosed:function(){}关闭时的回调\\n* onContentBeforeClose:function(content){},如果content为dom或jquery对象，默认会被添加到body，返回false则不会。\\n\\n## 9.widget().genButton\\n生成按钮。\\n```\\nsdk.widget().genButton(...).done()\\n```\\n* size:small(默认),normal,medium,large\\n* type:primary,info,success,warn,danger/error\\n* radius:是否圆角\\n* disabled:是否禁用\\n* content:按钮内容\\n* text:按钮文本\\n* class:\\n* href:点击跳转的连接\\n* attrs:\\n* click:function()\\n* done:function()返回按钮dom\\n\\n## 10.xsSimpleEdit\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"弹出层\",\"projectId\":\"153188636499907000002\",\"sequence\":1006,\"status\":1,\"type\":\"ARTICLE\"}','153206873741201000017'),('153317229468808000016',1,'2018-08-02 09:11:35',118,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"4\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"5\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153318469978908000017',1,'2018-08-02 12:38:20',119,'ArticleWithBLOBs','文章','UPDATE','超级管理员','form表单','{\"brief\":\"form表单转对象，对象回显到表单\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":13,\"commentCount\":0,\"content\":\"<h2 id=\\\"1formjson\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1formjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.formJson<\\/h2>\\n<p data-source-line=\\\"2\\\">将表单转成json对象或数组。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, option)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"7\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"8\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"11\\\">\\n<li>includeAllParams:默认为false，是否包含所有的参数、包括为空的。<\\/li>\\n<li>trim:【Boolean】默认true,是否调用trim()。<\\/li>\\n<li>toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2json2form\\\" data-source-line=\\\"15\\\"><a class=\\\"anchor\\\" href=\\\"#2json2form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.json2Form<\\/h2>\\n<p data-source-line=\\\"16\\\">用于表单回显。<\\/p>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector, data)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"21\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"22\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3form\\\" data-source-line=\\\"24\\\"><a class=\\\"anchor\\\" href=\\\"#3form\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.form<\\/h2>\\n<pre data-source-line=\\\"26\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(formSelector)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"29\\\">参数说明：<\\/p>\\n<ol data-source-line=\\\"30\\\">\\n<li>formSelector：form选择器或dom<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"32\\\"><strong>函数<\\/strong>：<\\/p>\\n<h3 id=\\\"1submitby\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1submitby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1）submitBy()<\\/h3>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><p data-source-line=\\\"38\\\">obj说明：<\\/p>\\n<ul data-source-line=\\\"39\\\">\\n<li>为选择器或dom，监听click事件进行提交。<\\/li>\\n<li>为function，如下,调用submitCall()会触发表单提交。<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> submitCall;\\nhandle.submitBy(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span>{\\n    submitCall=<span class=\\\"hljs-keyword\\\">callback<\\/span>;\\n})<\\/code><\\/pre><h3 id=\\\"2url\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2）url()<\\/h3>\\n<p data-source-line=\\\"50\\\">设置提交地址，默认会读取表单的action属性。<\\/p>\\n<pre data-source-line=\\\"51\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(url)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"3urlprefix\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3urlprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3）urlPrefix()<\\/h3>\\n<p data-source-line=\\\"56\\\">设置url前缀，最终的提交地址为urlPrefix+url。<\\/p>\\n<pre data-source-line=\\\"57\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(urlPrefix)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"4method\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#4method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4）method()<\\/h3>\\n<p data-source-line=\\\"62\\\">设置提交的方法，默认会读取表单的method属性。<\\/p>\\n<pre data-source-line=\\\"63\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<\\/span><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">method<\\/span>)<\\/span><\\/code><\\/pre><h3 id=\\\"5putvalues\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#5putvalues\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5）putValues()<\\/h3>\\n<p data-source-line=\\\"68\\\">设置表单值。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">object<\\/span>)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"6reset\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#6reset\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6）reset()<\\/h3>\\n<p data-source-line=\\\"75\\\">重置表单。<\\/p>\\n<h3 id=\\\"7onok\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#7onok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7）onOk()<\\/h3>\\n<pre data-source-line=\\\"79\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"8onfail\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#8onfail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8）onFail()<\\/h3>\\n<pre data-source-line=\\\"85\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"9onvalidatefail\\\" data-source-line=\\\"89\\\"><a class=\\\"anchor\\\" href=\\\"#9onvalidatefail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9）onValidateFail()<\\/h3>\\n<pre data-source-line=\\\"91\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"10submit\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#10submit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10）submit()<\\/h3>\\n<p data-source-line=\\\"96\\\">提交表单。<\\/p>\\n<h3 id=\\\"11beforesubmit\\\" data-source-line=\\\"98\\\"><a class=\\\"anchor\\\" href=\\\"#11beforesubmit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）beforeSubmit()<\\/h3>\\n<p data-source-line=\\\"99\\\">表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。<\\/p>\\n<pre data-source-line=\\\"101\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(beforeSubmitCallback)<\\/span><\\/span>\\n\\nbeforeSubmitCallback=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,callback)<\\/span><\\/span>{\\n    callback(<span class=\\\"hljs-keyword\\\">data<\\/span>);\\n}<\\/code><\\/pre><h3 id=\\\"11done\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#11done\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11）done()<\\/h3>\\n<p data-source-line=\\\"110\\\">最后必须调用。<\\/p>\\n<h2 id=\\\"4validateformoption\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#4validateformoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.validateForm(option)<\\/h2>\\n<p data-source-line=\\\"113\\\">表单验证。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\">xs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：<\\/code><\\/pre><p data-source-line=\\\"123\\\">option说明：<\\/p>\\n<ol data-source-line=\\\"124\\\">\\n<li>form：form对象或选择器<\\/li>\\n<li>onOk:function(form)，验证成功的回调<\\/li>\\n<li>onFail:function(itemDom, name, value)，验失败的回调<\\/li>\\n<li>validate:可选，validate对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"5validate\\\" data-source-line=\\\"130\\\"><a class=\\\"anchor\\\" href=\\\"#5validate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.validate()<\\/h2>\\n<p data-source-line=\\\"131\\\">验证工具。<\\/p>\\n<h3 id=\\\"1put\\\" data-source-line=\\\"133\\\"><a class=\\\"anchor\\\" href=\\\"#1put\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1）put()<\\/h3>\\n<p data-source-line=\\\"134\\\">添加验证类型。<\\/p>\\n<pre data-source-line=\\\"135\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, <span class=\\\"hljs-keyword\\\">type<\\/span>, errmsg)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"138\\\">\\n<li>name：待验证的name名称<\\/li>\\n<li>type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)<\\/li>\\n<li>errmsg：string<\\/li>\\n<\\/ul>\\n<h3 id=\\\"2remove\\\" data-source-line=\\\"142\\\"><a class=\\\"anchor\\\" href=\\\"#2remove\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2）remove()<\\/h3>\\n<p data-source-line=\\\"143\\\">移除。<\\/p>\\n<pre data-source-line=\\\"144\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"3onok\\\" data-source-line=\\\"148\\\"><a class=\\\"anchor\\\" href=\\\"#3onok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3）onOk()<\\/h3>\\n<pre data-source-line=\\\"150\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(okCall)<\\/span><\\/span>\\n\\nokCall=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(selector)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"4oneachokcall\\\" data-source-line=\\\"156\\\"><a class=\\\"anchor\\\" href=\\\"#4oneachokcall\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4）onEachOkCall()<\\/h3>\\n<pre data-source-line=\\\"158\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(callback)<\\/span><\\/span>\\n\\ncallback = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(itemDom,name,value)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"5onfail\\\" data-source-line=\\\"164\\\"><a class=\\\"anchor\\\" href=\\\"#5onfail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5）onFail()<\\/h3>\\n<pre data-source-line=\\\"166\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(failCall)<\\/span><\\/span>\\n\\nfailCall = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(itemDom,name,value,errmsg)<\\/span><\\/span><\\/code><\\/pre><h3 id=\\\"6dovalidate\\\" data-source-line=\\\"172\\\"><a class=\\\"anchor\\\" href=\\\"#6dovalidate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6）doValidate()<\\/h3>\\n<pre data-source-line=\\\"174\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(selector, checkAll)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"177\\\">\\n<li>selector 表单选择器<\\/li>\\n<li>checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。<\\/li>\\n<\\/ul>\\n<h3 id=\\\"7自验证类型\\\" data-source-line=\\\"180\\\"><a class=\\\"anchor\\\" href=\\\"#7自验证类型\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7）自验证类型<\\/h3>\\n<ul data-source-line=\\\"181\\\">\\n<li>$reg:正则表达是<\\/li>\\n<li>email:电邮件<\\/li>\\n<li>chinese:中文<\\/li>\\n<li>url:url地址<\\/li>\\n<li>filename:文件名<\\/li>\\n<li>idcard:身份证号<\\/li>\\n<li>number:数字（整数或小数）<\\/li>\\n<li>int:整数(有符号)<\\/li>\\n<li>uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；<\\/li>\\n<li>length(min,max):长度验证(min,max)|(min,)|(,max)<\\/li>\\n<li>mobile:手机号<\\/li>\\n<li>phone:电话号码<\\/li>\\n<li>ipv4:ipv4地址<\\/li>\\n<li>unumber:(非负)数字（整数或小数）<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":9,\"minutes\":55,\"month\":6,\"seconds\":3,\"time\":1532051703000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153205170284601000003\",\"markdown\":\"## 1.formJson\\n将表单转成json对象或数组。\\n\\n```\\nfunction(formSelector, option)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\noption说明：\\n1. includeAllParams:默认为false，是否包含所有的参数、包括为空的。\\n2. trim:【Boolean】默认true,是否调用trim()。\\n3. toArray:【Boolean】默认false，为true时返回结果为[{key:\'\',value:\'\'}]的形式，false时返回结果为{key:value}的形式。\\n\\n## 2.json2Form\\n用于表单回显。\\n\\n```\\nfunction(formSelector, data)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n## 3.form\\n\\n```\\nfunction(formSelector)\\n```\\n参数说明：\\n1. formSelector：form选择器或dom\\n\\n**函数**：\\n### 1）submitBy()\\n\\n```\\nfunction(obj)\\n```\\nobj说明：\\n- 为选择器或dom，监听click事件进行提交。\\n- 为function，如下,调用submitCall()会触发表单提交。\\n\\n```\\nvar submitCall;\\nhandle.submitBy(function(callback){\\n    submitCall=callback;\\n})\\n```\\n\\n### 2）url()\\n设置提交地址，默认会读取表单的action属性。\\n```\\nfunction(url)\\n```\\n\\n### 3）urlPrefix()\\n设置url前缀，最终的提交地址为urlPrefix+url。\\n```\\nfunction(urlPrefix)\\n```\\n\\n### 4）method()\\n设置提交的方法，默认会读取表单的method属性。\\n```\\nfunction(method)\\n```\\n\\n### 5）putValues()\\n设置表单值。\\n\\n```\\nfunction(object)\\n```\\n\\n### 6）reset()\\n重置表单。\\n\\n### 7）onOk()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 8）onFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 9）onValidateFail()\\n\\n```\\nfunction(callback)\\n```\\n\\n### 10）submit()\\n提交表单。\\n\\n### 11）beforeSubmit()\\n表单提交前的回调。beforeSubmitCallback会被调用两次，第一次data为null表示表验之前，第二次data不为null表示已经成功进行了验证。\\n\\n```\\nfunction(beforeSubmitCallback)\\n\\nbeforeSubmitCallback=function(data,callback){\\n    callback(data);\\n}\\n```\\n\\n### 11）done()\\n最后必须调用。\\n\\n## 4.validateForm(option)\\n表单验证。\\n\\n```\\nxs-validate：验证类型\\nxs-validate-errmsg：验失败的提示信息\\nxs-validate-emptymsg：必须项未填写的提示信息\\n\\n例如：\\n\\n```\\noption说明：\\n1. form：form对象或选择器\\n2. onOk:function(form)，验证成功的回调\\n3. onFail:function(itemDom, name, value)，验失败的回调\\n4. validate:可选，validate对象\\n\\n\\n## 5.validate()\\n验证工具。\\n\\n### 1）put()\\n添加验证类型。\\n```\\nfunction(name, type, errmsg)\\n```\\n- name：待验证的name名称\\n- type：验类型，$reg:xxx|typeName|function(dom,name,val,callback(isOk,optionalErrmsg),attrs)\\n- errmsg：string\\n\\n### 2）remove()\\n移除。\\n```\\nfunction(name)\\n```\\n\\n### 3）onOk()\\n\\n```\\nfunction(okCall)\\n\\nokCall=function(selector)\\n```\\n\\n### 4）onEachOkCall()\\n\\n```\\nfunction(callback)\\n\\ncallback = function(itemDom,name,value)\\n```\\n\\n### 5）onFail()\\n\\n```\\nfunction(failCall)\\n\\nfailCall = function(itemDom,name,value,errmsg)\\n```\\n\\n### 6）doValidate()\\n\\n```\\nfunction(selector, checkAll)\\n```\\n- selector 表单选择器\\n- checkAll 当验证到失败时，为true会继续验证，为false会停止验证。默认为true。\\n\\n### 7）自验证类型\\n * $reg:正则表达是\\n * email:电邮件\\n * chinese:中文\\n * url:url地址\\n * filename:文件名\\n * idcard:身份证号\\n * number:数字（整数或小数）\\n * int:整数(有符号)\\n * uinit(L|Rmin,max):整数(无符号).(min,max):大于min小于max；(L,min,max):大于等于min小于max；(R,min,max):大于min小于等于max；(LR,Rmin,max):大于等于min小于等于max；\\n * length(min,max):长度验证(min,max)|(min,)|(,max)\\n * mobile:手机号\\n * phone:电话号码\\n * ipv4:ipv4地址\\n * unumber:(非负)数字（整数或小数）\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"form表单\",\"projectId\":\"153188636499907000002\",\"sequence\":1005,\"status\":1,\"type\":\"ARTICLE\"}','153205170284601000003'),('153386365889708000001',1,'2018-08-10 09:14:19',120,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。<br>\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。<br>\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386463495408000002',1,'2018-08-10 09:30:35',121,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。<br>\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。<br>\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386478866708000003',1,'2018-08-10 09:33:09',122,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386502701608000004',1,'2018-08-10 09:37:07',123,'ArticleWithBLOBs','文章','UPDATE','超级管理员','常用工具方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"核心功能\",\"click\":12,\"commentCount\":0,\"content\":\"<h2 id=\\\"1queryparam\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1queryparam\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.queryParam()<\\/h2>\\n<p data-source-line=\\\"2\\\">得到地址参数。<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(name, otherValue, optionUrl)<\\/span><\\/span><\\/code><\\/pre><ul data-source-line=\\\"7\\\">\\n<li>name：参数名<\\/li>\\n<li>otherValue：不存在时的返回值<\\/li>\\n<li>optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2isjquery\\\" data-source-line=\\\"11\\\"><a class=\\\"anchor\\\" href=\\\"#2isjquery\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.isJQuery()<\\/h2>\\n<p data-source-line=\\\"12\\\">判断是否为jQuery对象。<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"3isjqueryordom\\\" data-source-line=\\\"18\\\"><a class=\\\"anchor\\\" href=\\\"#3isjqueryordom\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.isJQueryOrDOM()<\\/h2>\\n<p data-source-line=\\\"19\\\">判断是否为jQuery或Dom对象。<\\/p>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(obj)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"4windowslowertrigger\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#4windowslowertrigger\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.window.slowerTrigger()<\\/h2>\\n<p data-source-line=\\\"26\\\">防止快速或重复点击。<\\/p>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">callback<\\/span>)\\n\\n例子：\\n<span class=\\\"hljs-title\\\">$<\\/span>(<span class=\\\"hljs-params\\\">selector<\\/span>).<span class=\\\"hljs-title\\\">click<\\/span>(<span class=\\\"hljs-params\\\">slowerTrigger(function(<\\/span>)<\\/span>{\\n    alert(<span class=\\\"hljs-keyword\\\">this<\\/span>);\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> <span class=\\\"hljs-literal\\\">false<\\/span>;\\n}));<\\/code><\\/pre><h2 id=\\\"5pako\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#5pako\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.pako<\\/h2>\\n<p data-source-line=\\\"38\\\">一个js压缩库。<\\/p>\\n<h2 id=\\\"6usetopuselowertopuseopeneruseparent\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#6usetopuselowertopuseopeneruseparent\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.useTop()|useLowerTop()|useOpener()|useParent()<\\/h2>\\n<p data-source-line=\\\"41\\\">如果不存在时，返结果等于当前窗口的sdk对象。<\\/p>\\n<ul data-source-line=\\\"42\\\">\\n<li>useTop()：使用顶层sdk对象。<\\/li>\\n<li>useLowerTop()：使用顶层下一级sdk对象。<\\/li>\\n<li>useOpener()：使用打开者sdk对象。<\\/li>\\n<li>useParent()：使用父级sdk对象。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"6onready\\\" data-source-line=\\\"47\\\"><a class=\\\"anchor\\\" href=\\\"#6onready\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.onReady<\\/h2>\\n<p data-source-line=\\\"48\\\">sdk准备好时的回调函数。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":37,\"month\":6,\"seconds\":45,\"time\":1532065065000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206506473901000008\",\"markdown\":\"## 1.queryParam()\\n得到地址参数。\\n\\n```\\nfunction(name, otherValue, optionUrl)\\n```\\n- name：参数名\\n- otherValue：不存在时的返回值\\n- optionUrl：为空时，从当前页面地址获取；不为空，从该地址获取参数\\n\\n## 2.isJQuery()\\n判断是否为jQuery对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 3.isJQueryOrDOM()\\n判断是否为jQuery或Dom对象。\\n\\n```\\nfunction(obj)\\n```\\n\\n## 4.window.slowerTrigger()\\n防止快速或重复点击。\\n```\\nfunction(callback)\\n\\n例子：\\n$(selector).click(slowerTrigger(function(){\\n    alert(this);\\n    return false;\\n}));\\n```\\n\\n## 5.pako\\n一个js压缩库。\\n\\n## 6.useTop()|useLowerTop()|useOpener()|useParent()\\n如果不存在时，返结果等于当前窗口的sdk对象。\\n- useTop()：使用顶层sdk对象。\\n- useLowerTop()：使用顶层下一级sdk对象。\\n- useOpener()：使用打开者sdk对象。\\n- useParent()：使用父级sdk对象。\\n\\n## 6.onReady\\nsdk准备好时的回调函数。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"常用工具方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1003,\"status\":1,\"type\":\"ARTICLE\"}','153206506473901000008'),('153386576036608000005',1,'2018-08-10 09:49:20',124,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386584813308000006',1,'2018-08-10 09:50:48',125,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386587758908000007',1,'2018-08-10 09:51:18',126,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153386656329408000009',1,'2018-08-10 10:02:43',127,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153386669843708000010',1,'2018-08-10 10:04:58',128,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption\\n<br>\\n<strong>例如<\\/strong>：<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"54\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"55\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption\\n<br>\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153386684399208000011',1,'2018-08-10 10:07:24',129,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"9\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"54\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"55\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"58\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"60\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153386731324208000012',1,'2018-08-10 10:15:13',130,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"9\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"54\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"55\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"58\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"60\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5继承约定\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5继承约定<\\/h2>\\n<ul data-source-line=\\\"70\\\">\\n<li>实体：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5继承约定\\n- 实体：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153422642622908000013',1,'2018-08-14 14:00:26',131,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422646863808000014',1,'2018-08-14 14:01:09',132,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg):[主页面]是回调,返回false将不会自动弹出消息<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg)[被打开页面]<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg):[主页面]是回调,返回false将不会自动弹出消息\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg)[被打开页面]\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422676244508000015',1,'2018-08-14 14:06:02',133,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false将不会自动弹出消息<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>close:function()[主页面]<\\/li>\\n<li>onResult:function(isOk,msg,json)[被打开页面]编辑页面可以主动返回结果<\\/li>\\n<li>submit:function()[被打开页面]<\\/li>\\n<li>putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false将不会自动弹出消息\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* close:function()[主页面]\\n* onResult:function(isOk,msg,json)[被打开页面]编辑页面可以主动返回结果\\n* submit:function()[被打开页面]\\n* putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422692624808000016',1,'2018-08-14 14:08:46',134,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[被打开页面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]<\\/li>\\n<li>path:可选,可有表单action提供[被打开页面]<\\/li>\\n<li>method:可选,可有表单method提供[被打开页面]<\\/li>\\n<li>toSave:function()保存,[被打开页面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[被打开页面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][被打开页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false将不会自动弹出消息<\\/li>\\n<li>onConnected:function(initData,option):[主页面][被打开页面]<\\/li>\\n<li>initData:[主页面][被打开页面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[被打开页面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[被打开页面]<\\/li>\\n<li>handle.putValues:function(data)[被打开页面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[被打开页面]*******\\n* form:可选[被打开页面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[被打开页面]\\n* path:可选,可有表单action提供[被打开页面]\\n* method:可选,可有表单method提供[被打开页面]\\n* toSave:function()保存,[被打开页面]\\n* beforeSubmit:function(data,callback(data)),对form有效[被打开页面]\\n* ****************[主页面][被打开页面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false将不会自动弹出消息\\n* onConnected:function(initData,option):[主页面][被打开页面]\\n* initData:[主页面][被打开页面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[被打开页面]编辑页面可以主动返回结果\\n* handle.submit:function()[被打开页面]\\n* handle.putValues:function(data)[被打开页面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422958868008000017',1,'2018-08-14 14:53:09',135,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":13,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"1formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"3formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"4formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"5formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"6formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"7formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"82\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"92\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"93\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 1)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 3)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 4)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 5)formatOfDate()\\n返回“年-月-日”。\\n\\n### 6)formatOfMonth()\\n返回“年-月”。\\n\\n### 7)formatOfYear()\\n返回“年”。\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422963871308000018',1,'2018-08-14 14:53:59',136,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":14,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrmillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrmillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"3formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"4formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"5formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"6formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"7formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"8formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#8formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h3 id=\\\"9formatofmonthdayhoursminutes\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#9formatofmonthdayhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9)formatOfMonthDayHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"82\\\">返回“月-日 时:分”。<\\/p>\\n<h3 id=\\\"10formatofhoursminutes\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#10formatofhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10)formatOfHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"85\\\">返回“时:分”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"89\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"99\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"100\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrmillseconds)\\n\\n```\\ndateOrmillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 3)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 4)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 5)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 6)formatOfDate()\\n返回“年-月-日”。\\n\\n### 7)formatOfMonth()\\n返回“年-月”。\\n\\n### 8)formatOfYear()\\n返回“年”。\\n\\n### 9)formatOfMonthDayHoursMinutes()\\n返回“月-日 时:分”。\\n\\n### 10)formatOfHoursMinutes()\\n返回“时:分”。\\n\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153422967781808000019',1,'2018-08-14 14:54:38',137,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":15,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormillseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormillseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrMillseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrMillseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"3formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"4formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"5formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"6formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"7formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"8formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#8formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h3 id=\\\"9formatofmonthdayhoursminutes\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#9formatofmonthdayhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9)formatOfMonthDayHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"82\\\">返回“月-日 时:分”。<\\/p>\\n<h3 id=\\\"10formatofhoursminutes\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#10formatofhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10)formatOfHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"85\\\">返回“时:分”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"89\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"99\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"100\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrMillseconds)\\n\\n```\\ndateOrMillseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 3)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 4)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 5)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 6)formatOfDate()\\n返回“年-月-日”。\\n\\n### 7)formatOfMonth()\\n返回“年-月”。\\n\\n### 8)formatOfYear()\\n返回“年”。\\n\\n### 9)formatOfMonthDayHoursMinutes()\\n返回“月-日 时:分”。\\n\\n### 10)formatOfHoursMinutes()\\n返回“时:分”。\\n\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153447504260508000021',1,'2018-08-17 11:04:03',138,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":16,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"9\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"54\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"55\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"58\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"60\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5目录结构与继承约定\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5目录结构与继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.目录结构与继承约定<\\/h2>\\n<h3 id=\\\"1目录结构\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#1目录结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(1)目录结构<\\/h3>\\n<pre data-source-line=\\\"72\\\"><code class=\\\"hljs\\\">基础包:cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span>.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         <span class=\\\"hljs-selector-class\\\">.common<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.db<\\/span>\\n                DBUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseEntity<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseDao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseService<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n            <span class=\\\"hljs-selector-class\\\">.util<\\/span>\\n                AppUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n         <span class=\\\"hljs-selector-class\\\">.modules<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.hello<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.controller<\\/span>\\n                    HelloController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.entity<\\/span>\\n                    Hello1<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n                <span class=\\\"hljs-selector-class\\\">.service<\\/span>\\n                    Hello1Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello1Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n         <span class=\\\"hljs-selector-class\\\">.modules_xxxx<\\/span>\\n         <span class=\\\"hljs-selector-class\\\">.startup<\\/span>\\n            ...<\\/code><\\/pre><h3 id=\\\"2继承\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#2继承\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(2)继承<\\/h3>\\n<ul data-source-line=\\\"107\\\">\\n<li>Entity：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:TheBaseService<\\/li>\\n<li>Controller:TheBaseController<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5.目录结构与继承约定\\n### (1)目录结构\\n\\n```\\n基础包:cn.xishan.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         .common\\n            .db\\n                DBUtil.java\\n                TheBaseEntity.java\\n                TheBaseDao.java\\n                TheBaseService.java\\n                TheBaseController.java\\n                ...\\n            .util\\n                AppUtil.java\\n                ...\\n         .modules\\n            .hello\\n                .controller\\n                    HelloController.java\\n                .entity\\n                    Hello1.java\\n                    Hello2.java\\n                    ...\\n                .service\\n                    Hello1Dao.java\\n                    Hello2Dao.java\\n                    Hello1Service.java\\n                    Hello2Service.java\\n                    ...\\n         .modules_xxxx\\n         .startup\\n            ...\\n```\\n\\n### (2)继承\\n- Entity：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:TheBaseService\\n- Controller:TheBaseController\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153447507104608000022',1,'2018-08-17 11:04:31',139,'ArticleWithBLOBs','文章','UPDATE','超级管理员','项目骨架','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":26,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-外包组\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-外包组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、外包组<\\/h1>\\n<h1 id=\\\"二-产品研发组\\\" data-source-line=\\\"4\\\"><a class=\\\"anchor\\\" href=\\\"#二-产品研发组\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、产品研发组<\\/h1>\\n<h2 id=\\\"1-archetype-spring-boot-web-版本201\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#1-archetype-spring-boot-web-版本201\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、archetype-spring-boot-web 版本:2.0.1<\\/h2>\\n<p data-source-line=\\\"7\\\"><strong>介绍<\\/strong>：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。<\\/p>\\n<ul data-source-line=\\\"8\\\">\\n<li>添加maven骨架<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"10\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">groupId<\\/span>:<span class=\\\"hljs-meta\\\">cn<\\/span>.xishan<span class=\\\"hljs-meta\\\">.global<\\/span>\\n<span class=\\\"hljs-symbol\\\">artifactId<\\/span>:archetype-spring-<span class=\\\"hljs-keyword\\\">boot-web\\n<\\/span><span class=\\\"hljs-symbol\\\">version<\\/span>:<span class=\\\"hljs-number\\\">2<\\/span>.<span class=\\\"hljs-number\\\">0<\\/span>.<span class=\\\"hljs-number\\\">1<\\/span>-SNAPSHOT<\\/code><\\/pre><ul data-source-line=\\\"15\\\">\\n<li>创建maven项目<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":44,\"month\":6,\"seconds\":2,\"time\":1532598242000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259824154401000016\",\"markdown\":\"# 一、外包组\\n\\n\\n# 二、产品研发组\\n\\n## 1、archetype-spring-boot-web 版本:2.0.1\\n**介绍**：集成的基础库有spring-boot 1.5.x、mybatis-3.4.x、OftenPorter-1.1.x等，并集成了公共服务2.0.x。\\n- 添加maven骨架\\n\\n```\\ngroupId:cn.xishan.global\\nartifactId:archetype-spring-boot-web\\nversion:2.0.1-SNAPSHOT\\n```\\n- 创建maven项目\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"项目骨架\",\"projectId\":\"153188636499907000002\",\"sequence\":1011,\"status\":1,\"type\":\"ARTICLE\"}','153259824154401000016'),('153449844938708000023',1,'2018-08-17 17:34:09',140,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":16,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"9\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"54\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"55\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"58\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"60\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5目录结构与继承约定\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5目录结构与继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.目录结构与继承约定<\\/h2>\\n<h3 id=\\\"1目录结构\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#1目录结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(1)目录结构<\\/h3>\\n<pre data-source-line=\\\"72\\\"><code class=\\\"hljs\\\">基础包:cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span>.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         <span class=\\\"hljs-selector-class\\\">.common<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.db<\\/span>\\n                DBUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseEntity<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseDao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseService<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n            <span class=\\\"hljs-selector-class\\\">.util<\\/span>\\n                AppUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n         <span class=\\\"hljs-selector-class\\\">.modules<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.hello<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.controller<\\/span>\\n                    HelloController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.entity<\\/span>\\n                    Hello1<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n                <span class=\\\"hljs-selector-class\\\">.service<\\/span>\\n                    Hello1Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello1Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n         <span class=\\\"hljs-selector-class\\\">.modules_xxxx<\\/span>\\n         <span class=\\\"hljs-selector-class\\\">.startup<\\/span>\\n            ...<\\/code><\\/pre><h3 id=\\\"2继承\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#2继承\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(2)继承<\\/h3>\\n<ul data-source-line=\\\"107\\\">\\n<li>Entity：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:TheBaseService<\\/li>\\n<li>Controller:TheBaseController<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5.目录结构与继承约定\\n### (1)目录结构\\n\\n```\\n基础包:cn.xishan.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         .common\\n            .db\\n                DBUtil.java\\n                TheBaseEntity.java\\n                TheBaseDao.java\\n                TheBaseService.java\\n                TheBaseController.java\\n                ...\\n            .util\\n                AppUtil.java\\n                ...\\n         .modules\\n            .hello\\n                .controller\\n                    HelloController.java\\n                .entity\\n                    Hello1.java\\n                    Hello2.java\\n                    ...\\n                .service\\n                    Hello1Dao.java\\n                    Hello2Dao.java\\n                    Hello1Service.java\\n                    Hello2Service.java\\n                    ...\\n         .modules_xxxx\\n         .startup\\n            ...\\n```\\n\\n### (2)继承\\n- Entity：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:TheBaseService\\n- Controller:TheBaseController\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153472727402008000024',1,'2018-08-20 09:07:54',141,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":17,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153472797201108000025',1,'2018-08-20 09:19:32',142,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":18,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre><h2 id=\\\"4-安全规范\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#4-安全规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、安全规范<\\/h2>\\n<h3 id=\\\"1-请求方法规范\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求方法规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求方法规范<\\/h3>\\n<p data-source-line=\\\"46\\\">所后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n<br>\\n例如spring:<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(path = <span class=\\\"hljs-string\\\">\\\"save\\\"<\\/span>, method = RequestMethod.POST)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"保存\\\"<\\/span>, desc = <span class=\\\"hljs-string\\\">\\\"添加或修改\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    <span class=\\\"hljs-selector-tag\\\">if<\\/span> (entity.getId() == null)\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.add<\\/span>(wObject, entity);\\n    } else\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.updateById<\\/span>(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\\n\\n## 4、安全规范\\n\\n### 1、请求方法规范\\n所后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n<br>\\n例如spring:\\n```\\n@RequestMapping(path = \\\"save\\\", method = RequestMethod.POST)\\n@PortComment(name = \\\"保存\\\", desc = \\\"添加或修改\\\")\\n@ResponseBody\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    if (entity.getId() == null)\\n    {\\n        theBaseService.add(wObject, entity);\\n    } else\\n    {\\n        theBaseService.updateById(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153472808161708000026',1,'2018-08-20 09:21:22',143,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":19,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre><h2 id=\\\"4-安全规范\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#4-安全规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、安全规范<\\/h2>\\n<h3 id=\\\"1-请求方法规范\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求方法规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求方法规范<\\/h3>\\n<p data-source-line=\\\"46\\\">所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。<\\/p>\\n<p data-source-line=\\\"48\\\">例如spring:<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(path = <span class=\\\"hljs-string\\\">\\\"save\\\"<\\/span>, method = RequestMethod.POST)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"保存\\\"<\\/span>, desc = <span class=\\\"hljs-string\\\">\\\"添加或修改\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    <span class=\\\"hljs-selector-tag\\\">if<\\/span> (entity.getId() == null)\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.add<\\/span>(wObject, entity);\\n    } else\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.updateById<\\/span>(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\\n\\n## 4、安全规范\\n\\n### 1、请求方法规范\\n所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n\\n例如spring:\\n```\\n@RequestMapping(path = \\\"save\\\", method = RequestMethod.POST)\\n@PortComment(name = \\\"保存\\\", desc = \\\"添加或修改\\\")\\n@ResponseBody\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    if (entity.getId() == null)\\n    {\\n        theBaseService.add(wObject, entity);\\n    } else\\n    {\\n        theBaseService.updateById(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153473038497708000027',1,'2018-08-20 09:59:45',144,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":17,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类<\\/li>\\n<li>支持@LinkApiInvoke与@WithApiInvoke<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"12\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"53\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"56\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"59\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"61\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5目录结构与继承约定\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#5目录结构与继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.目录结构与继承约定<\\/h2>\\n<h3 id=\\\"1目录结构\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#1目录结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(1)目录结构<\\/h3>\\n<pre data-source-line=\\\"73\\\"><code class=\\\"hljs\\\">基础包:cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span>.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         <span class=\\\"hljs-selector-class\\\">.common<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.db<\\/span>\\n                DBUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseEntity<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseDao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseService<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n            <span class=\\\"hljs-selector-class\\\">.util<\\/span>\\n                AppUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n         <span class=\\\"hljs-selector-class\\\">.modules<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.hello<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.controller<\\/span>\\n                    HelloController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.entity<\\/span>\\n                    Hello1<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n                <span class=\\\"hljs-selector-class\\\">.service<\\/span>\\n                    Hello1Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello1Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n         <span class=\\\"hljs-selector-class\\\">.modules_xxxx<\\/span>\\n         <span class=\\\"hljs-selector-class\\\">.startup<\\/span>\\n            ...<\\/code><\\/pre><h3 id=\\\"2继承\\\" data-source-line=\\\"107\\\"><a class=\\\"anchor\\\" href=\\\"#2继承\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(2)继承<\\/h3>\\n<ul data-source-line=\\\"108\\\">\\n<li>Entity：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:TheBaseService<\\/li>\\n<li>Controller:TheBaseController<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类\\n6. 支持@LinkApiInvoke与@WithApiInvoke\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5.目录结构与继承约定\\n### (1)目录结构\\n\\n```\\n基础包:cn.xishan.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         .common\\n            .db\\n                DBUtil.java\\n                TheBaseEntity.java\\n                TheBaseDao.java\\n                TheBaseService.java\\n                TheBaseController.java\\n                ...\\n            .util\\n                AppUtil.java\\n                ...\\n         .modules\\n            .hello\\n                .controller\\n                    HelloController.java\\n                .entity\\n                    Hello1.java\\n                    Hello2.java\\n                    ...\\n                .service\\n                    Hello1Dao.java\\n                    Hello2Dao.java\\n                    Hello1Service.java\\n                    Hello2Service.java\\n                    ...\\n         .modules_xxxx\\n         .startup\\n            ...\\n```\\n\\n### (2)继承\\n- Entity：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:TheBaseService\\n- Controller:TheBaseController\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153473590217708000028',1,'2018-08-20 11:31:49',145,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":17,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类<\\/li>\\n<li>支持@LinkApiInvoke（请求方法为POST）与@WithApiInvoke<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"12\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"53\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"56\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"59\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"61\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5目录结构与继承约定\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#5目录结构与继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.目录结构与继承约定<\\/h2>\\n<h3 id=\\\"1目录结构\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#1目录结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(1)目录结构<\\/h3>\\n<pre data-source-line=\\\"73\\\"><code class=\\\"hljs\\\">基础包:cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span>.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         <span class=\\\"hljs-selector-class\\\">.common<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.db<\\/span>\\n                DBUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseEntity<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseDao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseService<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n            <span class=\\\"hljs-selector-class\\\">.util<\\/span>\\n                AppUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n         <span class=\\\"hljs-selector-class\\\">.modules<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.hello<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.controller<\\/span>\\n                    HelloController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.entity<\\/span>\\n                    Hello1<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n                <span class=\\\"hljs-selector-class\\\">.service<\\/span>\\n                    Hello1Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello1Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n         <span class=\\\"hljs-selector-class\\\">.modules_xxxx<\\/span>\\n         <span class=\\\"hljs-selector-class\\\">.startup<\\/span>\\n            ...<\\/code><\\/pre><h3 id=\\\"2继承\\\" data-source-line=\\\"107\\\"><a class=\\\"anchor\\\" href=\\\"#2继承\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(2)继承<\\/h3>\\n<ul data-source-line=\\\"108\\\">\\n<li>Entity：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:TheBaseService<\\/li>\\n<li>Controller:TheBaseController<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类\\n6. 支持@LinkApiInvoke（请求方法为POST）与@WithApiInvoke\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5.目录结构与继承约定\\n### (1)目录结构\\n\\n```\\n基础包:cn.xishan.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         .common\\n            .db\\n                DBUtil.java\\n                TheBaseEntity.java\\n                TheBaseDao.java\\n                TheBaseService.java\\n                TheBaseController.java\\n                ...\\n            .util\\n                AppUtil.java\\n                ...\\n         .modules\\n            .hello\\n                .controller\\n                    HelloController.java\\n                .entity\\n                    Hello1.java\\n                    Hello2.java\\n                    ...\\n                .service\\n                    Hello1Dao.java\\n                    Hello2Dao.java\\n                    Hello1Service.java\\n                    Hello2Service.java\\n                    ...\\n         .modules_xxxx\\n         .startup\\n            ...\\n```\\n\\n### (2)继承\\n- Entity：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:TheBaseService\\n- Controller:TheBaseController\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153484385231008000031',1,'2018-08-21 17:30:53',146,'ArticleWithBLOBs','文章','UPDATE','超级管理员','通用规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":21,\"day\":2,\"hours\":17,\"minutes\":30,\"month\":7,\"seconds\":40,\"time\":1534843840000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153484383978701000030\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"通用规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1015,\"status\":1,\"type\":\"ARTICLE\"}','153484383978701000030'),('153484421668308000032',1,'2018-08-21 17:36:57',147,'ArticleWithBLOBs','文章','UPDATE','超级管理员','通用规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":21,\"day\":2,\"hours\":17,\"minutes\":30,\"month\":7,\"seconds\":40,\"time\":1534843840000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153484383978701000030\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"通用规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1015,\"status\":1,\"type\":\"ARTICLE\"}','153484383978701000030'),('153484550417008000033',1,'2018-08-21 17:58:24',148,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":19,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre><h2 id=\\\"4-安全规范\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#4-安全规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、安全规范<\\/h2>\\n<h3 id=\\\"1-请求方法规范\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求方法规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求方法规范<\\/h3>\\n<p data-source-line=\\\"46\\\">所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。<\\/p>\\n<p data-source-line=\\\"48\\\">例如spring:<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(path = <span class=\\\"hljs-string\\\">\\\"save\\\"<\\/span>, method = RequestMethod.POST)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"保存\\\"<\\/span>, desc = <span class=\\\"hljs-string\\\">\\\"添加或修改\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    <span class=\\\"hljs-selector-tag\\\">if<\\/span> (entity.getId() == null)\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.add<\\/span>(wObject, entity);\\n    } else\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.updateById<\\/span>(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}<\\/code><\\/pre><p data-source-line=\\\"65\\\">对于OftenPorter框架可无需显示写出，因为默认只为GET方法。<\\/p>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\\n\\n## 4、安全规范\\n\\n### 1、请求方法规范\\n所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n\\n例如spring:\\n```\\n@RequestMapping(path = \\\"save\\\", method = RequestMethod.POST)\\n@PortComment(name = \\\"保存\\\", desc = \\\"添加或修改\\\")\\n@ResponseBody\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    if (entity.getId() == null)\\n    {\\n        theBaseService.add(wObject, entity);\\n    } else\\n    {\\n        theBaseService.updateById(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}\\n```\\n对于OftenPorter框架可无需显示写出，因为默认只为GET方法。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153490970858908000034',1,'2018-08-22 11:48:29',149,'ArticleWithBLOBs','文章','UPDATE','超级管理员','基于骨架archetype-spring-boot-web的项目规范','{\"brief\":\"将OftenPorter框架与Spring Boot进行融合，且对Mybatis进行了增强\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":18,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-spring集成的说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-spring集成的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、Spring集成的说明<\\/h1>\\n<h2 id=\\\"1控制器约定\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1控制器约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.控制器约定<\\/h2>\\n<ol data-source-line=\\\"3\\\">\\n<li>控制器及函数需要加上@PortComment注解<\\/li>\\n<li>控制器path=/xxx/<\\/li>\\n<li>函数path=xxx（可以为空\\\"\\\"）<\\/li>\\n<li>在类或函数上添加@Anonymous，表示匿名可访问接口。<\\/li>\\n<li>控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类<\\/li>\\n<li>支持@LinkApiInvoke（请求方法为GET）与@WithApiInvoke<\\/li>\\n<\\/ol>\\n<p data-source-line=\\\"10\\\"><strong>例如<\\/strong>：<\\/p>\\n<pre data-source-line=\\\"12\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@Controller<\\/span>\\n<span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"/Hello/\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"Hello接口\\\"<\\/span>,desc = <span class=\\\"hljs-string\\\">\\\"这是描述内容\\\"<\\/span>)\\npublic class HelloController\\n{\\n\\n    <span class=\\\"hljs-variable\\\">@Autowired<\\/span>\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>({<span class=\\\"hljs-string\\\">\\\"index\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>})\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"首页\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Anonymous<\\/span>\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    <span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(<span class=\\\"hljs-string\\\">\\\"say\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\n    <span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"有话要说\\\"<\\/span>)\\n    <span class=\\\"hljs-variable\\\">@Transactional<\\/span>\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello<span class=\\\"hljs-selector-class\\\">.setWord<\\/span>(LogUtil.getTime() + <span class=\\\"hljs-string\\\">\\\":Hello World-欢迎来中国！\\\"<\\/span>);\\n        helloService<span class=\\\"hljs-selector-class\\\">.insert<\\/span>(hello);\\n\\n        <span class=\\\"hljs-selector-tag\\\">if<\\/span> (random.nextBoolean())\\n        {\\n            helloService<span class=\\\"hljs-selector-class\\\">.clearAll<\\/span>();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2纯数据接口说明\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#2纯数据接口说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.纯数据接口说明<\\/h2>\\n<ol data-source-line=\\\"53\\\">\\n<li>请返回JResponse。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"3事务约定\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#3事务约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.事务约定<\\/h2>\\n<ol data-source-line=\\\"56\\\">\\n<li>事务可加在控制器层(纯数据接口)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"4在service里面引入dao的方式\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#4在service里面引入dao的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.在Service里面引入Dao的方式<\\/h2>\\n<p data-source-line=\\\"59\\\">请用@AutoSet注解引入，例如：<\\/p>\\n<pre data-source-line=\\\"61\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-meta\\\">@Service<\\/span>\\n<span class=\\\"hljs-keyword\\\">public<\\/span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class<\\/span> <span class=\\\"hljs-title\\\">HelloService<\\/span> ...{<\\/span>\\n    <span class=\\\"hljs-meta\\\">@AutoSet<\\/span>\\n    HelloDao helloDao;\\n    ...\\n}<\\/code><\\/pre><h2 id=\\\"5目录结构与继承约定\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#5目录结构与继承约定\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.目录结构与继承约定<\\/h2>\\n<h3 id=\\\"1目录结构\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#1目录结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(1)目录结构<\\/h3>\\n<pre data-source-line=\\\"73\\\"><code class=\\\"hljs\\\">基础包:cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span>.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         <span class=\\\"hljs-selector-class\\\">.common<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.db<\\/span>\\n                DBUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseEntity<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseDao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseService<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                TheBaseController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n            <span class=\\\"hljs-selector-class\\\">.util<\\/span>\\n                AppUtil<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                ...\\n         <span class=\\\"hljs-selector-class\\\">.modules<\\/span>\\n            <span class=\\\"hljs-selector-class\\\">.hello<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.controller<\\/span>\\n                    HelloController<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                <span class=\\\"hljs-selector-class\\\">.entity<\\/span>\\n                    Hello1<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n                <span class=\\\"hljs-selector-class\\\">.service<\\/span>\\n                    Hello1Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Dao<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello1Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    Hello2Service<span class=\\\"hljs-selector-class\\\">.java<\\/span>\\n                    ...\\n         <span class=\\\"hljs-selector-class\\\">.modules_xxxx<\\/span>\\n         <span class=\\\"hljs-selector-class\\\">.startup<\\/span>\\n            ...<\\/code><\\/pre><h3 id=\\\"2继承\\\" data-source-line=\\\"107\\\"><a class=\\\"anchor\\\" href=\\\"#2继承\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>(2)继承<\\/h3>\\n<ul data-source-line=\\\"108\\\">\\n<li>Entity：TheBaseEntity<\\/li>\\n<li>Dao：TheBaseDao<\\/li>\\n<li>Service:TheBaseService<\\/li>\\n<li>Controller:TheBaseController<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":10,\"day\":5,\"hours\":9,\"minutes\":54,\"month\":7,\"seconds\":43,\"time\":1533866083000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153386608341501000008\",\"markdown\":\"# 一、Spring集成的说明\\n## 1.控制器约定\\n1. 控制器及函数需要加上@PortComment注解\\n2. 控制器path=/xxx/\\n3. 函数path=xxx（可以为空\\\"\\\"）\\n4. 在类或函数上添加@Anonymous，表示匿名可访问接口。\\n5. 控制器支持的函数形参：WObject,SpringBaseEntity子类,TableOption,SessionUser或者其具体子类\\n6. 支持@LinkApiInvoke（请求方法为GET）与@WithApiInvoke\\n\\n**例如**：\\n\\n```\\n@Controller\\n@RequestMapping(\\\"/Hello/\\\")\\n@PortComment(name = \\\"Hello接口\\\",desc = \\\"这是描述内容\\\")\\npublic class HelloController\\n{\\n\\n    @Autowired\\n    HelloService helloService;\\n\\n    Random random=new Random();\\n\\n    @RequestMapping({\\\"index\\\", \\\"\\\"})\\n    @PortComment(name = \\\"首页\\\")\\n    @Anonymous\\n    public String index(HttpServletRequest request)\\n    {\\n        return \\\"index\\\";\\n    }\\n\\n    @RequestMapping(\\\"say\\\")\\n    @ResponseBody\\n    @PortComment(name = \\\"有话要说\\\")\\n    @Transactional\\n    public JResponse say()\\n    {\\n        Hello hello = new Hello();\\n        hello.setWord(LogUtil.getTime() + \\\":Hello World-欢迎来中国！\\\");\\n        helloService.insert(hello);\\n\\n        if (random.nextBoolean())\\n        {\\n            helloService.clearAll();\\n        }\\n\\n        return JResponse.success(helloService.listAll());\\n    }\\n}\\n```\\n\\n## 2.纯数据接口说明\\n1. 请返回JResponse。\\n\\n## 3.事务约定\\n1. 事务可加在控制器层(纯数据接口)。\\n\\n## 4.在Service里面引入Dao的方式\\n请用@AutoSet注解引入，例如：\\n\\n```\\n@Service\\npublic class HelloService ...{\\n    @AutoSet\\n    HelloDao helloDao;\\n    ...\\n}\\n```\\n\\n## 5.目录结构与继承约定\\n### (1)目录结构\\n\\n```\\n基础包:cn.xishan.${projecttype}.${project}\\n--------------------\\n${基础包}\\n         .common\\n            .db\\n                DBUtil.java\\n                TheBaseEntity.java\\n                TheBaseDao.java\\n                TheBaseService.java\\n                TheBaseController.java\\n                ...\\n            .util\\n                AppUtil.java\\n                ...\\n         .modules\\n            .hello\\n                .controller\\n                    HelloController.java\\n                .entity\\n                    Hello1.java\\n                    Hello2.java\\n                    ...\\n                .service\\n                    Hello1Dao.java\\n                    Hello2Dao.java\\n                    Hello1Service.java\\n                    Hello2Service.java\\n                    ...\\n         .modules_xxxx\\n         .startup\\n            ...\\n```\\n\\n### (2)继承\\n- Entity：TheBaseEntity\\n- Dao：TheBaseDao\\n- Service:TheBaseService\\n- Controller:TheBaseController\",\"mkey\":\"\",\"moduleId\":\"153259817042209000013\",\"name\":\"基于骨架archetype-spring-boot-web的项目规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1013,\"status\":1,\"type\":\"ARTICLE\"}','153386608341501000008'),('153543292863808000035',1,'2018-08-28 13:08:49',150,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":41,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\"><strong>例如<\\/strong>：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n**例如**：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153544546175308000036',1,'2018-08-28 16:37:42',151,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":24,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormilliseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormilliseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrMilliseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"3formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"4formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"5formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"6formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"7formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"8formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#8formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h3 id=\\\"9formatofmonthdayhoursminutes\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#9formatofmonthdayhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9)formatOfMonthDayHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"82\\\">返回“月-日 时:分”。<\\/p>\\n<h3 id=\\\"10formatofhoursminutes\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#10formatofhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10)formatOfHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"85\\\">返回“时:分”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"89\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"99\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"100\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)\\n\\n```\\ndateOrMilliseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 3)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 4)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 5)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 6)formatOfDate()\\n返回“年-月-日”。\\n\\n### 7)formatOfMonth()\\n返回“年-月”。\\n\\n### 8)formatOfYear()\\n返回“年”。\\n\\n### 9)formatOfMonthDayHoursMinutes()\\n返回“月-日 时:分”。\\n\\n### 10)formatOfHoursMinutes()\\n返回“时:分”。\\n\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153544690650008000037',1,'2018-08-28 17:01:47',152,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":20,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre><h2 id=\\\"4-安全规范\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#4-安全规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、安全规范<\\/h2>\\n<h3 id=\\\"1-请求方法规范\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求方法规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求方法规范<\\/h3>\\n<p data-source-line=\\\"46\\\">所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。<\\/p>\\n<p data-source-line=\\\"48\\\">例如spring:<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(path = <span class=\\\"hljs-string\\\">\\\"save\\\"<\\/span>, method = RequestMethod.POST)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"保存\\\"<\\/span>, desc = <span class=\\\"hljs-string\\\">\\\"添加或修改\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    <span class=\\\"hljs-selector-tag\\\">if<\\/span> (entity.getId() == null)\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.add<\\/span>(wObject, entity);\\n    } else\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.updateById<\\/span>(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}<\\/code><\\/pre><p data-source-line=\\\"65\\\">对于OftenPorter框架可无需显示写出，因为默认只为GET方法。<\\/p>\\n<h2 id=\\\"5-日志\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#5-日志\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5、日志<\\/h2>\\n<p data-source-line=\\\"68\\\">日志打印用<strong>slf4j<\\/strong>。<\\/p>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\\n\\n## 4、安全规范\\n\\n### 1、请求方法规范\\n所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n\\n例如spring:\\n```\\n@RequestMapping(path = \\\"save\\\", method = RequestMethod.POST)\\n@PortComment(name = \\\"保存\\\", desc = \\\"添加或修改\\\")\\n@ResponseBody\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    if (entity.getId() == null)\\n    {\\n        theBaseService.add(wObject, entity);\\n    } else\\n    {\\n        theBaseService.updateById(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}\\n```\\n对于OftenPorter框架可无需显示写出，因为默认只为GET方法。\\n\\n## 5、日志\\n日志打印用**slf4j**。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153544699722608000038',1,'2018-08-28 17:03:17',153,'ArticleWithBLOBs','文章','UPDATE','超级管理员','Java规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":21,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-命名规范\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-命名规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、命名规范<\\/h1>\\n<h2 id=\\\"1-基础\\\" data-source-line=\\\"2\\\"><a class=\\\"anchor\\\" href=\\\"#1-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、基础<\\/h2>\\n<p data-source-line=\\\"3\\\">【推荐】“驼峰命名法”。<\\/p>\\n<h2 id=\\\"2-数据库dao层\\\" data-source-line=\\\"5\\\"><a class=\\\"anchor\\\" href=\\\"#2-数据库dao层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、数据库Dao层<\\/h2>\\n<ul data-source-line=\\\"6\\\">\\n<li>【<mark>强制<\\/mark>】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。<\\/li>\\n<li>【<mark>强制<\\/mark>】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">AccessClass getByTied(<span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"aid\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> aid, <span class=\\\"hljs-symbol\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"tied\\\"<\\/span>) <span class=\\\"hljs-built_in\\\">String<\\/span> tied)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><ul data-source-line=\\\"12\\\">\\n<li>【推荐】只有一个查询条件的，不用实体参数，如：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">不符合：\\n<span class=\\\"hljs-function\\\">AccessClass <span class=\\\"hljs-title\\\">getById<\\/span><span class=\\\"hljs-params\\\">(AccessClass accessClass)<\\/span><\\/span>;\\n\\n符合要求：\\nAccessClass getById(<span class=\\\"hljs-meta\\\">@Param<\\/span>(<span class=\\\"hljs-string\\\">\\\"id\\\"<\\/span>) String id);<\\/code><\\/pre><h2 id=\\\"3-数据接口统一返回对象\\\" data-source-line=\\\"21\\\"><a class=\\\"anchor\\\" href=\\\"#3-数据接口统一返回对象\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、数据接口统一返回对象<\\/h2>\\n<pre data-source-line=\\\"23\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.JResponse<\\/span><\\/code><\\/pre><p data-source-line=\\\"26\\\">其json格式如下：<\\/p>\\n<pre data-source-line=\\\"28\\\"><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-string\\\">code  :<\\/span>  <span class=\\\"hljs-number\\\">0<\\/span>,   <span class=\\\"hljs-comment\\\">//结果码（必定含有），int型，0表示成功，其他值表示失败<\\/span>\\n  <span class=\\\"hljs-string\\\">cname :<\\/span>  <span class=\\\"hljs-string\\\">\\\"SUCCESS\\\"<\\/span>, <span class=\\\"hljs-comment\\\">//结果码的文字表示，便于调试查看<\\/span>\\n  <span class=\\\"hljs-string\\\">rs    :<\\/span>  Object ,  <span class=\\\"hljs-comment\\\">//结果对象，可选，任何类型<\\/span>\\n  <span class=\\\"hljs-string\\\">desc  :<\\/span>  String,  <span class=\\\"hljs-comment\\\">//描述内容，可选，如错误描述内容<\\/span>\\n  <span class=\\\"hljs-string\\\">extra    :<\\/span>  Object  <span class=\\\"hljs-comment\\\">//额外的结果对象，可选，任何类型<\\/span>\\n}<\\/code><\\/pre><p data-source-line=\\\"37\\\">其他的内置code请见：<\\/p>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\">cn<span class=\\\"hljs-selector-class\\\">.xishan<\\/span><span class=\\\"hljs-selector-class\\\">.oftenporter<\\/span><span class=\\\"hljs-selector-class\\\">.porter<\\/span><span class=\\\"hljs-selector-class\\\">.core<\\/span><span class=\\\"hljs-selector-class\\\">.ResultCode<\\/span><\\/code><\\/pre><h2 id=\\\"4-安全规范\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#4-安全规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、安全规范<\\/h2>\\n<h3 id=\\\"1-请求方法规范\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求方法规范\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求方法规范<\\/h3>\\n<p data-source-line=\\\"46\\\">所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。<\\/p>\\n<p data-source-line=\\\"48\\\">例如spring:<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-variable\\\">@RequestMapping<\\/span>(path = <span class=\\\"hljs-string\\\">\\\"save\\\"<\\/span>, method = RequestMethod.POST)\\n<span class=\\\"hljs-variable\\\">@PortComment<\\/span>(name = <span class=\\\"hljs-string\\\">\\\"保存\\\"<\\/span>, desc = <span class=\\\"hljs-string\\\">\\\"添加或修改\\\"<\\/span>)\\n<span class=\\\"hljs-variable\\\">@ResponseBody<\\/span>\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    <span class=\\\"hljs-selector-tag\\\">if<\\/span> (entity.getId() == null)\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.add<\\/span>(wObject, entity);\\n    } else\\n    {\\n        theBaseService<span class=\\\"hljs-selector-class\\\">.updateById<\\/span>(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}<\\/code><\\/pre><p data-source-line=\\\"65\\\">对于OftenPorter框架可无需显示写出，因为默认只为GET方法。<\\/p>\\n<h2 id=\\\"5-日志\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#5-日志\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5、日志<\\/h2>\\n<p data-source-line=\\\"68\\\">日志打印用<strong>slf4j<\\/strong>。<\\/p>\\n<h2 id=\\\"5-数据接口层或控制器层\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#5-数据接口层或控制器层\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5、数据接口层或控制器层<\\/h2>\\n<h3 id=\\\"1-无需进行通用的异常捕获\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#1-无需进行通用的异常捕获\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、无需进行通用的异常捕获<\\/h3>\\n<pre data-source-line=\\\"75\\\"><code class=\\\"hljs\\\">无需加<span class=\\\"hljs-selector-tag\\\">try-catch<\\/span>，例如这样使得切面无法捕获特定特定的异常，且更好方式取代这种。\\n<span class=\\\"hljs-selector-tag\\\">try<\\/span>\\n{\\n    ....\\n}\\n<span class=\\\"hljs-selector-tag\\\">catch<\\/span>(Exception e){\\n    LOGGER<span class=\\\"hljs-selector-class\\\">.warn<\\/span>(e.getMessage(), e);\\n    return JResponse<span class=\\\"hljs-selector-class\\\">.failed<\\/span>(<span class=\\\"hljs-string\\\">\\\"系统错误\\\"<\\/span>);\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":17,\"minutes\":16,\"month\":6,\"seconds\":3,\"time\":1532596563000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259656286201000009\",\"markdown\":\"# 一、命名规范\\n## 1、基础\\n【推荐】“驼峰命名法”。\\n\\n## 2、数据库Dao层\\n- 【==强制==】基础增删改查基础名称：insert(或add),delete,update,get(查询单条),list,listAll。\\n- 【==强制==】非实体参数，用注解@Param，如：（基于Mybatis，其他数据层框架类似。）\\n\\n```\\nAccessClass getByTied(@Param(\\\"aid\\\") String aid, @Param(\\\"tied\\\") String tied);\\n```\\n- 【推荐】只有一个查询条件的，不用实体参数，如：\\n\\n```\\n不符合：\\nAccessClass getById(AccessClass accessClass);\\n\\n符合要求：\\nAccessClass getById(@Param(\\\"id\\\") String id);\\n```\\n## 3、数据接口统一返回对象\\n\\n```\\ncn.xishan.oftenporter.porter.core.JResponse\\n```\\n其json格式如下：\\n\\n```\\n{\\n  code  :  0,   //结果码（必定含有），int型，0表示成功，其他值表示失败\\n  cname :  \\\"SUCCESS\\\", //结果码的文字表示，便于调试查看\\n  rs    :  Object ,  //结果对象，可选，任何类型\\n  desc  :  String,  //描述内容，可选，如错误描述内容\\n  extra    :  Object  //额外的结果对象，可选，任何类型\\n}\\n```\\n其他的内置code请见：\\n\\n```\\ncn.xishan.oftenporter.porter.core.ResultCode\\n```\\n\\n## 4、安全规范\\n\\n### 1、请求方法规范\\n所有后台代码（尤其是具有写或修改操作的），须显示的写上请求方法类型POST、PUT或DELETE等。\\n\\n例如spring:\\n```\\n@RequestMapping(path = \\\"save\\\", method = RequestMethod.POST)\\n@PortComment(name = \\\"保存\\\", desc = \\\"添加或修改\\\")\\n@ResponseBody\\npublic JResponse save(WObject wObject, E entity)\\n{\\n    if (entity.getId() == null)\\n    {\\n        theBaseService.add(wObject, entity);\\n    } else\\n    {\\n        theBaseService.updateById(wObject, entity);\\n    }\\n    return JResponse.success(entity.getId());\\n}\\n```\\n对于OftenPorter框架可无需显示写出，因为默认只为GET方法。\\n\\n## 5、日志\\n日志打印用**slf4j**。\\n\\n\\n## 5、数据接口层或控制器层\\n\\n### 1、无需进行通用的异常捕获\\n\\n```\\n无需加try-catch，例如这样使得切面无法捕获特定特定的异常，且更好方式取代这种。\\ntry\\n{\\n    ....\\n}\\ncatch(Exception e){\\n    LOGGER.warn(e.getMessage(), e);\\n    return JResponse.failed(\\\"系统错误\\\");\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"Java规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1009,\"status\":1,\"type\":\"ARTICLE\"}','153259656286201000009'),('153560830734508000039',1,'2018-08-30 13:51:47',154,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":28,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面]<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormilliseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormilliseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrMilliseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"3formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"4formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"5formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"6formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"7formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"8formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#8formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h3 id=\\\"9formatofmonthdayhoursminutes\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#9formatofmonthdayhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9)formatOfMonthDayHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"82\\\">返回“月-日 时:分”。<\\/p>\\n<h3 id=\\\"10formatofmonthday\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#10formatofmonthday\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10)formatOfMonthDay()<\\/h3>\\n<p data-source-line=\\\"85\\\">返回“月-日”。<\\/p>\\n<h3 id=\\\"11formatofhoursminutes\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#11formatofhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11)formatOfHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"88\\\">返回“时:分”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"92\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"93\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"102\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"103\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面]\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)\\n\\n```\\ndateOrMilliseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 3)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 4)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 5)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 6)formatOfDate()\\n返回“年-月-日”。\\n\\n### 7)formatOfMonth()\\n返回“年-月”。\\n\\n### 8)formatOfYear()\\n返回“年”。\\n\\n### 9)formatOfMonthDayHoursMinutes()\\n返回“月-日 时:分”。\\n\\n### 10)formatOfMonthDay()\\n返回“月-日”。\\n\\n### 11)formatOfHoursMinutes()\\n返回“时:分”。\\n\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153560835547908000040',1,'2018-08-30 13:52:35',155,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":20,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":1000,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153560876510308000041',1,'2018-08-30 13:59:25',156,'ArticleWithBLOBs','文章','UPDATE','超级管理员','其他工具与方法','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"探索中\",\"click\":29,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xssimpleedit\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xssimpleedit\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsSimpleEdit<\\/h2>\\n<p data-source-line=\\\"2\\\">用于编辑，列表页面与编辑页面是单独的页面。<\\/p>\\n<ul data-source-line=\\\"3\\\">\\n<li>******<strong><strong><strong><strong><em>[主页面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>title:[主页面]<\\/li>\\n<li>size:[width,height] [主页面]<\\/li>\\n<li>width:[主页面]<\\/li>\\n<li>height:[主页面]<\\/li>\\n<li>min:[width,height] [主页面]<\\/li>\\n<li>max:[width,height] [主页面]<\\/li>\\n<li>url：[主页面]有表示主页面，没有表示被打开的页面<\\/li>\\n<li>saveLoading:保存时是否有等待框，默认是<\\/li>\\n<li>autoShowMsg:是否自动显示消息，默认是<\\/li>\\n<li>useParent:true<\\/li>\\n<li>********<strong><strong><strong><em>[编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>form:可选[编辑界面]<\\/li>\\n<li>urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]<\\/li>\\n<li>path:可选,可有表单action提供[编辑界面]<\\/li>\\n<li>method:可选,可有表单method提供[编辑界面]<\\/li>\\n<li>toSave:function()保存,[编辑界面]<\\/li>\\n<li>beforeSubmit:function(data,callback(data)),对form有效[编辑界面],返回false表示终止提交<\\/li>\\n<li>*<strong><strong><strong><strong><strong><strong><strong><em>[主页面][编辑界面]<\\/em><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/strong><\\/li>\\n<li>onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面<\\/li>\\n<li>onConnected:function(initData,option):[主页面][编辑界面]<\\/li>\\n<li>initData:[主页面][编辑界面]<\\/li>\\n<li>handle.close:function()[主页面]<\\/li>\\n<li>handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果<\\/li>\\n<li>handle.submit:function()[编辑界面]<\\/li>\\n<li>handle.putValues:function(data)[编辑界面]<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2网络访问的简单再封装xxxwithloading\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#2网络访问的简单再封装xxxwithloading\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.网络访问的简单再封装xxxWithLoading<\\/h2>\\n<p data-source-line=\\\"31\\\">ajax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：<\\/p>\\n<pre data-source-line=\\\"34\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">okMsg:<\\/span>可选,访问成功的信息\\n<span class=\\\"hljs-symbol\\\">errMsg:<\\/span>可选,访问失败的信息\\n<span class=\\\"hljs-symbol\\\">params:<\\/span>对象，提交的参数<\\/code><\\/pre><h3 id=\\\"1deletewithloadingurl-callback-option\\\" data-source-line=\\\"40\\\"><a class=\\\"anchor\\\" href=\\\"#1deletewithloadingurl-callback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)deleteWithLoading(url, callback, option)<\\/h3>\\n<p data-source-line=\\\"41\\\">请求方为DELETE。<\\/p>\\n<h3 id=\\\"2putwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#2putwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)putWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"44\\\">请求方为PUT。<\\/p>\\n<h3 id=\\\"3getwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3getwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)getWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"47\\\">请求方为GET。<\\/p>\\n<h3 id=\\\"4postwithloadingurl-callback-failcallback-option\\\" data-source-line=\\\"49\\\"><a class=\\\"anchor\\\" href=\\\"#4postwithloadingurl-callback-failcallback-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)postWithLoading(url, callback, failCallback, option)<\\/h3>\\n<p data-source-line=\\\"50\\\">请求方为POST。<\\/p>\\n<h2 id=\\\"3日期格式化windowformateofxxxxxdateormilliseconds\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#3日期格式化windowformateofxxxxxdateormilliseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)<\\/h2>\\n<pre data-source-line=\\\"54\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">dateOrMilliseconds:<\\/span>Date对象或时间毫秒数<\\/code><\\/pre><h3 id=\\\"1formatofdatetimemaydayname\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1formatofdatetimemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1)formatOfDatetimeMayDayName()<\\/h3>\\n<p data-source-line=\\\"58\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"2formatofdateminutesmaydayname\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2formatofdateminutesmaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2)formatOfDateMinutesMayDayName()<\\/h3>\\n<p data-source-line=\\\"61\\\">返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"3formatofdatemaydayname\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#3formatofdatemaydayname\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3)formatOfDateMayDayName()<\\/h3>\\n<p data-source-line=\\\"64\\\">返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。<\\/p>\\n<h3 id=\\\"4formatofdatetime\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#4formatofdatetime\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4)formatOfDatetime()<\\/h3>\\n<p data-source-line=\\\"67\\\">返回“年-月-日 时:分:秒”。<\\/p>\\n<h3 id=\\\"5formatofdateminutes\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#5formatofdateminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5)formatOfDateMinutes()<\\/h3>\\n<p data-source-line=\\\"70\\\">返回“年-月-日 时:分”。<\\/p>\\n<h3 id=\\\"6formatofdate\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#6formatofdate\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6)formatOfDate()<\\/h3>\\n<p data-source-line=\\\"73\\\">返回“年-月-日”。<\\/p>\\n<h3 id=\\\"7formatofmonth\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#7formatofmonth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7)formatOfMonth()<\\/h3>\\n<p data-source-line=\\\"76\\\">返回“年-月”。<\\/p>\\n<h3 id=\\\"8formatofyear\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#8formatofyear\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8)formatOfYear()<\\/h3>\\n<p data-source-line=\\\"79\\\">返回“年”。<\\/p>\\n<h3 id=\\\"9formatofmonthdayhoursminutes\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#9formatofmonthdayhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9)formatOfMonthDayHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"82\\\">返回“月-日 时:分”。<\\/p>\\n<h3 id=\\\"10formatofmonthday\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#10formatofmonthday\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10)formatOfMonthDay()<\\/h3>\\n<p data-source-line=\\\"85\\\">返回“月-日”。<\\/p>\\n<h3 id=\\\"11formatofhoursminutes\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#11formatofhoursminutes\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11)formatOfHoursMinutes()<\\/h3>\\n<p data-source-line=\\\"88\\\">返回“时:分”。<\\/p>\\n<h2 id=\\\"4xsrequestoption\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#4xsrequestoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsRequest(option)<\\/h2>\\n<p data-source-line=\\\"92\\\">网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。<\\/p>\\n<pre data-source-line=\\\"93\\\"><code class=\\\"hljs\\\">sdk.xsRequest({\\n...\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json)<\\/span><\\/span>{\\n    <span class=\\\"hljs-keyword\\\">return<\\/span> json.rs;\\n}).<span class=\\\"hljs-keyword\\\">then<\\/span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(rs)<\\/span><\\/span>{\\n    console.<span class=\\\"hljs-built_in\\\">log<\\/span>(rs);\\n});<\\/code><\\/pre><p data-source-line=\\\"102\\\">option参数说明:<\\/p>\\n<ul data-source-line=\\\"103\\\">\\n<li>method:请求方法，默认get，如get,post,put,delete等。<\\/li>\\n<li>url:访问的地址。<\\/li>\\n<li>callback:function(json)不管成功失败，都会调用，在then之前调用。<\\/li>\\n<li>loading:boolean类型，默认false，表示是否显示加载动画。<\\/li>\\n<li>errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。<\\/li>\\n<li>successInfo：成功时的提示信息，默认undefined。<\\/li>\\n<li>params:对象，提交的参数，如果内部属不为字符串，则会进行转换。<\\/li>\\n<li>headers:对象，请求头信息。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":2,\"day\":4,\"hours\":8,\"minutes\":55,\"month\":7,\"seconds\":32,\"time\":1533171332000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153317133222301000013\",\"markdown\":\"## 1.xsSimpleEdit\\n用于编辑，列表页面与编辑页面是单独的页面。\\n* ***************[主页面]*********\\n* title:[主页面]\\n* size:[width,height] [主页面]\\n* width:[主页面]\\n* height:[主页面]\\n* min:[width,height] [主页面]\\n* max:[width,height] [主页面]\\n* url：[主页面]有表示主页面，没有表示被打开的页面\\n* saveLoading:保存时是否有等待框，默认是\\n* autoShowMsg:是否自动显示消息，默认是\\n* useParent:true\\n* ***************[编辑界面]*******\\n* form:可选[编辑界面]\\n* urlPrefix:接口地址前缀，默认为lconfig.porter[编辑界面]\\n* path:可选,可有表单action提供[编辑界面]\\n* method:可选,可有表单method提供[编辑界面]\\n* toSave:function()保存,[编辑界面]\\n* beforeSubmit:function(data,callback(data)),对form有效[编辑界面],返回false表示终止提交\\n* ****************[主页面][编辑界面]***************\\n* onResult:function(isOk,msg,json):[主页面]是回调,返回false:主界面将不会自动弹出消息，编辑界面不发送结给主界面\\n* onConnected:function(initData,option):[主页面][编辑界面]\\n* initData:[主页面][编辑界面]\\n* handle.close:function()[主页面]\\n* handle.onResult:function(isOk,msg,json)[编辑界面]编辑页面可以主动返回结果\\n* handle.submit:function()[编辑界面]\\n* handle.putValues:function(data)[编辑界面]\\n\\n## 2.网络访问的简单再封装xxxWithLoading\\najax访问，并带有模态加载框，且有气泡提示。\\noption参数说明：\\n\\n```\\nokMsg:可选,访问成功的信息\\nerrMsg:可选,访问失败的信息\\nparams:对象，提交的参数\\n```\\n\\n### 1)deleteWithLoading(url, callback, option)\\n请求方为DELETE。\\n\\n### 2)putWithLoading(url, callback, failCallback, option)\\n请求方为PUT。\\n\\n### 3)getWithLoading(url, callback, failCallback, option)\\n请求方为GET。\\n\\n### 4)postWithLoading(url, callback, failCallback, option)\\n请求方为POST。\\n\\n## 3.日期格式化window.formateOfXXXXX(dateOrMilliseconds)\\n\\n```\\ndateOrMilliseconds:Date对象或时间毫秒数\\n```\\n### 1)formatOfDatetimeMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 2)formatOfDateMinutesMayDayName()\\n返回“今天 时:分”、“昨天 时:分”、“三天前 时:分”、“四天前 时:分”等，其返回“年-月-日 时:分”。\\n\\n### 3)formatOfDateMayDayName()\\n返回“今天”、“昨天”、“三天前”、“四天前”等，其返回“年-月-日”。\\n\\n### 4)formatOfDatetime()\\n返回“年-月-日 时:分:秒”。\\n\\n### 5)formatOfDateMinutes()\\n返回“年-月-日 时:分”。\\n\\n### 6)formatOfDate()\\n返回“年-月-日”。\\n\\n### 7)formatOfMonth()\\n返回“年-月”。\\n\\n### 8)formatOfYear()\\n返回“年”。\\n\\n### 9)formatOfMonthDayHoursMinutes()\\n返回“月-日 时:分”。\\n\\n### 10)formatOfMonthDay()\\n返回“月-日”。\\n\\n### 11)formatOfHoursMinutes()\\n返回“时:分”。\\n\\n\\n## 4.xsRequest(option)\\n网络请求，对象xshttp进行的一个封封装，支持loading、信息提示、then操作。\\n```\\nsdk.xsRequest({\\n...\\n}).then(function(json){\\n    return json.rs;\\n}).then(function(rs){\\n    console.log(rs);\\n});\\n```\\noption参数说明:\\n- method:请求方法，默认get，如get,post,put,delete等。\\n- url:访问的地址。\\n- callback:function(json)不管成功失败，都会调用，在then之前调用。\\n- loading:boolean类型，默认false，表示是否显示加载动画。\\n- errtoast:boolean类型，默认true，表示是否进行错误提示，在callback或then中返回错对象有效。\\n- successInfo：成功时的提示信息，默认undefined。\\n- params:对象，提交的参数，如果内部属不为字符串，则会进行转换。\\n- headers:对象，请求头信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"其他工具与方法\",\"projectId\":\"153188636499907000002\",\"sequence\":1002,\"status\":1,\"type\":\"ARTICLE\"}','153317133222301000013'),('153603459932108000042',1,'2018-09-04 12:16:39',157,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据表格','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":23,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"1\\\">数据表格API,最后必须调用done()方法。<\\/p>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">通过\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">attr<\\/span>:value\\n})<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n或\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>()<span class=\\\"hljs-selector-class\\\">.attr<\\/span>(<span class=\\\"hljs-selector-tag\\\">value<\\/span>)<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n调用<\\/code><\\/pre><h1 id=\\\"数据格式\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>数据格式<\\/h1>\\n<h2 id=\\\"1-请求数据格式\\\" data-source-line=\\\"14\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求数据格式<\\/h2>\\n<pre data-source-line=\\\"16\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-attribute\\\">query<\\/span>:{\\n    \\n    },\\n    <span class=\\\"hljs-selector-tag\\\">settings<\\/span>:{\\n        <span class=\\\"hljs-attribute\\\">skip<\\/span>:<span class=\\\"hljs-number\\\">0<\\/span>,\\n        limit:<span class=\\\"hljs-number\\\">20<\\/span>\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2-响应数据格式\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#2-响应数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、响应数据格式<\\/h2>\\n<pre data-source-line=\\\"30\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    code:<\\/span><span class=\\\"hljs-number\\\">0<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    rs:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        data:<\\/span>[],\\n<span class=\\\"hljs-symbol\\\">        limit:<\\/span><span class=\\\"hljs-number\\\">20<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        skip:<\\/span><span class=\\\"hljs-number\\\">0<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        total:<\\/span><span class=\\\"hljs-number\\\">50<\\/span>\\n    }\\n}<\\/code><\\/pre><h1 id=\\\"参数或函数说明\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#参数或函数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>参数或函数说明：<\\/h1>\\n<h2 id=\\\"1cols\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1cols\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.cols<\\/h2>\\n<p data-source-line=\\\"46\\\">【Array】表格列。<\\/p>\\n<ul data-source-line=\\\"48\\\">\\n<li>title：标题名称|dom|function(col)<\\/li>\\n<li>titleColor：css颜色值|function(col)<\\/li>\\n<li>sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field<\\/li>\\n<li>sortable：是否排序|function(col),会显示排序按钮<\\/li>\\n<li>fixed：left|right|function(col)，固定列<\\/li>\\n<li>initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序<\\/li>\\n<li>width：宽度值|function(col)<\\/li>\\n<li>edit：text|function(col),编辑项,isText为true时有效<\\/li>\\n<li>align：center|left|right|function(col)，设置标题的对齐方式<\\/li>\\n<li>checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列<\\/li>\\n<li>notToggle：boolean|function(col)，是否禁止拖动表格列<\\/li>\\n<li>attrTitle：boolean|function()，默认为true，对于文本是否添加title属性<\\/li>\\n<li>alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的<\\/li>\\n<li>isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本<\\/li>\\n<li>field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。<\\/li>\\n<li>color：css颜色值|function(item,col,index,pageInfo)<\\/li>\\n<li>enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2url\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.url<\\/h2>\\n<p data-source-line=\\\"67\\\">访问的地址。<\\/p>\\n<h2 id=\\\"3method\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#3method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.method<\\/h2>\\n<p data-source-line=\\\"70\\\">访问的方法，默认post。<\\/p>\\n<h2 id=\\\"4data\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#4data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.data<\\/h2>\\n<p data-source-line=\\\"73\\\">静态数据[{}]。<\\/p>\\n<h2 id=\\\"5container\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#5container\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.container<\\/h2>\\n<p data-source-line=\\\"76\\\">存放表格的容器，选择器或dom对象。<\\/p>\\n<h2 id=\\\"6width\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#6width\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.width<\\/h2>\\n<p data-source-line=\\\"79\\\">表格宽度。<\\/p>\\n<h2 id=\\\"7height\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#7height\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.height<\\/h2>\\n<p data-source-line=\\\"82\\\">表格高度|full-差值,默认full-0。<\\/p>\\n<h2 id=\\\"8haspage\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#8haspage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.hasPage<\\/h2>\\n<p data-source-line=\\\"85\\\">是否有分页,默认true。<\\/p>\\n<h2 id=\\\"9sortmulti\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#9sortmulti\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.sortMulti<\\/h2>\\n<p data-source-line=\\\"88\\\">是否支持多列同时排序,默认false。<\\/p>\\n<h2 id=\\\"10params\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#10params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.params<\\/h2>\\n<p data-source-line=\\\"91\\\">查询参数，添加根参数。<\\/p>\\n<h2 id=\\\"11tableoptionparams\\\" data-source-line=\\\"93\\\"><a class=\\\"anchor\\\" href=\\\"#11tableoptionparams\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.tableOptionParams<\\/h2>\\n<p data-source-line=\\\"94\\\">用于添加到query中。<\\/p>\\n<h2 id=\\\"12usetableoptionqueryarray\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#12usetableoptionqueryarray\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.useTableOptionQueryArray<\\/h2>\\n<p data-source-line=\\\"97\\\">默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。<\\/p>\\n<h2 id=\\\"13bindform\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#13bindform\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.bindForm<\\/h2>\\n<p data-source-line=\\\"100\\\">[绑定form对象或选择器,domForClick|function(listener)]。<\\/p>\\n<h2 id=\\\"14size\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#14size\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.size<\\/h2>\\n<p data-source-line=\\\"103\\\">表格大小small|normal|large。<\\/p>\\n<h2 id=\\\"15nottoggle\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#15nottoggle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.notToggle<\\/h2>\\n<p data-source-line=\\\"106\\\">是否禁止拖动表格列,设置表格默认值，会改变列的默认值。<\\/p>\\n<h2 id=\\\"16even\\\" data-source-line=\\\"108\\\"><a class=\\\"anchor\\\" href=\\\"#16even\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.even<\\/h2>\\n<p data-source-line=\\\"109\\\">是否开启隔行背景,默认true。<\\/p>\\n<h2 id=\\\"17attrtitle\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#17attrtitle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.attrTitle<\\/h2>\\n<p data-source-line=\\\"112\\\">对于文本是否添加title属性，默认为false。<\\/p>\\n<h2 id=\\\"18oncelleditlistener\\\" data-source-line=\\\"114\\\"><a class=\\\"anchor\\\" href=\\\"#18oncelleditlistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.onCellEditListener<\\/h2>\\n<p data-source-line=\\\"115\\\">单元格内容被编辑后的监听函数。<\\/p>\\n<pre data-source-line=\\\"117\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,name,newValue,oldValue,row,col)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"19beforerequest\\\" data-source-line=\\\"121\\\"><a class=\\\"anchor\\\" href=\\\"#19beforerequest\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.beforeRequest<\\/h2>\\n<p data-source-line=\\\"122\\\">网络请求之前的回调。<\\/p>\\n<pre data-source-line=\\\"124\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(params)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"20afterajaxok\\\" data-source-line=\\\"128\\\"><a class=\\\"anchor\\\" href=\\\"#20afterajaxok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.afterAjaxOk<\\/h2>\\n<p data-source-line=\\\"129\\\">ajax请求成功后的回调,在onLoadCompleteListener之前。<\\/p>\\n<pre data-source-line=\\\"131\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,okcallback,errcallback)<\\/span><\\/span>{\\n    okcallback(json);\\n}<\\/code><\\/pre><h2 id=\\\"21onloadcompletelistener\\\" data-source-line=\\\"137\\\"><a class=\\\"anchor\\\" href=\\\"#21onloadcompletelistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.onLoadCompleteListener<\\/h2>\\n<p data-source-line=\\\"138\\\">加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。<\\/p>\\n<pre data-source-line=\\\"140\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,loadCount,pageInfo)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"22beforeflush\\\" data-source-line=\\\"144\\\"><a class=\\\"anchor\\\" href=\\\"#22beforeflush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.beforeFlush<\\/h2>\\n<p data-source-line=\\\"145\\\">设置刷之前的回调。<\\/p>\\n<h2 id=\\\"23response_code\\\" data-source-line=\\\"147\\\"><a class=\\\"anchor\\\" href=\\\"#23response_code\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.response_code<\\/h2>\\n<p data-source-line=\\\"148\\\">默认code，结果码。<\\/p>\\n<h2 id=\\\"24response_desc\\\" data-source-line=\\\"150\\\"><a class=\\\"anchor\\\" href=\\\"#24response_desc\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>24.response_desc<\\/h2>\\n<p data-source-line=\\\"151\\\">默认desc，描述。<\\/p>\\n<h2 id=\\\"25response_count\\\" data-source-line=\\\"153\\\"><a class=\\\"anchor\\\" href=\\\"#25response_count\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>25.response_count<\\/h2>\\n<p data-source-line=\\\"154\\\">默认rs.total,总数。<\\/p>\\n<h2 id=\\\"26response_data\\\" data-source-line=\\\"156\\\"><a class=\\\"anchor\\\" href=\\\"#26response_data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>26.response_data<\\/h2>\\n<p data-source-line=\\\"157\\\">默认rs.data,数据，类为数组。<\\/p>\\n<h2 id=\\\"27flushby\\\" data-source-line=\\\"159\\\"><a class=\\\"anchor\\\" href=\\\"#27flushby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>27.flushBy<\\/h2>\\n<p data-source-line=\\\"160\\\">点击刷新的按钮选择器。<\\/p>\\n<h2 id=\\\"28flushbychange\\\" data-source-line=\\\"162\\\"><a class=\\\"anchor\\\" href=\\\"#28flushbychange\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>28.flushByChange<\\/h2>\\n<p data-source-line=\\\"163\\\">输入组件内容改变时刷新表格，[选择器]。<\\/p>\\n<h2 id=\\\"29flush\\\" data-source-line=\\\"165\\\"><a class=\\\"anchor\\\" href=\\\"#29flush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>29.flush<\\/h2>\\n<p data-source-line=\\\"166\\\">function(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。<\\/p>\\n<h2 id=\\\"30getselectedrows\\\" data-source-line=\\\"168\\\"><a class=\\\"anchor\\\" href=\\\"#30getselectedrows\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>30.getSelectedRows<\\/h2>\\n<p data-source-line=\\\"169\\\">function()获取所有选中行的数据。<\\/p>\\n<h2 id=\\\"31setcontent\\\" data-source-line=\\\"171\\\"><a class=\\\"anchor\\\" href=\\\"#31setcontent\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>31.setContent<\\/h2>\\n<p data-source-line=\\\"172\\\">function(row,col,content)设置内容。<\\/p>\\n<h2 id=\\\"32currentpagesize\\\" data-source-line=\\\"174\\\"><a class=\\\"anchor\\\" href=\\\"#32currentpagesize\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>32.currentPageSize<\\/h2>\\n<p data-source-line=\\\"175\\\">function()获取当前页数据行数。<\\/p>\\n<h2 id=\\\"33getlastpageinfo\\\" data-source-line=\\\"177\\\"><a class=\\\"anchor\\\" href=\\\"#33getlastpageinfo\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>33.getLastPageInfo<\\/h2>\\n<p data-source-line=\\\"178\\\">function()获取之前的页面信息。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":48,\"month\":6,\"seconds\":30,\"time\":1532065710000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206570977301000011\",\"markdown\":\"数据表格API,最后必须调用done()方法。\\n\\n```\\n通过\\nsdk.table({\\n    attr:value\\n}).done();\\n或\\nsdk.table().attr(value).done();\\n调用\\n```\\n\\n# 数据格式\\n## 1、请求数据格式\\n\\n```\\n{\\n    query:{\\n    \\n    },\\n    settings:{\\n        skip:0,\\n        limit:20\\n    }\\n}\\n\\n```\\n## 2、响应数据格式\\n\\n```\\n{\\n    code:0,\\n    rs:{\\n        data:[],\\n        limit:20,\\n        skip:0,\\n        total:50\\n    }\\n}\\n```\\n\\n\\n# 参数或函数说明：\\n\\n## 1.cols\\n【Array】表格列。\\n\\n- title：标题名称|dom|function(col)\\n- titleColor：css颜色值|function(col)\\n- sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field\\n- sortable：是否排序|function(col),会显示排序按钮\\n- fixed：left|right|function(col)，固定列\\n- initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序\\n- width：宽度值|function(col)\\n- edit：text|function(col),编辑项,isText为true时有效\\n- align：center|left|right|function(col)，设置标题的对齐方式\\n- checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列\\n- notToggle：boolean|function(col)，是否禁止拖动表格列\\n- attrTitle：boolean|function()，默认为true，对于文本是否添加title属性\\n- alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的\\n- isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本\\n- field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。\\n- color：css颜色值|function(item,col,index,pageInfo)\\n- enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。\\n\\n## 2.url\\n访问的地址。\\n\\n## 3.method\\n访问的方法，默认post。\\n\\n## 4.data\\n静态数据[{}]。\\n\\n## 5.container\\n存放表格的容器，选择器或dom对象。\\n\\n## 6.width\\n表格宽度。\\n\\n## 7.height\\n表格高度|full-差值,默认full-0。\\n\\n## 8.hasPage\\n是否有分页,默认true。\\n\\n## 9.sortMulti\\n是否支持多列同时排序,默认false。\\n\\n## 10.params\\n查询参数，添加根参数。\\n\\n## 11.tableOptionParams\\n用于添加到query中。\\n\\n## 12.useTableOptionQueryArray\\n默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。\\n\\n## 13.bindForm\\n[绑定form对象或选择器,domForClick|function(listener)]。\\n\\n## 14.size\\n表格大小small|normal|large。\\n\\n## 15.notToggle\\n是否禁止拖动表格列,设置表格默认值，会改变列的默认值。\\n\\n## 16.even\\n是否开启隔行背景,默认true。\\n\\n## 17.attrTitle\\n对于文本是否添加title属性，默认为false。\\n\\n## 18.onCellEditListener\\n单元格内容被编辑后的监听函数。\\n\\n```\\nfunction(data,name,newValue,oldValue,row,col)\\n```\\n\\n## 19.beforeRequest\\n网络请求之前的回调。\\n\\n```\\nfunction(params)\\n```\\n\\n## 20.afterAjaxOk\\najax请求成功后的回调,在onLoadCompleteListener之前。\\n\\n```\\nfunction(json,okcallback,errcallback){\\n    okcallback(json);\\n}\\n```\\n\\n## 21.onLoadCompleteListener\\n加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。\\n\\n```\\nfunction(json,loadCount,pageInfo)\\n```\\n\\n## 22.beforeFlush\\n设置刷之前的回调。\\n\\n## 23.response_code\\n默认code，结果码。\\n\\n## 24.response_desc\\n默认desc，描述。\\n\\n## 25.response_count\\n默认rs.total,总数。\\n\\n## 26.response_data\\n默认rs.data,数据，类为数组。\\n\\n## 27.flushBy\\n点击刷新的按钮选择器。\\n\\n## 28.flushByChange\\n输入组件内容改变时刷新表格，[选择器]。\\n\\n## 29.flush\\nfunction(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。\\n\\n## 30.getSelectedRows\\nfunction()获取所有选中行的数据。\\n\\n## 31.setContent\\nfunction(row,col,content)设置内容。\\n\\n## 32.currentPageSize\\nfunction()获取当前页数据行数。\\n\\n## 33.getLastPageInfo\\nfunction()获取之前的页面信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"数据表格\",\"projectId\":\"153188636499907000002\",\"sequence\":1012,\"status\":1,\"type\":\"ARTICLE\"}','153206570977301000011'),('153603550552408000043',1,'2018-09-04 12:31:46',158,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据表格','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"UI功能\",\"click\":23,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"1\\\">数据表格API,最后必须调用done()方法。<\\/p>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">通过\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">attr<\\/span>:value\\n})<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n或\\n<span class=\\\"hljs-selector-tag\\\">sdk<\\/span><span class=\\\"hljs-selector-class\\\">.table<\\/span>()<span class=\\\"hljs-selector-class\\\">.attr<\\/span>(<span class=\\\"hljs-selector-tag\\\">value<\\/span>)<span class=\\\"hljs-selector-class\\\">.done<\\/span>();\\n调用<\\/code><\\/pre><h1 id=\\\"数据格式\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>数据格式<\\/h1>\\n<h2 id=\\\"1-请求数据格式\\\" data-source-line=\\\"14\\\"><a class=\\\"anchor\\\" href=\\\"#1-请求数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、请求数据格式<\\/h2>\\n<pre data-source-line=\\\"16\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-attribute\\\">query<\\/span>:{\\n    \\n    },\\n    <span class=\\\"hljs-selector-tag\\\">settings<\\/span>:{\\n        <span class=\\\"hljs-attribute\\\">skip<\\/span>:<span class=\\\"hljs-number\\\">0<\\/span>,\\n        limit:<span class=\\\"hljs-number\\\">20<\\/span>\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"2-响应数据格式\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#2-响应数据格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、响应数据格式<\\/h2>\\n<pre data-source-line=\\\"30\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    code:<\\/span><span class=\\\"hljs-number\\\">0<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    rs:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        data:<\\/span>[],\\n<span class=\\\"hljs-symbol\\\">        limit:<\\/span><span class=\\\"hljs-number\\\">20<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        skip:<\\/span><span class=\\\"hljs-number\\\">0<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        total:<\\/span><span class=\\\"hljs-number\\\">50<\\/span>\\n    }\\n}<\\/code><\\/pre><h1 id=\\\"参数或函数说明\\\" data-source-line=\\\"43\\\"><a class=\\\"anchor\\\" href=\\\"#参数或函数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>参数或函数说明：<\\/h1>\\n<h2 id=\\\"1cols\\\" data-source-line=\\\"45\\\"><a class=\\\"anchor\\\" href=\\\"#1cols\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.cols<\\/h2>\\n<p data-source-line=\\\"46\\\">【Array】表格列。<\\/p>\\n<ul data-source-line=\\\"48\\\">\\n<li>title：标题名称|dom|function(col)<\\/li>\\n<li>titleColor：css颜色值|function(col)<\\/li>\\n<li>sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field<\\/li>\\n<li>sortable：是否排序|function(col),会显示排序按钮<\\/li>\\n<li>fixed：left|right|function(col)，固定列<\\/li>\\n<li>initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序<\\/li>\\n<li>width：宽度值|function(col)<\\/li>\\n<li>ajustFreeWidth:是否参与分配多余的表格宽度|function(col)，默认true，且会按照比例进行分配<\\/li>\\n<li>edit：text|function(col),编辑项,isText为true时有效<\\/li>\\n<li>align：center|left|right|function(col)，设置标题的对齐方式<\\/li>\\n<li>checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列<\\/li>\\n<li>notToggle：boolean|function(col)，是否禁止拖动表格列<\\/li>\\n<li>attrTitle：boolean|function()，默认为true，对于文本是否添加title属性<\\/li>\\n<li>alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的<\\/li>\\n<li>isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本<\\/li>\\n<li>field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。<\\/li>\\n<li>color：css颜色值|function(item,col,index,pageInfo)<\\/li>\\n<li>enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2url\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#2url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.url<\\/h2>\\n<p data-source-line=\\\"68\\\">访问的地址。<\\/p>\\n<h2 id=\\\"3method\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#3method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.method<\\/h2>\\n<p data-source-line=\\\"71\\\">访问的方法，默认post。<\\/p>\\n<h2 id=\\\"4data\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#4data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.data<\\/h2>\\n<p data-source-line=\\\"74\\\">静态数据[{}]。<\\/p>\\n<h2 id=\\\"5container\\\" data-source-line=\\\"76\\\"><a class=\\\"anchor\\\" href=\\\"#5container\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.container<\\/h2>\\n<p data-source-line=\\\"77\\\">存放表格的容器，选择器或dom对象。<\\/p>\\n<h2 id=\\\"6width\\\" data-source-line=\\\"79\\\"><a class=\\\"anchor\\\" href=\\\"#6width\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.width<\\/h2>\\n<p data-source-line=\\\"80\\\">表格宽度。<\\/p>\\n<h3 id=\\\"ajustfreewidth\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#ajustfreewidth\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ajustFreeWidth<\\/h3>\\n<p data-source-line=\\\"82\\\">是否分配多余的表格宽度|function()，默认true，且会按照比例进行分配，全局设置。<\\/p>\\n<h2 id=\\\"7height\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#7height\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.height<\\/h2>\\n<p data-source-line=\\\"85\\\">表格高度|full-差值,默认full-0。<\\/p>\\n<h2 id=\\\"8haspage\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#8haspage\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.hasPage<\\/h2>\\n<p data-source-line=\\\"88\\\">是否有分页,默认true。<\\/p>\\n<h2 id=\\\"9sortmulti\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#9sortmulti\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.sortMulti<\\/h2>\\n<p data-source-line=\\\"91\\\">是否支持多列同时排序,默认false。<\\/p>\\n<h2 id=\\\"10params\\\" data-source-line=\\\"93\\\"><a class=\\\"anchor\\\" href=\\\"#10params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.params<\\/h2>\\n<p data-source-line=\\\"94\\\">查询参数，添加根参数。<\\/p>\\n<h2 id=\\\"11tableoptionparams\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#11tableoptionparams\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.tableOptionParams<\\/h2>\\n<p data-source-line=\\\"97\\\">用于添加到query中。<\\/p>\\n<h2 id=\\\"12usetableoptionqueryarray\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#12usetableoptionqueryarray\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.useTableOptionQueryArray<\\/h2>\\n<p data-source-line=\\\"100\\\">默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。<\\/p>\\n<h2 id=\\\"13bindform\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#13bindform\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.bindForm<\\/h2>\\n<p data-source-line=\\\"103\\\">[绑定form对象或选择器,domForClick|function(listener)]。<\\/p>\\n<h2 id=\\\"14size\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#14size\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.size<\\/h2>\\n<p data-source-line=\\\"106\\\">表格大小small|normal|large。<\\/p>\\n<h2 id=\\\"15nottoggle\\\" data-source-line=\\\"108\\\"><a class=\\\"anchor\\\" href=\\\"#15nottoggle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.notToggle<\\/h2>\\n<p data-source-line=\\\"109\\\">是否禁止拖动表格列,设置表格默认值，会改变列的默认值。<\\/p>\\n<h2 id=\\\"16even\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#16even\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.even<\\/h2>\\n<p data-source-line=\\\"112\\\">是否开启隔行背景,默认true。<\\/p>\\n<h2 id=\\\"17attrtitle\\\" data-source-line=\\\"114\\\"><a class=\\\"anchor\\\" href=\\\"#17attrtitle\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.attrTitle<\\/h2>\\n<p data-source-line=\\\"115\\\">对于文本是否添加title属性，默认为false。<\\/p>\\n<h2 id=\\\"18oncelleditlistener\\\" data-source-line=\\\"117\\\"><a class=\\\"anchor\\\" href=\\\"#18oncelleditlistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.onCellEditListener<\\/h2>\\n<p data-source-line=\\\"118\\\">单元格内容被编辑后的监听函数。<\\/p>\\n<pre data-source-line=\\\"120\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(data,name,newValue,oldValue,row,col)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"19beforerequest\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#19beforerequest\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.beforeRequest<\\/h2>\\n<p data-source-line=\\\"125\\\">网络请求之前的回调。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(params)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"20afterajaxok\\\" data-source-line=\\\"131\\\"><a class=\\\"anchor\\\" href=\\\"#20afterajaxok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.afterAjaxOk<\\/h2>\\n<p data-source-line=\\\"132\\\">ajax请求成功后的回调,在onLoadCompleteListener之前。<\\/p>\\n<pre data-source-line=\\\"134\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,okcallback,errcallback)<\\/span><\\/span>{\\n    okcallback(json);\\n}<\\/code><\\/pre><h2 id=\\\"21onloadcompletelistener\\\" data-source-line=\\\"140\\\"><a class=\\\"anchor\\\" href=\\\"#21onloadcompletelistener\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.onLoadCompleteListener<\\/h2>\\n<p data-source-line=\\\"141\\\">加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。<\\/p>\\n<pre data-source-line=\\\"143\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(json,loadCount,pageInfo)<\\/span><\\/span><\\/code><\\/pre><h2 id=\\\"22beforeflush\\\" data-source-line=\\\"147\\\"><a class=\\\"anchor\\\" href=\\\"#22beforeflush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.beforeFlush<\\/h2>\\n<p data-source-line=\\\"148\\\">设置刷之前的回调。<\\/p>\\n<h2 id=\\\"23response_code\\\" data-source-line=\\\"150\\\"><a class=\\\"anchor\\\" href=\\\"#23response_code\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.response_code<\\/h2>\\n<p data-source-line=\\\"151\\\">默认code，结果码。<\\/p>\\n<h2 id=\\\"24response_desc\\\" data-source-line=\\\"153\\\"><a class=\\\"anchor\\\" href=\\\"#24response_desc\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>24.response_desc<\\/h2>\\n<p data-source-line=\\\"154\\\">默认desc，描述。<\\/p>\\n<h2 id=\\\"25response_count\\\" data-source-line=\\\"156\\\"><a class=\\\"anchor\\\" href=\\\"#25response_count\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>25.response_count<\\/h2>\\n<p data-source-line=\\\"157\\\">默认rs.total,总数。<\\/p>\\n<h2 id=\\\"26response_data\\\" data-source-line=\\\"159\\\"><a class=\\\"anchor\\\" href=\\\"#26response_data\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>26.response_data<\\/h2>\\n<p data-source-line=\\\"160\\\">默认rs.data,数据，类为数组。<\\/p>\\n<h2 id=\\\"27flushby\\\" data-source-line=\\\"162\\\"><a class=\\\"anchor\\\" href=\\\"#27flushby\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>27.flushBy<\\/h2>\\n<p data-source-line=\\\"163\\\">点击刷新的按钮选择器。<\\/p>\\n<h2 id=\\\"28flushbychange\\\" data-source-line=\\\"165\\\"><a class=\\\"anchor\\\" href=\\\"#28flushbychange\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>28.flushByChange<\\/h2>\\n<p data-source-line=\\\"166\\\">输入组件内容改变时刷新表格，[选择器]。<\\/p>\\n<h2 id=\\\"29flush\\\" data-source-line=\\\"168\\\"><a class=\\\"anchor\\\" href=\\\"#29flush\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>29.flush<\\/h2>\\n<p data-source-line=\\\"169\\\">function(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。<\\/p>\\n<h2 id=\\\"30getselectedrows\\\" data-source-line=\\\"171\\\"><a class=\\\"anchor\\\" href=\\\"#30getselectedrows\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>30.getSelectedRows<\\/h2>\\n<p data-source-line=\\\"172\\\">function()获取所有选中行的数据。<\\/p>\\n<h2 id=\\\"31setcontent\\\" data-source-line=\\\"174\\\"><a class=\\\"anchor\\\" href=\\\"#31setcontent\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>31.setContent<\\/h2>\\n<p data-source-line=\\\"175\\\">function(row,col,content)设置内容。<\\/p>\\n<h2 id=\\\"32currentpagesize\\\" data-source-line=\\\"177\\\"><a class=\\\"anchor\\\" href=\\\"#32currentpagesize\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>32.currentPageSize<\\/h2>\\n<p data-source-line=\\\"178\\\">function()获取当前页数据行数。<\\/p>\\n<h2 id=\\\"33getlastpageinfo\\\" data-source-line=\\\"180\\\"><a class=\\\"anchor\\\" href=\\\"#33getlastpageinfo\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>33.getLastPageInfo<\\/h2>\\n<p data-source-line=\\\"181\\\">function()获取之前的页面信息。<\\/p>\",\"createTime\":{\"date\":20,\"day\":5,\"hours\":13,\"minutes\":48,\"month\":6,\"seconds\":30,\"time\":1532065710000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153206570977301000011\",\"markdown\":\"数据表格API,最后必须调用done()方法。\\n\\n```\\n通过\\nsdk.table({\\n    attr:value\\n}).done();\\n或\\nsdk.table().attr(value).done();\\n调用\\n```\\n\\n# 数据格式\\n## 1、请求数据格式\\n\\n```\\n{\\n    query:{\\n    \\n    },\\n    settings:{\\n        skip:0,\\n        limit:20\\n    }\\n}\\n\\n```\\n## 2、响应数据格式\\n\\n```\\n{\\n    code:0,\\n    rs:{\\n        data:[],\\n        limit:20,\\n        skip:0,\\n        total:50\\n    }\\n}\\n```\\n\\n\\n# 参数或函数说明：\\n\\n## 1.cols\\n【Array】表格列。\\n\\n- title：标题名称|dom|function(col)\\n- titleColor：css颜色值|function(col)\\n- sortField:此值作为排序的字段名,若为空且当field不为函数时、排序字段为field\\n- sortable：是否排序|function(col),会显示排序按钮\\n- fixed：left|right|function(col)，固定列\\n- initSort：初始排序，1升序，-1降序，其他默认排序|function(col),会进行初始排序\\n- width：宽度值|function(col)\\n- ajustFreeWidth:是否参与分配多余的表格宽度|function(col)，默认true，且会按照比例进行分配\\n- edit：text|function(col),编辑项,isText为true时有效\\n- align：center|left|right|function(col)，设置标题的对齐方式\\n- checkType：checkbox|radio|function(col)，设置当前列为单选货多选框列\\n- notToggle：boolean|function(col)，是否禁止拖动表格列\\n- attrTitle：boolean|function()，默认为true，对于文本是否添加title属性\\n- alignRow：center|left|right|function(item,col,index,pageInfo)，对数据部分,默认等于标题的\\n- isText：boolean|function(item,col,index,pageInfo),默认true，是否为纯文本\\n- field：字段名称|dom|function(item,col,index,pageInfo):对应的数据也可以是函数,为字段名称时，支持\\\".\\\"调用。\\n- color：css颜色值|function(item,col,index,pageInfo)\\n- enableFieldDotGet：true|false|function(item,col,index,pageInfo):是否支持\\\".\\\"获取内部对象值，默认true。\\n\\n## 2.url\\n访问的地址。\\n\\n## 3.method\\n访问的方法，默认post。\\n\\n## 4.data\\n静态数据[{}]。\\n\\n## 5.container\\n存放表格的容器，选择器或dom对象。\\n\\n## 6.width\\n表格宽度。\\n### ajustFreeWidth\\n是否分配多余的表格宽度|function()，默认true，且会按照比例进行分配，全局设置。\\n\\n## 7.height\\n表格高度|full-差值,默认full-0。\\n\\n## 8.hasPage\\n是否有分页,默认true。\\n\\n## 9.sortMulti\\n是否支持多列同时排序,默认false。\\n\\n## 10.params\\n查询参数，添加根参数。\\n\\n## 11.tableOptionParams\\n用于添加到query中。\\n\\n## 12.useTableOptionQueryArray\\n默认false:为true时提交queryArray=[{key:\'\',value:\'\'}],为false时提交query={key:value}。\\n\\n## 13.bindForm\\n[绑定form对象或选择器,domForClick|function(listener)]。\\n\\n## 14.size\\n表格大小small|normal|large。\\n\\n## 15.notToggle\\n是否禁止拖动表格列,设置表格默认值，会改变列的默认值。\\n\\n## 16.even\\n是否开启隔行背景,默认true。\\n\\n## 17.attrTitle\\n对于文本是否添加title属性，默认为false。\\n\\n## 18.onCellEditListener\\n单元格内容被编辑后的监听函数。\\n\\n```\\nfunction(data,name,newValue,oldValue,row,col)\\n```\\n\\n## 19.beforeRequest\\n网络请求之前的回调。\\n\\n```\\nfunction(params)\\n```\\n\\n## 20.afterAjaxOk\\najax请求成功后的回调,在onLoadCompleteListener之前。\\n\\n```\\nfunction(json,okcallback,errcallback){\\n    okcallback(json);\\n}\\n```\\n\\n## 21.onLoadCompleteListener\\n加载完成的回调,json为服务器返回值,loadCount为总的加载次数，第一次为1,pageInfo.page当前页数（第一页为1），pageInfo.count当前页加载的数据条数,pageInfo.limit当前每页最大条数。\\n\\n```\\nfunction(json,loadCount,pageInfo)\\n```\\n\\n## 22.beforeFlush\\n设置刷之前的回调。\\n\\n## 23.response_code\\n默认code，结果码。\\n\\n## 24.response_desc\\n默认desc，描述。\\n\\n## 25.response_count\\n默认rs.total,总数。\\n\\n## 26.response_data\\n默认rs.data,数据，类为数组。\\n\\n## 27.flushBy\\n点击刷新的按钮选择器。\\n\\n## 28.flushByChange\\n输入组件内容改变时刷新表格，[选择器]。\\n\\n## 29.flush\\nfunction(willToFirstPage)刷新表格,willToFirstPage是否回到第一页，默认false。\\n\\n## 30.getSelectedRows\\nfunction()获取所有选中行的数据。\\n\\n## 31.setContent\\nfunction(row,col,content)设置内容。\\n\\n## 32.currentPageSize\\nfunction()获取当前页数据行数。\\n\\n## 33.getLastPageInfo\\nfunction()获取之前的页面信息。\",\"mkey\":\"\",\"moduleId\":\"153188673971709000006\",\"name\":\"数据表格\",\"projectId\":\"153188636499907000002\",\"sequence\":1012,\"status\":1,\"type\":\"ARTICLE\"}','153206570977301000011'),('153649819623908000044',1,'2018-09-09 21:03:16',159,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":50,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\"><strong>例如<\\/strong>：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；（支持modulePrefix前缀替换）<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n**例如**：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；（支持modulePrefix前缀替换）\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153649838352808000045',1,'2018-09-09 21:06:24',160,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件定义、内置插件与模块','{\"brief\":\"插件定义、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":13,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件定义、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":500,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153680805038908000001',1,'2018-09-13 11:07:30',161,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":29,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<ul data-source-line=\\\"4\\\">\\n<li>【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><ul data-source-line=\\\"10\\\">\\n<li>【推荐】字符集采用utf8.<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2-命名\\\" data-source-line=\\\"12\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"13\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据表字段不用加表名首字母前缀。<\\/li>\\n<li>【<mark>强制<\\/mark>】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"20\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\">id char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark varchar(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator char(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-literal\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者id<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"36\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n- 【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n- 【推荐】字符集采用utf8.\\n\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据表字段不用加表名首字母前缀。\\n- 【==强制==】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：\\n\\n```\\nid char(21) NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) NOT NULL  创建者id\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002'),('153680835167008000002',1,'2018-09-13 11:12:32',162,'ArticleWithBLOBs','文章','UPDATE','超级管理员','数据库规范','{\"brief\":\"\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":29,\"commentCount\":0,\"content\":\"<h1 id=\\\"一-基础\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-基础\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、基础<\\/h1>\\n<h2 id=\\\"1-编码\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#1-编码\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1、编码<\\/h2>\\n<ul data-source-line=\\\"4\\\">\\n<li>【<mark>强制<\\/mark>】默认采用二进制且<mark>大小写敏感<\\/mark>的编码规则，如MySQL中设置：<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"6\\\"><code class=\\\"hljs\\\">字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin<\\/code><\\/pre><ul data-source-line=\\\"10\\\">\\n<li>【推荐】字符集采用utf8.<\\/li>\\n<\\/ul>\\n<h2 id=\\\"2-命名\\\" data-source-line=\\\"12\\\"><a class=\\\"anchor\\\" href=\\\"#2-命名\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2、命名<\\/h2>\\n<ul data-source-line=\\\"13\\\">\\n<li>【<mark>强制<\\/mark>】数据库名、表名、字段名等均使用[a-z0-9_]（<strong>小写字母,数字,下划线<\\/strong>），且应见名知意。<\\/li>\\n<li>【<mark>强制<\\/mark>】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。<\\/li>\\n<li>【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。<\\/li>\\n<li>【推荐】数据表字段不用加表名首字母前缀。<\\/li>\\n<li>【<mark>强制<\\/mark>】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。<\\/li>\\n<\\/ul>\\n<h2 id=\\\"3-表结构\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#3-表结构\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3、表结构<\\/h2>\\n<ul data-source-line=\\\"20\\\">\\n<li>【<mark>强制<\\/mark>】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。<\\/li>\\n<li>【<mark>强制<\\/mark>】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。<\\/li>\\n<li>【<mark>强制<\\/mark>】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<\\/li>\\n<li>【<mark>强制<\\/mark>】数值：小数类型为decimal，禁止使用float和double。<\\/li>\\n<li>【<mark>强制<\\/mark>】非空：逻辑上不为空的字段，必须进行NOT NULL约束。<\\/li>\\n<li>数据表基本字段：(rcode、tpid为公共服务特字段)<\\/li>\\n<\\/ul>\\n<pre data-source-line=\\\"27\\\"><code class=\\\"hljs\\\">id char(21) CHARACTER <span class=\\\"hljs-keyword\\\">SET<\\/span> <span class=\\\"hljs-keyword\\\">ascii<\\/span> <span class=\\\"hljs-keyword\\\">COLLATE<\\/span> ascii_bin <span class=\\\"hljs-keyword\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  主键\\nremark <span class=\\\"hljs-built_in\\\">varchar<\\/span>(<span class=\\\"hljs-number\\\">512<\\/span>) <span class=\\\"hljs-literal\\\">NULL<\\/span>  备注\\ncreatetime datetime <span class=\\\"hljs-keyword\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  添加时间\\nupdatetime datetime <span class=\\\"hljs-keyword\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  上次修改时间\\ncreator <span class=\\\"hljs-built_in\\\">char<\\/span>(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-built_in\\\">CHARACTER<\\/span> <span class=\\\"hljs-keyword\\\">SET<\\/span> <span class=\\\"hljs-keyword\\\">ascii<\\/span> <span class=\\\"hljs-keyword\\\">COLLATE<\\/span> ascii_bin <span class=\\\"hljs-keyword\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span>  创建者<span class=\\\"hljs-keyword\\\">id<\\/span>\\n\\ntpid <span class=\\\"hljs-built_in\\\">char<\\/span>(<span class=\\\"hljs-number\\\">21<\\/span>) <span class=\\\"hljs-built_in\\\">CHARACTER<\\/span> <span class=\\\"hljs-keyword\\\">SET<\\/span> <span class=\\\"hljs-keyword\\\">ascii<\\/span> <span class=\\\"hljs-keyword\\\">COLLATE<\\/span> ascii_bin <span class=\\\"hljs-keyword\\\">NOT<\\/span> <span class=\\\"hljs-literal\\\">NULL<\\/span> 特殊字段\\nrcode <span class=\\\"hljs-built_in\\\">varchar<\\/span>(<span class=\\\"hljs-number\\\">256<\\/span>) <span class=\\\"hljs-built_in\\\">CHARACTER<\\/span> <span class=\\\"hljs-keyword\\\">SET<\\/span> <span class=\\\"hljs-keyword\\\">ascii<\\/span> <span class=\\\"hljs-keyword\\\">COLLATE<\\/span> ascii_bin <span class=\\\"hljs-literal\\\">NULL<\\/span> 特殊字段<\\/code><\\/pre><h2 id=\\\"4-查询\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#4-查询\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4、查询<\\/h2>\\n<ul data-source-line=\\\"39\\\">\\n<li>【推荐】请使用更好的方式代替简单的limit offset分页。<\\/li>\\n<li>【<mark>强制<\\/mark>】不要使用count(列名)或count(常量)，而使用count(*)。<\\/li>\\n<li>【<mark>强制<\\/mark>】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。<\\/li>\\n<li>【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。<\\/li>\\n<li>【推荐】避免过多的连接(join)查询，不要超过3个。<\\/li>\\n<\\/ul>\",\"createTime\":{\"date\":26,\"day\":4,\"hours\":15,\"minutes\":41,\"month\":6,\"seconds\":37,\"time\":1532590897000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153259089682301000002\",\"markdown\":\"# 一、基础\\n\\n## 1、编码\\n- 【==强制==】默认采用二进制且==大小写敏感==的编码规则，如MySQL中设置：\\n\\n```\\n字符集：utf8mb4\\n排序数据库排序规则：ubf8mb4_bin\\n```\\n- 【推荐】字符集采用utf8.\\n\\n## 2、命名\\n- 【==强制==】数据库名、表名、字段名等均使用[a-z0-9_]（**小写字母,数字,下划线**），且应见名知意。\\n- 【==强制==】数据库名格式“前缀_业务或系统名”，表名格式“前缀_模块或业务名或表的作用”。例如：数据库名xs_global2,表名xs_g2_user。\\n- 【推荐】各个名称尽可能写全，尽量用英文，力求简洁；过长的名称可以适当缩写部分单词。\\n- 【推荐】数据表字段不用加表名首字母前缀。\\n- 【==强制==】Mybatis等的xml文件的名称，要与对应的Dao接口名称相同。\\n\\n## 3、表结构\\n- 【==强制==】主键：数据表必须包含主键id char(21)（主键长度暂定21个字符）。\\n- 【==强制==】约束：设计与开发阶段，约束条件不能舍弃。如：主键与外键必须进行外键约束（优化阶段另当别论）。\\n- 【==强制==】唯一：业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\\n- 【==强制==】数值：小数类型为decimal，禁止使用float和double。\\n- 【==强制==】非空：逻辑上不为空的字段，必须进行NOT NULL约束。\\n-  数据表基本字段：(rcode、tpid为公共服务特字段)\\n\\n```\\nid char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL  主键\\nremark varchar(512) NULL  备注\\ncreatetime datetime NOT NULL  添加时间\\nupdatetime datetime NOT NULL  上次修改时间\\ncreator char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL  创建者id\\n\\ntpid char(21) CHARACTER SET ascii COLLATE ascii_bin NOT NULL 特殊字段\\nrcode varchar(256) CHARACTER SET ascii COLLATE ascii_bin NULL 特殊字段\\n```\\n\\n## 4、查询\\n- 【推荐】请使用更好的方式代替简单的limit offset分页。\\n- 【==强制==】不要使用count(列名)或count(常量)，而使用count(*)。\\n- 【==强制==】获取最大或最小值，使用MAX或MIN函数，禁止使用排序的方式获取。\\n- 【推荐】不要使用 * 作为查询的字段列表，需要哪些字段应该明确写出。\\n- 【推荐】避免过多的连接(join)查询，不要超过3个。\",\"mkey\":\"\",\"moduleId\":\"153259074763509000001\",\"name\":\"数据库规范\",\"projectId\":\"153188636499907000002\",\"sequence\":1007,\"status\":1,\"type\":\"ARTICLE\"}','153259089682301000002');

/*Table structure for table `menu` */

DROP TABLE IF EXISTS `menu`;

CREATE TABLE `menu` (
  `id` varchar(50) NOT NULL DEFAULT '导航菜单编号',
  `menuName` varchar(50) NOT NULL COMMENT '菜单名称',
  `menuUrl` varchar(200) DEFAULT NULL COMMENT '菜单链接',
  `roleIds` varchar(512) DEFAULT NULL COMMENT '角色可见集合  （ID之间以逗号分隔）',
  `parentId` varchar(50) DEFAULT '0',
  `iconRemark` varchar(100) DEFAULT NULL,
  `type` varchar(45) DEFAULT NULL COMMENT '前端菜单、后台菜单',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`),
  KEY `index_parentId` (`parentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `menu` */

insert  into `menu`(`id`,`menuName`,`menuUrl`,`roleIds`,`parentId`,`iconRemark`,`type`,`createTime`,`status`,`sequence`) values ('152612004179705000008','快捷菜单',NULL,NULL,'0','<i class=\"iconfont\"></i>','FRONT','2018-05-12 18:14:02',1,1),('152612008276705000009','v8.0.0用户使用视频','index.do#/152611968062607000001/article/detail/152611971673309000002/ARTICLE/152611998276001000007',NULL,'152612004179705000008',NULL,'FRONT','2018-05-12 18:14:43',1,1);

/*Table structure for table `module` */

DROP TABLE IF EXISTS `module`;

CREATE TABLE `module` (
  `id` varchar(50) NOT NULL COMMENT '所属模块ID',
  `name` varchar(100) NOT NULL COMMENT '所属模块名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT '模块地址',
  `canDelete` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1：可删除，0：不可删除',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '备注',
  `userId` varchar(50) NOT NULL DEFAULT '',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  `templateId` varchar(50) DEFAULT NULL COMMENT '接口模板ID',
  `version` int(11) NOT NULL DEFAULT '0',
  `category` varchar(200) NOT NULL DEFAULT '' COMMENT '文章分类，多个分类以逗号分割，每个分类最多10个字',
  PRIMARY KEY (`id`),
  KEY `index_uid_seq_time` (`userId`,`sequence`,`createTime`),
  KEY `index_pid_seq_time` (`projectId`,`sequence`,`createTime`),
  KEY `index_templateId` (`templateId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `module` */

insert  into `module`(`id`,`name`,`createTime`,`status`,`sequence`,`url`,`canDelete`,`remark`,`userId`,`projectId`,`templateId`,`version`,`category`) values ('153188673971709000006','JS Sdk帮助文档','2018-07-18 12:05:40',1,2,'',1,'请看**文章**,以\"window.\"开头的表示全局访问、否则表示sdk访问的方式。','admin','153188636499907000002',NULL,0,'核心功能,UI功能,探索中'),('153189041004409000012','xsloader基础帮助文档','2018-07-18 13:06:50',1,3,'',1,'','admin','153189028248007000010',NULL,0,'API说明,例子'),('153259074763509000001','【重要】技术规范','2018-07-26 15:39:08',1,6,'',1,'','admin','153188636499907000002',NULL,0,'默认分类'),('153259817042209000013','项目开发','2018-07-26 17:42:51',1,5,'',1,'','admin','153188636499907000002',NULL,0,'默认分类'),('153475796013609000029','Java Sdk帮助文档','2018-08-20 17:39:20',1,4,'',1,'','admin','153188636499907000002',NULL,0,'默认分类');

/*Table structure for table `project` */

DROP TABLE IF EXISTS `project`;

CREATE TABLE `project` (
  `id` varchar(50) NOT NULL COMMENT '项目ID',
  `name` varchar(100) NOT NULL COMMENT '项目名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '2：推荐项目，3，管理员管理项目，4，管理管理&推荐项目，-1：默认debug项目',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '备注',
  `userId` varchar(50) NOT NULL DEFAULT '',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1:私有项目，2公开项目，3公开推荐',
  `password` varchar(45) DEFAULT NULL,
  `cover` varchar(200) NOT NULL DEFAULT 'resources/images/cover.png' COMMENT '项目封面',
  `luceneSearch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否允许建立Lucene搜索',
  PRIMARY KEY (`id`),
  KEY `index_status_seq_createTime` (`status`,`sequence`,`createTime`),
  KEY `index_userId_seq_createTime` (`userId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `project` */

insert  into `project`(`id`,`name`,`createTime`,`status`,`sequence`,`remark`,`userId`,`type`,`password`,`cover`,`luceneSearch`) values ('153188636499907000002','【重要】公共文档','2018-07-18 11:59:25',2,100,'','admin',2,'e54f53c5b8132e6b14ee0b7655776120','resources/images/cover.png',1),('153189028248007000010','xsloader.js加载器','2018-07-18 13:04:42',2,1,'帮助文档请看**文章**，开源地址:https://github.com/gzxishan/xsloader','admin',2,NULL,'resources/images/cover.png',1),('153206996416107000021','OftenPorter','2018-07-20 14:59:24',2,2,'项目地址:https://github.com/gzxishan/OftenPorter','admin',2,NULL,'resources/images/cover.png',1);

/*Table structure for table `project_user` */

DROP TABLE IF EXISTS `project_user`;

CREATE TABLE `project_user` (
  `id` varchar(50) NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `projectId` varchar(50) NOT NULL,
  `userId` varchar(50) NOT NULL,
  `addModule` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加模块',
  `delModule` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除模块',
  `modModule` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可是修改模块',
  `addInter` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加接口',
  `delInter` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除接口',
  `modInter` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改接口',
  `addArticle` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加文章',
  `delArticle` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除文章',
  `modArticle` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改文章',
  `addSource` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加资源',
  `delSource` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除资源',
  `modSource` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改资源',
  `addDict` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加数据字典',
  `delDict` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除数据字典',
  `modDict` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改数据字典',
  `userEmail` varchar(45) DEFAULT NULL,
  `userName` varchar(50) DEFAULT NULL,
  `addError` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加错误码',
  `delError` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除错误码',
  `modError` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改错误码',
  PRIMARY KEY (`id`),
  UNIQUE KEY `project_user` (`userId`,`projectId`),
  KEY `index_uid_seq_time` (`userId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `project_user` */

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `id` varchar(50) NOT NULL COMMENT '角色ID',
  `roleName` varchar(50) NOT NULL COMMENT '角色名称',
  `auth` text NOT NULL,
  `authName` text,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `role` */

/*Table structure for table `setting` */

DROP TABLE IF EXISTS `setting`;

CREATE TABLE `setting` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `mkey` varchar(20) NOT NULL,
  `value` varchar(500) NOT NULL,
  `remark` varchar(500) DEFAULT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `type` varchar(10) NOT NULL DEFAULT 'TEXT' COMMENT '设置类型（IMAGE,LINK,TEXT）',
  `canDelete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '1：可删除，0：不可删除',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `show` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否在前端显示，1：是，0：否',
  PRIMARY KEY (`id`),
  UNIQUE KEY `key` (`mkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `setting` */

insert  into `setting`(`id`,`mkey`,`value`,`remark`,`createTime`,`status`,`type`,`canDelete`,`sequence`,`show`) values ('0','tes','test555','test555','2017-12-30 03:44:49',1,'TEXT',0,1,1),('062f01ae-e50b-4dd3-808b-b4a6d65eeadc','LOGO','http://api.crap.cn/resources/upload/images/2016-04-27/231357cAgbyp.png','网站主logo，可以直接在value中填写绝对链接地址，也可以自行上传图片','2016-03-29 12:23:18',1,'IMAGE',0,90,1),('8a95bc2f-ea61-4dd6-8163-d9c520b28181','VISITCODE','true','游客访问私密模块输入密码的同时是否需要输入图像验证码？true为需要，其他为不需要','2016-03-31 18:07:14',0,'TEXT',0,90,1),('98ecca1b-f762-4cd3-831a-4042b36419d8','VERIFICATIONCODE','false','是否开启安全登录？ture为开启，其他为不开启，开启后登录将需要输入图片验证码','2016-03-31 18:07:58',0,'TEXT',0,90,1),('b97a3a75-c1c3-42cc-b944-8fb5ac5c5f49','SECRETKEY','crapApiKey','秘钥，用于cookie加密等','2016-03-31 01:04:40',0,'TEXT',0,90,1),('de94c622-02fc-4b39-9cc5-0c24870ac21f','TITLE','CrapApi|Api接口管理系统','站点标题','2016-03-30 19:09:13',1,'TEXT',0,90,1),('e0dec957-5043-4c6e-9225-960fbc401116','ICON','http://api2.crap.cn/resources/upload/images/2016-04-04/063633hG35aC.ico','站点ICON图标（浏览器标题栏图标）','2016-03-30 19:49:41',1,'IMAGE',0,100,1),('e2a493a7-c4f0-4cbb-832f-4495a7074252','LOGINBG','https://dn-coding-net-production-static.qbox.me/d58141c9-9a0c-40b0-a408-5935fd70670f.jpg','登陆背景图','2016-08-25 08:02:28',1,'IMAGE',0,100,1),('e2a493a7-c888-4cbb-832f-4495a7074252','TITLEBG','https://dn-coding-net-production-static.qbox.me/3c9bcbc0-15dc-4a6f-a81f-5112936b7773.jpg','头部标题背景图：resources/images/project.jpg,为空则显示主色调','2016-08-25 08:02:28',1,'IMAGE',0,99,1),('ecd676c2-0b04-4b4a-a049-4a825221a6d0','BG_COLOR','#f7f7f7','前端显示背景颜色','2016-04-28 13:07:37',1,'COLOR',0,98,1),('ef157b7f-cc53-4a41-9679-d243d478023d','COMMENTCODE','true','游客评论是否需要输入验证码','2016-04-14 22:47:29',1,'TEXT',0,90,1),('f1c8dc8b-9cd8-4839-b38a-1cea3ceb3942','MAX_WIDTH','1200','前端显示最大宽度（数字，建议：900-1200）','2016-04-28 13:07:37',1,'TEXT',0,90,1),('fff-1111-d4839-b38a-898343435462','ANONYMOUS_COMMENT','false','是否允许匿名评论, true:允许','2017-08-06 15:55:00',1,'TEXT',0,100,1),('fff-8888-d4839-b38a-898343435462','ICONFONT','//at.alicdn.com/t/font_afbmuhv5zc15rk9','图标地址（cdn图标库或本地图标库）','2018-05-01 20:27:00',1,'ICONFONT',0,100,1),('fff-9191-d4839-b38a-898343435462','DESCRIPTION','免费开源的API接口管理系统、文档管理系统。系统特点：极致简单、开源开放、技术前沿。主要功能有：接口管理、接口调试、文档管理、数据字典管理、文章管理....。','搜索引描述','2018-05-04 22:53:11',1,'TEXT',0,100,1),('fff-9999-d4839-b38a-898343435462','KEYWORDS','CrapApi,api,crap,接口管理,应用接口管理,开源接口管理,开源api接口管理,api接口管理','搜索引擎关键字','2018-05-04 22:53:11',1,'TEXT',0,100,1),('foc8dc8b-9cd8-4839-b38a-1cea3ceb3942','FOOTER_BG_COLOR','#000000','前端顶部、底部颜色 #383942','2016-04-28 13:07:37',1,'COLOR',0,91,1),('fpc8dc8b-9cd8-4839-b38a-1cea3ceb3942','FOOTER_COLOR','#a9a9a9','前端顶部、底部字体颜色 #a9a9a9','2016-04-28 13:07:37',1,'COLOR',0,97,1),('fpmbdc00-9cd8-4839-b38a-1cea3ceb3945','LUCENE_DIR','/usr/local/crap/lucene','Lucene全文检索文件存储地址','2016-06-06 13:07:37',1,'TEXT',0,22,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3942','MAIN_COLOR','#407aaa','网站主色调，默认#CC6699 #007742','2016-04-28 13:07:37',1,'COLOR',0,100,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3945','FONT_FAMILY','\"Lantinghei SC\", \"Open Sans\", Arial, \"Hiragino Sans GB\", \"Microsoft YaHei\", \"STHeiti\", \"WenQuanYi Micro Hei\", SimSun, sans-serif;','网站字体','2016-06-06 13:07:37',1,'FONTFAMILY',0,77,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3999','ADORN_COLOR','#f82c1d','装饰背景颜色:左侧导航条背景颜色 #1c2034','2016-06-06 13:07:37',1,'COLOR',0,26,1),('fpmbdc8b-9cd8-4839-b38a-898343435462','INDEX_PAGE','dashboard.htm','前端首页：只能以index.do、font/ 开头的url','2017-06-11 17:57:39',1,'INDEXPAGE',0,66,1);

/*Table structure for table `source` */

DROP TABLE IF EXISTS `source`;

CREATE TABLE `source` (
  `id` varchar(50) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `name` varchar(100) NOT NULL COMMENT '资源名称',
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `moduleId` varchar(50) NOT NULL DEFAULT '0' COMMENT '模块ID',
  `remark` varchar(5000) NOT NULL DEFAULT '' COMMENT '备注',
  `filePath` varchar(200) NOT NULL DEFAULT '' COMMENT '文件目录',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `index_mod_seq_time` (`moduleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `source` */

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` varchar(50) NOT NULL,
  `userName` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL DEFAULT '',
  `trueName` varchar(50) NOT NULL DEFAULT '' COMMENT '用户真实姓名或昵称',
  `roleId` varchar(1024) NOT NULL DEFAULT '',
  `roleName` varchar(1024) NOT NULL DEFAULT '',
  `auth` varchar(1024) NOT NULL DEFAULT '',
  `authName` varchar(1024) NOT NULL DEFAULT '',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `type` tinyint(4) NOT NULL DEFAULT '100' COMMENT '用户类型：1普通用户，100：管理员',
  `email` varchar(45) DEFAULT NULL,
  `avatarUrl` varchar(500) NOT NULL DEFAULT '' COMMENT '用户头像',
  `loginType` int(11) NOT NULL DEFAULT '0' COMMENT '0：账号登陆，1：github登陆，2：码云',
  `thirdlyId` varchar(100) DEFAULT NULL COMMENT '第三方唯一ID',
  `passwordSalt` varchar(20) DEFAULT NULL COMMENT '密码MD5盐',
  PRIMARY KEY (`id`),
  UNIQUE KEY `loginType_userName` (`userName`,`loginType`),
  UNIQUE KEY `loginType_Email` (`email`,`loginType`),
  KEY `index_thirdlyId` (`thirdlyId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`userName`,`password`,`trueName`,`roleId`,`roleName`,`auth`,`authName`,`createTime`,`status`,`sequence`,`type`,`email`,`avatarUrl`,`loginType`,`thirdlyId`,`passwordSalt`) values ('153188505026806000001','test','d49ebcf816a3503b8e17cc0ecec38017','','','','','','2018-07-18 11:37:30',1,1,1,'test@xishankeji.com','resources/avatar/avatar4.jpg',0,NULL,'mDvJPIC353Cs9CteegFn'),('admin','admin','c6b3733f74a4326606c306b125a2b0a8','超级管理员','super,','超级管理员,','','','2016-03-29 12:24:00',1,0,100,'ihsantang@163.com','',0,'','NgknQvt1GmgjA8I3qENn');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.7.16 : Database - apidev
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `brief` varchar(200) DEFAULT NULL,
  `content` longtext NOT NULL,
  `click` int(11) NOT NULL DEFAULT '0',
  `type` varchar(20) NOT NULL DEFAULT 'PAGE',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `moduleId` varchar(50) NOT NULL DEFAULT 'top',
  `mkey` varchar(20) DEFAULT NULL COMMENT 'key，唯一键，页面唯一标识',
  `canDelete` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否可删除，可修key，默认可以',
  `category` varchar(50) DEFAULT NULL,
  `canComment` tinyint(4) NOT NULL DEFAULT '1',
  `commentCount` int(11) NOT NULL DEFAULT '0',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `markdown` text NOT NULL,
  `projectId` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `mkey_UNIQUE` (`mkey`),
  KEY `index_mod_type_cat_seq_time` (`moduleId`,`type`,`category`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`id`,`name`,`brief`,`content`,`click`,`type`,`status`,`createTime`,`moduleId`,`mkey`,`canDelete`,`category`,`canComment`,`commentCount`,`sequence`,`markdown`,`projectId`) values ('153189062110601000014','配置参数说明','初始化配置:xsloader(config)','<h2 id=\"一-使用例子\" data-source-line=\"1\"><a class=\"anchor\" href=\"#一-使用例子\"><span class=\"octicon octicon-link\"></span></a>一、使用例子</h2>\n<pre data-source-line=\"3\"><code class=\"hljs\">xsloader(<span class=\"hljs-name\">config</span>)<span class=\"hljs-comment\">;</span></code></pre><h2 id=\"二-config格式\" data-source-line=\"6\"><a class=\"anchor\" href=\"#二-config格式\"><span class=\"octicon octicon-link\"></span></a>二、config格式</h2>\n<pre data-source-line=\"7\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    baseUrl:</span><span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-symbol\">    urlArgs:</span>{},\n<span class=\"hljs-symbol\">    autoUrlArgs:</span>false,\n<span class=\"hljs-symbol\">    paths:</span>{},\n<span class=\"hljs-symbol\">    depsPaths:</span>{},\n<span class=\"hljs-symbol\">    deps:</span>{},\n<span class=\"hljs-symbol\">    modulePrefix:</span>{},\n<span class=\"hljs-symbol\">    defineFunction:</span>{},\n<span class=\"hljs-symbol\">    defaultVersion:</span>{},\n<span class=\"hljs-symbol\">    waitSeconds:</span><span class=\"hljs-number\">10</span>,\n<span class=\"hljs-symbol\">    instance:</span><span class=\"hljs-string\">\"single\"</span>,\n<span class=\"hljs-symbol\">    properties:</span>{\n<span class=\"hljs-symbol\">        name1:</span>anyType,\n<span class=\"hljs-symbol\">        name2:</span>{\n<span class=\"hljs-symbol\">            subName1:</span>anyType\n        },\n<span class=\"hljs-symbol\">        name3:</span><span class=\"hljs-string\">\"123\"</span>,\n<span class=\"hljs-symbol\">        name4:</span><span class=\"hljs-string\">\"name${name3}-${name2.subName1}\"</span>,\n<span class=\"hljs-symbol\">        name5:</span>function(){}\n    }\n}</code></pre><h2 id=\"三-属性说明\" data-source-line=\"31\"><a class=\"anchor\" href=\"#三-属性说明\"><span class=\"octicon octicon-link\"></span></a>三、属性说明</h2>\n<h3 id=\"1baseurl\" data-source-line=\"33\"><a class=\"anchor\" href=\"#1baseurl\"><span class=\"octicon octicon-link\"></span></a>1.baseUrl</h3>\n<p data-source-line=\"34\">【String】基础参考路径，默认为当前页所在目录。</p>\n<hr>\n<h3 id=\"2路径相对与绝对路径\" data-source-line=\"37\"><a class=\"anchor\" href=\"#2路径相对与绝对路径\"><span class=\"octicon octicon-link\"></span></a>2.路径:<mark>相对与绝对路径</mark>；</h3>\n<ol data-source-line=\"38\">\n<li><strong>./</strong> 表示当前目录；</li>\n<li><strong>../</strong> 表示上一级目录；</li>\n<li><strong>xx/</strong> 表示相对于baseUrl；</li>\n<li><strong>//xxx、/xxx、<a href=\"https://xxx\">https://xxx</a>、<a href=\"http://xxx\">http://xxx</a> 等</strong> 表示绝对地址 ；</li>\n</ol>\n<hr>\n<h3 id=\"3moduleprefix\" data-source-line=\"44\"><a class=\"anchor\" href=\"#3moduleprefix\"><span class=\"octicon octicon-link\"></span></a>3.modulePrefix</h3>\n<p data-source-line=\"45\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\".\"、\"/\"开头。</p>\n<pre data-source-line=\"47\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"lib/\"</span>:{\n    		replace:<span class=\"hljs-string\">\"/cdn/lib/\"</span>\n    },\n    <span class=\"hljs-string\">\"lib2/\"</span>:{\n    		replace:<span class=\"hljs-string\">\"/cdn2/lib/\"</span>\n    }\n}</code></pre><p data-source-line=\"57\"><strong>例如</strong>：所有的\"lib/\"前缀会替换成\"/cdn/lib/\",\"lib2/\"前缀会替换成\"/cdn2/lib/\"。</p>\n<hr>\n<h3 id=\"4urlargs\" data-source-line=\"60\"><a class=\"anchor\" href=\"#4urlargs\"><span class=\"octicon octicon-link\"></span></a>4.urlArgs</h3>\n<p data-source-line=\"61\">【对象】</p>\n<pre data-source-line=\"62\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"key\"</span><span class=\"hljs-symbol\">:value</span>,\n    <span class=\"hljs-string\">\"key2\"</span><span class=\"hljs-symbol\">:value2</span>\n}</code></pre><h4 id=\"对key的说明\" data-source-line=\"68\"><a class=\"anchor\" href=\"#对key的说明\"><span class=\"octicon octicon-link\"></span></a>对key的说明：</h4>\n<ol data-source-line=\"69\">\n<li>key<mark>以\".\"开头</mark>，表示相对于xsloader地址的模块；</li>\n<li>key为绝对地址；</li>\n<li>key为相对于baseUrl的地址(不以\".\"开头的相对地址)；</li>\n<li>key为含有modulePrefix前缀的地址；</li>\n<li>key为模块名；</li>\n<li>key以\"*[\"开头，表示指定前缀的地址，支持相对地址(\".\"开头相对于xsloader地址，其他相对于baseUrl)；</li>\n<li>key以\"*]\"开头，表示指定后缀的地址；</li>\n<li>key为\"*\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；</li>\n</ol>\n<h4 id=\"对value的说明\" data-source-line=\"77\"><a class=\"anchor\" href=\"#对value的说明\"><span class=\"octicon octicon-link\"></span></a>对value的说明：</h4>\n<ol data-source-line=\"78\">\n<li>value为字符串；</li>\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；</li>\n</ol>\n<hr>\n<h3 id=\"5autourlargs\" data-source-line=\"82\"><a class=\"anchor\" href=\"#5autourlargs\"><span class=\"octicon octicon-link\"></span></a>5.autoUrlArgs</h3>\n<p data-source-line=\"83\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。</p>\n<hr>\n<h3 id=\"6paths\" data-source-line=\"86\"><a class=\"anchor\" href=\"#6paths\"><span class=\"octicon octicon-link\"></span></a>6.paths</h3>\n<p data-source-line=\"87\">【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。</p>\n<hr>\n<h3 id=\"7depspaths\" data-source-line=\"90\"><a class=\"anchor\" href=\"#7depspaths\"><span class=\"octicon octicon-link\"></span></a>7.depsPaths</h3>\n<p data-source-line=\"91\">【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块<mark>配置依赖</mark>。</p>\n<hr>\n<h3 id=\"8deps\" data-source-line=\"94\"><a class=\"anchor\" href=\"#8deps\"><span class=\"octicon octicon-link\"></span></a>8.deps</h3>\n<p data-source-line=\"95\">【对象】用于配置依赖。</p>\n<pre data-source-line=\"97\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"key\"</span><span class=\"hljs-symbol\">:value</span>,\n    <span class=\"hljs-string\">\"key2\"</span><span class=\"hljs-symbol\">:value2</span>\n}</code></pre><h4 id=\"对key的说明-2\" data-source-line=\"103\"><a class=\"anchor\" href=\"#对key的说明-2\"><span class=\"octicon octicon-link\"></span></a>对key的说明：</h4>\n<ol data-source-line=\"104\">\n<li>key为\"*\"表示对depsPaths中的所有模块添加依赖，但\"*\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；</li>\n<li>key的格式为\"path_or_module1::path_or_module2::path_or_module3...\"表示为指定的模块或路径js添加依赖；</li>\n</ol>\n<h4 id=\"对value的说明-2\" data-source-line=\"106\"><a class=\"anchor\" href=\"#对value的说明-2\"><span class=\"octicon octicon-link\"></span></a>对value的说明：</h4>\n<ol data-source-line=\"107\">\n<li>value为字符串,添加一个依赖；</li>\n<li>value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；</li>\n</ol>\n<hr>\n<h3 id=\"9definefunction\" data-source-line=\"111\"><a class=\"anchor\" href=\"#9definefunction\"><span class=\"octicon octicon-link\"></span></a>9.defineFunction</h3>\n<p data-source-line=\"112\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。</p>\n<pre data-source-line=\"114\"><code class=\"hljs\">{\n    <span class=\"hljs-string\">\"moduleName\"</span><span class=\"hljs-symbol\">:function</span>(<span class=\"hljs-name\">originCallback</span>,originThis,originArgs)\n    {\n        return originCallback.apply(<span class=\"hljs-name\">originThis</span>, originArgs)<span class=\"hljs-comment\">;</span>\n    }\n}</code></pre><hr>\n<h3 id=\"10defaultversion\" data-source-line=\"124\"><a class=\"anchor\" href=\"#10defaultversion\"><span class=\"octicon octicon-link\"></span></a>10.defaultVersion</h3>\n<p data-source-line=\"125\">【对象】默认包名。</p>\n<pre data-source-line=\"127\"><code class=\"hljs\">{\n    <span class=\"hljs-symbol\">\'group</span>:project\':<span class=\"hljs-symbol\">\'versionName\'</span>\n}</code></pre><hr>\n<h3 id=\"11waitseconds\" data-source-line=\"134\"><a class=\"anchor\" href=\"#11waitseconds\"><span class=\"octicon octicon-link\"></span></a>11.waitSeconds</h3>\n<p data-source-line=\"135\">【number】require等待时间，单位秒，默认10。</p>\n<hr>\n<h3 id=\"12properties\" data-source-line=\"138\"><a class=\"anchor\" href=\"#12properties\"><span class=\"octicon octicon-link\"></span></a>12.properties</h3>\n<p data-source-line=\"139\">【对象】用于配变量，所有的字符串都可以使用变量。</p>\n<pre data-source-line=\"141\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    name1:</span>anyType,\n<span class=\"hljs-symbol\">    name2:</span>{\n<span class=\"hljs-symbol\">    	subName1:</span>anyType\n    },\n<span class=\"hljs-symbol\">    name3:</span><span class=\"hljs-string\">\"123\"</span>,\n<span class=\"hljs-symbol\">    name4:</span><span class=\"hljs-string\">\"name${name3}-${name2.subName1}\"</span>,\n<span class=\"hljs-symbol\">    name5:</span>function(){<span class=\"hljs-comment\">//注意：this为当前的properties</span>\n    \n    }\n}</code></pre><h4 id=\"说明\" data-source-line=\"154\"><a class=\"anchor\" href=\"#说明\"><span class=\"octicon octicon-link\"></span></a>说明：</h4>\n<ol data-source-line=\"155\">\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；</li>\n<li>通过${properName}引用字符串属性；</li>\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；</li>\n<li>key中也支持属性引用(除了properties)；</li>\n</ol>\n<hr>\n<h2 id=\"13xsloaderonerror\" data-source-line=\"161\"><a class=\"anchor\" href=\"#13xsloaderonerror\"><span class=\"octicon octicon-link\"></span></a>13.xsloader.onError</h2>\n<p data-source-line=\"162\">全局异常回调。</p>\n<pre data-source-line=\"164\"><code class=\"hljs\">xsloader.onError=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code,errinfo</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.error(code);\n    <span class=\"hljs-built_in\">console</span>.error(errinfo);\n};</code></pre>',24,'ARTICLE',1,'2018-07-18 13:10:21','153189041004409000012',NULL,1,'API说明',1,0,1001,'## 一、使用例子\n\n```\nxsloader(config);\n```\n## 二、config格式\n```\n{\n    baseUrl:\"\",\n    urlArgs:{},\n    autoUrlArgs:false,\n    paths:{},\n    depsPaths:{},\n    deps:{},\n    modulePrefix:{},\n    defineFunction:{},\n    defaultVersion:{},\n    waitSeconds:10,\n    instance:\"single\",\n    properties:{\n        name1:anyType,\n        name2:{\n            subName1:anyType\n        },\n        name3:\"123\",\n        name4:\"name${name3}-${name2.subName1}\",\n        name5:function(){}\n    }\n}\n```\n## 三、属性说明\n\n### 1.baseUrl\n【String】基础参考路径，默认为当前页所在目录。\n\n---\n### 2.路径:==相对与绝对路径==；\n1. **./** 表示当前目录；\n2. **../** 表示上一级目录；\n3. **xx/** 表示相对于baseUrl；\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\n\n---\n### 3.modulePrefix\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\".\"、\"/\"开头。\n\n```\n{\n    \"lib/\":{\n    		replace:\"/cdn/lib/\"\n    },\n    \"lib2/\":{\n    		replace:\"/cdn2/lib/\"\n    }\n}\n```\n**例如**：所有的\"lib/\"前缀会替换成\"/cdn/lib/\",\"lib2/\"前缀会替换成\"/cdn2/lib/\"。\n\n---\n### 4.urlArgs\n【对象】\n```\n{\n    \"key\":value,\n    \"key2\":value2\n}\n```\n#### 对key的说明：\n1. key==以\".\"开头==，表示相对于xsloader地址的模块；\n2. key为绝对地址；\n3. key为相对于baseUrl的地址(不以\".\"开头的相对地址)；\n4. key为含有modulePrefix前缀的地址；\n5. key为模块名；\n6. key以\"*[\"开头，表示指定前缀的地址，支持相对地址(\".\"开头相对于xsloader地址，其他相对于baseUrl)；\n7. key以\"*]\"开头，表示指定后缀的地址；\n8. key为\"\\*\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\*的；\n#### 对value的说明：\n1. value为字符串；\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\n\n---\n### 5.autoUrlArgs\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\n\n---\n### 6.paths\n【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。\n\n---\n### 7.depsPaths\n【String/String[]】用于指定模块的路径(以\".js\"为后缀)，不能使用插件,当为数组时、会按照顺序加载、直到有一个成功。可以为其中的模块==配置依赖==。\n\n---\n### 8.deps\n【对象】用于配置依赖。\n\n```\n{\n    \"key\":value,\n    \"key2\":value2\n}\n```\n#### 对key的说明：\n1. key为\"\\*\"表示对depsPaths中的所有模块添加依赖，但\"\\*\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\n2. key的格式为\"path_or_module1::path_or_module2::path_or_module3...\"表示为指定的模块或路径js添加依赖；\n#### 对value的说明：\n1. value为字符串,添加一个依赖；\n2. value为数组，添加多个依赖(会作为内嵌依赖，第一参数可为boolean值、表示orderDep，默认false)；\n\n---\n### 9.defineFunction\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\n\n```\n{\n    \"moduleName\":function(originCallback,originThis,originArgs)\n    {\n        return originCallback.apply(originThis, originArgs);\n    }\n}\n```\n\n---\n### 10.defaultVersion\n【对象】默认包名。\n\n```\n{\n    \'group:project\':\'versionName\'\n}\n```\n\n---\n### 11.waitSeconds\n【number】require等待时间，单位秒，默认10。\n\n---\n### 12.properties\n【对象】用于配变量，所有的字符串都可以使用变量。\n\n```\n{\n    name1:anyType,\n    name2:{\n    	subName1:anyType\n    },\n    name3:\"123\",\n    name4:\"name${name3}-${name2.subName1}\",\n    name5:function(){//注意：this为当前的properties\n    \n    }\n}\n```\n#### 说明：\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\n2. 通过${properName}引用字符串属性；\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\n4. key中也支持属性引用(除了properties)；\n\n---\n## 13.xsloader.onError\n全局异常回调。\n\n```\nxsloader.onError=function(code,errinfo){\n    console.error(code);\n    console.error(errinfo);\n};\n```','153189028248007000010'),('153190644215601000032','define、require、invoker、[deps]','定义模块与使用模块，[deps]等说明','<h2 id=\"1define定义模块\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1define定义模块\"><span class=\"octicon octicon-link\"></span></a>1.define定义模块</h2>\n<p data-source-line=\"2\">以下content可以是任何类型，当content为<mark>function时表示回调函数</mark>。</p>\n<h3 id=\"使用形式\" data-source-line=\"3\"><a class=\"anchor\" href=\"#使用形式\"><span class=\"octicon octicon-link\"></span></a>使用形式：</h3>\n<ol data-source-line=\"4\">\n<li>define([deps],content)</li>\n<li>define(content)</li>\n<li>define(moduleName,[deps],content)</li>\n<li>define(moduleName,content)</li>\n</ol>\n<pre data-source-line=\"9\"><code class=\"hljs\">define([<span class=\"hljs-string\">\"moduleA\"</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(A)</span></span>{\n\n});</code></pre><hr>\n<h2 id=\"2definethen\" data-source-line=\"16\"><a class=\"anchor\" href=\"#2definethen\"><span class=\"octicon octicon-link\"></span></a>2.define.then</h2>\n<pre data-source-line=\"18\"><code class=\"hljs\">define(...).<span class=\"hljs-keyword\">then</span>({\n    <span class=\"hljs-string\">\"onError\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n    \n    },\n    <span class=\"hljs-string\">\"orderDep\"</span>:<span class=\"hljs-keyword\">false</span>\n});</code></pre><ol data-source-line=\"26\">\n<li>onError错误回调</li>\n<li>orderDep表示是否按照顺序加载依赖，默false。</li>\n</ol>\n<hr>\n<h2 id=\"3require\" data-source-line=\"30\"><a class=\"anchor\" href=\"#3require\"><span class=\"octicon octicon-link\"></span></a>3.require</h2>\n<h3 id=\"使用形式-2\" data-source-line=\"31\"><a class=\"anchor\" href=\"#使用形式-2\"><span class=\"octicon octicon-link\"></span></a>使用形式：</h3>\n<ol data-source-line=\"32\">\n<li>require(\"moduleName\"),获取已经加载的模块；如果没有加载过，会抛出异常。</li>\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\"a\",\"b\",\"c\");</li>\n<li>require([deps],function(dep1,dep2,...){})</li>\n</ol>\n<hr>\n<h2 id=\"4requirethen\" data-source-line=\"37\"><a class=\"anchor\" href=\"#4requirethen\"><span class=\"octicon octicon-link\"></span></a>4.require.then</h2>\n<pre data-source-line=\"39\"><code class=\"hljs\"><span class=\"hljs-built_in\">require</span>(...).<span class=\"hljs-keyword\">then</span>({\n    <span class=\"hljs-string\">\"onError\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n    \n    },\n    <span class=\"hljs-string\">\"orderDep\"</span>:<span class=\"hljs-keyword\">false</span>\n});</code></pre><ol data-source-line=\"47\">\n<li>onError错误回调</li>\n<li>orderDep表示是否按照顺序加载依赖，默false。</li>\n</ol>\n<hr>\n<h2 id=\"5this与_invoker_\" data-source-line=\"51\"><a class=\"anchor\" href=\"#5this与_invoker_\"><span class=\"octicon octicon-link\"></span></a>5.this与_invoker_</h2>\n<p data-source-line=\"52\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：</p>\n<ol data-source-line=\"53\">\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；</li>\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：</li>\n</ol>\n<ul data-source-line=\"55\">\n<li>\n<ol>\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\" data-source-line=\"57\">\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；</li>\n<li>getName，function，获取当前模块或插件的名称；</li>\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)</li>\n</ol>\n<hr>\n<h2 id=\"6deps\" data-source-line=\"62\"><a class=\"anchor\" href=\"#6deps\"><span class=\"octicon octicon-link\"></span></a>6.[deps]</h2>\n<p data-source-line=\"63\">格式[module1,module2,...,moduleX]</p>\n<ol data-source-line=\"64\">\n<li>版本模块:moduleX=\"group:project:version\",如\"cn.xishan:demo:1.0\"。</li>\n<li>版本模块（默认版本）：moduleX=\"group:project\"(需要配置默认版本,否则会报错)。</li>\n<li>module名称：moduleX=\"myModule\",其中myModule在paths或depsPaths中定义过、不以\".js\"结尾。</li>\n<li>path路径(不可省略.js后缀)：如moduleX=\"/js/..../myModuleName.js\"</li>\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\"m1\",\"m2\"],\"m3\",\"m4\"],则[(orderDep),\"m1\",\"m2\"]里的orderDep（默认为true）为true表示顺序加载</li>\n</ol>\n<hr>\n<h2 id=\"7重要说明\" data-source-line=\"71\"><a class=\"anchor\" href=\"#7重要说明\"><span class=\"octicon octicon-link\"></span></a>7.<mark>重要说明</mark></h2>\n<ol data-source-line=\"72\">\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。</li>\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。</li>\n<li>模块路径应该都以\".js\"为后缀。</li>\n</ol>',4,'ARTICLE',1,'2018-07-18 17:34:02','153189041004409000012',NULL,1,'API说明',1,0,1000,'## 1.define定义模块\n以下content可以是任何类型，当content为==function时表示回调函数==。\n### 使用形式：\n1. define([deps],content)\n2. define(content)\n3. define(moduleName,[deps],content)\n4. define(moduleName,content)\n\n```\ndefine([\"moduleA\"],function(A){\n\n});\n```\n\n---\n## 2.define.then\n\n```\ndefine(...).then({\n    \"onError\":function(err){\n    \n    },\n    \"orderDep\":false\n});\n```\n1. onError错误回调\n2. orderDep表示是否按照顺序加载依赖，默false。\n\n---\n## 3.require\n### 使用形式：\n1. require(\"moduleName\"),获取已经加载的模块；如果没有加载过，会抛出异常。\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\"a\",\"b\",\"c\");\n3. require([deps],function(dep1,dep2,...){})\n\n---\n## 4.require.then\n\n```\nrequire(...).then({\n    \"onError\":function(err){\n    \n    },\n    \"orderDep\":false\n});\n```\n1. onError错误回调\n2. orderDep表示是否按照顺序加载依赖，默false。\n\n---\n## 5.this与_invoker_\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\n4. getName，function，获取当前模块或插件的名称；\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\n\n---\n## 6.[deps]\n格式[module1,module2,...,moduleX]\n1. 版本模块:moduleX=\"group:project:version\",如\"cn.xishan:demo:1.0\"。\n2. 版本模块（默认版本）：moduleX=\"group:project\"(需要配置默认版本,否则会报错)。\n3. module名称：moduleX=\"myModule\",其中myModule在paths或depsPaths中定义过、不以\".js\"结尾。\n4. path路径(不可省略.js后缀)：如moduleX=\"/js/..../myModuleName.js\"\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\"m1\",\"m2\"],\"m3\",\"m4\"],则[(orderDep),\"m1\",\"m2\"]里的orderDep（默认为true）为true表示顺序加载\n\n---\n## 7.==重要说明==\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\n3. 模块路径应该都以\".js\"为后缀。','153189028248007000010'),('153190648624301000033','插件定义、内置插件与模块','插件定义、内置插件与模块','<h2 id=\"1自定义插件\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1自定义插件\"><span class=\"octicon octicon-link\"></span></a>1.自定义插件</h2>\n<p data-source-line=\"2\">pluginObject格式:</p>\n<pre data-source-line=\"4\"><code class=\"hljs\">{\n  	<span class=\"hljs-string\">\"pluginMain\"</span><span class=\"hljs-symbol\">:function</span>(<span class=\"hljs-name\">pluginArgs</span>, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n}</code></pre><p data-source-line=\"12\">定义例子：</p>\n<pre data-source-line=\"14\"><code class=\"hljs\">define(<span class=\"hljs-string\">\"pluginA\"</span>,[deps],{\n    <span class=\"hljs-string\">\"pluginMain\"</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\"hljs-rest_arg\">...)\n  	{\n  	\n  	}\n});\n\ndefine</span>([deps],{\n    <span class=\"hljs-string\">\"pluginMain\"</span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\"hljs-rest_arg\">...)\n  	{\n  	\n  	}\n});</span></span></span></code></pre><ol data-source-line=\"29\">\n<li>onload(result，ignoreAspect=true)</li>\n<li>onerror(err)</li>\n</ol>\n<hr>\n<h2 id=\"2内置插件\" data-source-line=\"33\"><a class=\"anchor\" href=\"#2内置插件\"><span class=\"octicon octicon-link\"></span></a>2.内置插件</h2>\n<h3 id=\"csstextjson\" data-source-line=\"35\"><a class=\"anchor\" href=\"#csstextjson\"><span class=\"octicon octicon-link\"></span></a>css!,text!,json!</h3>\n<p data-source-line=\"36\">【格式】:type!resourceUrl；<br></p>\n<h3 id=\"name\" data-source-line=\"38\"><a class=\"anchor\" href=\"#name\"><span class=\"octicon octicon-link\"></span></a>name!</h3>\n<p data-source-line=\"39\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\n【作用】：用于给模块命名。</p>\n<h3 id=\"window\" data-source-line=\"42\"><a class=\"anchor\" href=\"#window\"><span class=\"octicon octicon-link\"></span></a>window!</h3>\n<p data-source-line=\"43\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\n【作用】：用于把模块添加到window对象中。</p>\n<h3 id=\"withdeps\" data-source-line=\"46\"><a class=\"anchor\" href=\"#withdeps\"><span class=\"octicon octicon-link\"></span></a>withdeps!</h3>\n<p data-source-line=\"47\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\n【作用】：用于方便给模块添加依赖。</p>\n<hr>\n<h2 id=\"3内置模块\" data-source-line=\"51\"><a class=\"anchor\" href=\"#3内置模块\"><span class=\"octicon octicon-link\"></span></a>3.内置模块</h2>\n<h3 id=\"exports\" data-source-line=\"53\"><a class=\"anchor\" href=\"#exports\"><span class=\"octicon octicon-link\"></span></a>exports</h3>\n<p data-source-line=\"54\">代表当前模块，可以直接为添加属性。</p>\n<h3 id=\"xshttp\" data-source-line=\"56\"><a class=\"anchor\" href=\"#xshttp\"><span class=\"octicon octicon-link\"></span></a>xshttp</h3>\n<p data-source-line=\"57\">网络访模块。</p>\n<h3 id=\"xsmsg\" data-source-line=\"59\"><a class=\"anchor\" href=\"#xsmsg\"><span class=\"octicon octicon-link\"></span></a>xsmsg</h3>\n<p data-source-line=\"60\">窗口通信模块，支持跨域。</p>\n<h3 id=\"xslinkedlist\" data-source-line=\"62\"><a class=\"anchor\" href=\"#xslinkedlist\"><span class=\"octicon octicon-link\"></span></a>XsLinkedList</h3>\n<p data-source-line=\"63\">链表。</p>',4,'ARTICLE',1,'2018-07-18 17:34:46','153189041004409000012',NULL,1,'API说明',1,0,500,'## 1.自定义插件\npluginObject格式:\n\n```\n{\n  	\"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n}\n```\n定义例子：\n\n```\ndefine(\"pluginA\",[deps],{\n    \"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n});\n\ndefine([deps],{\n    \"pluginMain\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\n  	{\n  	\n  	}\n});\n```\n1. onload(result，ignoreAspect=true)\n2. onerror(err)\n\n---\n## 2.内置插件\n\n### css!,text!,json!\n【格式】:type!resourceUrl；<br>\n\n### name!\n【格式】：name!moduleName=>>modulePath<br>\n【作用】：用于给模块命名。\n\n### window!\n【格式】：window!varNameInWindow=>>modulePath<br>\n【作用】：用于把模块添加到window对象中。\n\n### withdeps!\n【格式】：withdeps!modulePath=>>[deps]<br>\n【作用】：用于方便给模块添加依赖。\n\n---\n## 3.内置模块\n\n### exports\n代表当前模块，可以直接为添加属性。\n\n### xshttp\n网络访模块。\n\n### xsmsg\n窗口通信模块，支持跨域。\n\n### XsLinkedList\n链表。','153189028248007000010'),('153190958824901000049','xshttp','网络访问模块，对XMLHttpRequest的封装。','<h2 id=\"1使用方式\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1使用方式\"><span class=\"octicon octicon-link\"></span></a>1.使用方式</h2>\n<pre data-source-line=\"3\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xshttp\"</span>);\n或\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xshttp\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">http</span>)</span>{\n\n});\n或\ndefine([<span class=\"hljs-string\">\"xshttp\"</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">http</span>)</span>{\n\n});</code></pre><h3 id=\"通过option方式\" data-source-line=\"16\"><a class=\"anchor\" href=\"#通过option方式\"><span class=\"octicon octicon-link\"></span></a>通过option方式</h3>\n<pre data-source-line=\"18\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> option={\n    url:<span class=\"hljs-string\">\"Hello/say\"</span>,\n    method:<span class=\"hljs-string\">\"get\"</span>,\n    params:{\n        \n    },\n    ok:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    \n    },\n    fail:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    \n    }\n};\n\nhttp(option).done();</code></pre><hr>\n<h3 id=\"通过函数设置的方式\" data-source-line=\"37\"><a class=\"anchor\" href=\"#通过函数设置的方式\"><span class=\"octicon octicon-link\"></span></a>通过函数设置的方式</h3>\n<p data-source-line=\"38\"><strong>注意</strong>：</p>\n<ol data-source-line=\"39\">\n<li>参数与函数是一一对应的。</li>\n<li>两种调用方式必都以\"<mark>.done()</mark>\"结束。</li>\n</ol>\n<pre data-source-line=\"42\"><code class=\"hljs\"><span class=\"hljs-selector-tag\">http</span>()\n<span class=\"hljs-selector-class\">.url</span>(<span class=\"hljs-string\">\"Hello/say\"</span>)<span class=\"hljs-selector-class\">.method</span>(<span class=\"hljs-string\">\"get\"</span>)<span class=\"hljs-selector-class\">.params</span>({})\n<span class=\"hljs-selector-class\">.ok</span>(function(){\n\n})\n<span class=\"hljs-selector-class\">.fail</span>(function(){\n\n})\n<span class=\"hljs-selector-class\">.done</span>();</code></pre><h2 id=\"2基本参数说明\" data-source-line=\"55\"><a class=\"anchor\" href=\"#2基本参数说明\"><span class=\"octicon octicon-link\"></span></a>2.基本参数说明</h2>\n<h3 id=\"url\" data-source-line=\"57\"><a class=\"anchor\" href=\"#url\"><span class=\"octicon octicon-link\"></span></a>url</h3>\n<p data-source-line=\"58\">【String】设置访问的地址</p>\n<h3 id=\"method\" data-source-line=\"60\"><a class=\"anchor\" href=\"#method\"><span class=\"octicon octicon-link\"></span></a>method</h3>\n<p data-source-line=\"61\">【String】设置请求方法：get、post、put、delete等</p>\n<h3 id=\"params\" data-source-line=\"63\"><a class=\"anchor\" href=\"#params\"><span class=\"octicon octicon-link\"></span></a>params</h3>\n<p data-source-line=\"64\">【对象】设置请求参数，为对象的属性会被转换成字符串。</p>\n<h3 id=\"headers\" data-source-line=\"66\"><a class=\"anchor\" href=\"#headers\"><span class=\"octicon octicon-link\"></span></a>headers</h3>\n<p data-source-line=\"67\">【对象】设置请求头。</p>\n<h3 id=\"async\" data-source-line=\"69\"><a class=\"anchor\" href=\"#async\"><span class=\"octicon octicon-link\"></span></a>async</h3>\n<p data-source-line=\"70\">【boolean】设置是否异步，默认true。</p>\n<h3 id=\"multipart\" data-source-line=\"72\"><a class=\"anchor\" href=\"#multipart\"><span class=\"octicon octicon-link\"></span></a>multiPart</h3>\n<p data-source-line=\"73\">【boolean】设置是否同multiPart表单提交，默false。</p>\n<h3 id=\"handletype\" data-source-line=\"75\"><a class=\"anchor\" href=\"#handletype\"><span class=\"octicon octicon-link\"></span></a>handleType</h3>\n<p data-source-line=\"76\">【String】设置响应结果的处理类型：json，text。默认json。</p>\n<h3 id=\"ok\" data-source-line=\"78\"><a class=\"anchor\" href=\"#ok\"><span class=\"octicon octicon-link\"></span></a>ok</h3>\n<p data-source-line=\"79\">【function】成功的回调。</p>\n<pre data-source-line=\"81\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result,xhr)</span></span>{\n\n}</code></pre><h3 id=\"fail\" data-source-line=\"87\"><a class=\"anchor\" href=\"#fail\"><span class=\"octicon octicon-link\"></span></a>fail</h3>\n<p data-source-line=\"88\">【function】失败的回调。</p>\n<pre data-source-line=\"90\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n\n}</code></pre><h3 id=\"uploadstart\" data-source-line=\"96\"><a class=\"anchor\" href=\"#uploadstart\"><span class=\"octicon octicon-link\"></span></a>uploadStart</h3>\n<p data-source-line=\"97\">【function】文件上传开始的回调。</p>\n<h3 id=\"uploadprogress\" data-source-line=\"99\"><a class=\"anchor\" href=\"#uploadprogress\"><span class=\"octicon octicon-link\"></span></a>uploadProgress</h3>\n<p data-source-line=\"100\">【function】文件上传中的回调。</p>\n<h3 id=\"uploadok\" data-source-line=\"102\"><a class=\"anchor\" href=\"#uploadok\"><span class=\"octicon octicon-link\"></span></a>uploadOk</h3>\n<p data-source-line=\"103\">【function】文件上传成功的回调。</p>\n<h3 id=\"uploaderror\" data-source-line=\"106\"><a class=\"anchor\" href=\"#uploaderror\"><span class=\"octicon octicon-link\"></span></a>uploadError</h3>\n<p data-source-line=\"107\">【function】文件上传失败的回调。</p>\n<h3 id=\"uploadend\" data-source-line=\"109\"><a class=\"anchor\" href=\"#uploadend\"><span class=\"octicon octicon-link\"></span></a>uploadEnd</h3>\n<p data-source-line=\"110\">【function】文件上传结束的回调,不论成功与否。</p>\n<h3 id=\"_beforeopenhook\" data-source-line=\"112\"><a class=\"anchor\" href=\"#_beforeopenhook\"><span class=\"octicon octicon-link\"></span></a>_beforeOpenHook</h3>\n<p data-source-line=\"113\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。</p>\n<pre data-source-line=\"115\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _beforeOpenHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(option, callback,xhr)</span> </span>{\n	<span class=\"hljs-keyword\">callback</span>();\n};</code></pre><p data-source-line=\"120\"><strong>注意</strong>：只有调用callback(),才会继续进行请求。</p>\n<h3 id=\"_onokresponsehook\" data-source-line=\"123\"><a class=\"anchor\" href=\"#_onokresponsehook\"><span class=\"octicon octicon-link\"></span></a>_onOkResponseHook</h3>\n<p data-source-line=\"124\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。</p>\n<pre data-source-line=\"126\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _onOkResponseHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result, option, callback, xhr)</span> </span>{\n	<span class=\"hljs-keyword\">callback</span>(result);\n};</code></pre><p data-source-line=\"131\"><strong>注意</strong>：只有调用callback(result),才会继续调用ok回调。</p>\n<h3 id=\"_onfailresponsehook\" data-source-line=\"134\"><a class=\"anchor\" href=\"#_onfailresponsehook\"><span class=\"octicon octicon-link\"></span></a>_onFailResponseHook</h3>\n<p data-source-line=\"135\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。</p>\n<pre data-source-line=\"137\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> _onFailResponseHook = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(option, callback, xhr,extraErrorType)</span> </span>{\n	callback(<span class=\"hljs-literal\">undefined</span>);\n};</code></pre><p data-source-line=\"142\"><strong>说明</strong>：</p>\n<ol data-source-line=\"143\">\n<li>callback(undefined)：表示进行默认fail回调。</li>\n<li>callback(false)：不会进后面的fail回调。</li>\n<li>callback(result)：会进行ok回调，回调结果是result。</li>\n<li>extraErrorType==\"parse-json-error\"：表示转换成json时出错。</li>\n</ol>',16,'ARTICLE',1,'2018-07-18 18:26:28','153189041004409000012',NULL,1,'API说明',1,0,386,'## 1.使用方式\n\n```\nvar http=require(\"xshttp\");\n或\nrequire(\"xshttp\",function(http){\n\n});\n或\ndefine([\"xshttp\"],function(http){\n\n});\n```\n\n\n### 通过option方式\n\n```\nvar option={\n    url:\"Hello/say\",\n    method:\"get\",\n    params:{\n        \n    },\n    ok:function(){\n    \n    },\n    fail:function(){\n    \n    }\n};\n\nhttp(option).done();\n```\n\n---\n### 通过函数设置的方式\n**注意**：\n1. 参数与函数是一一对应的。\n2. 两种调用方式必都以\"==.done()==\"结束。\n\n```\nhttp()\n.url(\"Hello/say\").method(\"get\").params({})\n.ok(function(){\n\n})\n.fail(function(){\n\n})\n.done();\n\n```\n\n## 2.基本参数说明\n\n### url\n【String】设置访问的地址\n\n### method\n【String】设置请求方法：get、post、put、delete等\n\n### params\n【对象】设置请求参数，为对象的属性会被转换成字符串。\n\n### headers\n【对象】设置请求头。\n\n### async\n【boolean】设置是否异步，默认true。\n\n### multiPart\n【boolean】设置是否同multiPart表单提交，默false。\n\n### handleType\n【String】设置响应结果的处理类型：json，text。默认json。\n\n### ok\n【function】成功的回调。\n\n```\nfunction(result,xhr){\n\n}\n```\n\n### fail\n【function】失败的回调。\n\n```\nfunction(err){\n\n}\n```\n\n### uploadStart\n【function】文件上传开始的回调。\n\n### uploadProgress\n【function】文件上传中的回调。\n\n### uploadOk\n【function】文件上传成功的回调。\n\n\n### uploadError\n【function】文件上传失败的回调。\n\n### uploadEnd\n【function】文件上传结束的回调,不论成功与否。\n\n### _beforeOpenHook\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\n\n```\nvar _beforeOpenHook = function(option, callback,xhr) {\n	callback();\n};\n```\n**注意**：只有调用callback(),才会继续进行请求。\n\n\n### _onOkResponseHook\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\n\n```\nvar _onOkResponseHook = function(result, option, callback, xhr) {\n	callback(result);\n};\n```\n**注意**：只有调用callback(result),才会继续调用ok回调。\n\n\n### _onFailResponseHook\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\n\n```\nvar _onFailResponseHook = function(option, callback, xhr,extraErrorType) {\n	callback(undefined);\n};\n```\n**说明**：\n1. callback(undefined)：表示进行默认fail回调。\n2. callback(false)：不会进后面的fail回调。\n3. callback(result)：会进行ok回调，回调结果是result。\n4. extraErrorType==\"parse-json-error\"：表示转换成json时出错。','153189028248007000010'),('153190964856301000050','xsmsg','窗口通信模块，支持跨域。','<pre data-source-line=\"1\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> xsmsg=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"xsmsg\"</span>);</code></pre><h2 id=\"1option说明\" data-source-line=\"6\"><a class=\"anchor\" href=\"#1option说明\"><span class=\"octicon octicon-link\"></span></a>1.option说明</h2>\n<pre data-source-line=\"8\"><code class=\"hljs\">{\n<span class=\"hljs-symbol\">    cmd:</span>命令类型名\n<span class=\"hljs-symbol\">    originSend:</span>发送源\n<span class=\"hljs-symbol\">    originReceive:</span>接收源\n<span class=\"hljs-symbol\">    listener:</span>消息监听\n<span class=\"hljs-symbol\">    connected:</span>成功连接\n<span class=\"hljs-symbol\">    conndata:</span>连接数据\n}</code></pre><p data-source-line=\"18\"><strong>参数说明</strong>:</p>\n<ol data-source-line=\"19\">\n<li>cmd:只有相同命令类型的，才可以进行连接</li>\n<li>originSend:【String】或【function(source)】(返回origin)</li>\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)</li>\n<li>listener:【function(data,sender,extra)】</li>\n<li>connected:【function(sender,conndata,extra)】</li>\n<li>conndata:【对象】连接时传递的对象</li>\n<li>extra.originStr：【字符串】对方页面的地址</li>\n</ol>\n<h2 id=\"2connectiframeiframe-option\" data-source-line=\"27\"><a class=\"anchor\" href=\"#2connectiframeiframe-option\"><span class=\"octicon octicon-link\"></span></a>2.connectIFrame(iframe, option)</h2>\n<p data-source-line=\"28\">用于连接iframe.</p>\n<ol data-source-line=\"29\">\n<li>iframe:dom对象或选择器</li>\n</ol>\n<h2 id=\"3connectparentoption\" data-source-line=\"31\"><a class=\"anchor\" href=\"#3connectparentoption\"><span class=\"octicon octicon-link\"></span></a>3.connectParent(option)</h2>\n<p data-source-line=\"32\">用于连接父页面.</p>\n<h2 id=\"4connecttopoption\" data-source-line=\"34\"><a class=\"anchor\" href=\"#4connecttopoption\"><span class=\"octicon octicon-link\"></span></a>4.connectTop(option)</h2>\n<p data-source-line=\"35\">用于连接顶层页面.</p>\n<h2 id=\"5connectopeneroption\" data-source-line=\"37\"><a class=\"anchor\" href=\"#5connectopeneroption\"><span class=\"octicon octicon-link\"></span></a>5.connectOpener(option)</h2>\n<p data-source-line=\"38\">用于连接打开本页面的窗口.</p>\n<h2 id=\"6listenmessageoption\" data-source-line=\"40\"><a class=\"anchor\" href=\"#6listenmessageoption\"><span class=\"octicon octicon-link\"></span></a>6.listenMessage(option)</h2>\n<p data-source-line=\"41\">用于监听其他页面的消息.</p>',3,'ARTICLE',1,'2018-07-18 18:27:29','153189041004409000012',NULL,1,'API说明',1,0,400,'```\nvar xsmsg=require(\"xsmsg\");\n```\n\n\n## 1.option说明\n\n```\n{\n    cmd:命令类型名\n    originSend:发送源\n    originReceive:接收源\n    listener:消息监听\n    connected:成功连接\n    conndata:连接数据\n}\n```\n**参数说明**:\n1. cmd:只有相同命令类型的，才可以进行连接\n2. originSend:【String】或【function(source)】(返回origin)\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\n4. listener:【function(data,sender,extra)】\n5. connected:【function(sender,conndata,extra)】\n6. conndata:【对象】连接时传递的对象\n7. extra.originStr：【字符串】对方页面的地址\n\n## 2.connectIFrame(iframe, option)\n用于连接iframe.\n1. iframe:dom对象或选择器\n\n## 3.connectParent(option)\n用于连接父页面.\n\n## 4.connectTop(option)\n用于连接顶层页面.\n\n## 5.connectOpener(option)\n用于连接打开本页面的窗口.\n\n## 6.listenMessage(option)\n用于监听其他页面的消息.','153189028248007000010'),('153190973123201000051','内置函数','内置函数','<h2 id=\"1xsloaderconfig\" data-source-line=\"1\"><a class=\"anchor\" href=\"#1xsloaderconfig\"><span class=\"octicon octicon-link\"></span></a>1.xsloader.config()</h2>\n<p data-source-line=\"2\">获取最终配置对象。</p>\n<ol data-source-line=\"3\">\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。</li>\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。</li>\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。</li>\n</ol>\n<h2 id=\"2xsloaderscript\" data-source-line=\"7\"><a class=\"anchor\" href=\"#2xsloaderscript\"><span class=\"octicon octicon-link\"></span></a>2.xsloader.script()</h2>\n<p data-source-line=\"8\">得到xsloader的script对象。</p>\n<h2 id=\"3xsloaderextendtargetobj1obj2\" data-source-line=\"10\"><a class=\"anchor\" href=\"#3xsloaderextendtargetobj1obj2\"><span class=\"octicon octicon-link\"></span></a>3.xsloader.extend(target,obj1,obj2,...)</h2>\n<p data-source-line=\"11\">扩展对象。</p>\n<h2 id=\"4xsloaderextenddeeptargetobj1obj2\" data-source-line=\"13\"><a class=\"anchor\" href=\"#4xsloaderextenddeeptargetobj1obj2\"><span class=\"octicon octicon-link\"></span></a>4.xsloader.extendDeep(target,obj1,obj2,...)</h2>\n<p data-source-line=\"14\">深度扩展对象。</p>\n<h2 id=\"5xsloaderie_version\" data-source-line=\"16\"><a class=\"anchor\" href=\"#5xsloaderie_version\"><span class=\"octicon octicon-link\"></span></a>5.xsloader.IE_VERSION</h2>\n<p data-source-line=\"17\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。</p>\n<h2 id=\"6xsloaderasynccallfun\" data-source-line=\"19\"><a class=\"anchor\" href=\"#6xsloaderasynccallfun\"><span class=\"octicon octicon-link\"></span></a>6.xsloader.asyncCall(fun)</h2>\n<p data-source-line=\"20\">异步执行。</p>\n<h2 id=\"7xsloadertrycallfun-defaultreturnthiz\" data-source-line=\"22\"><a class=\"anchor\" href=\"#7xsloadertrycallfun-defaultreturnthiz\"><span class=\"octicon octicon-link\"></span></a>7.xsloader.tryCall(fun,[ defaultReturn,thiz])</h2>\n<p data-source-line=\"23\">调用fun，防止抛出异常。</p>\n<h2 id=\"8randid\" data-source-line=\"25\"><a class=\"anchor\" href=\"#8randid\"><span class=\"octicon octicon-link\"></span></a>8.randId</h2>\n<p data-source-line=\"26\">【或】xsloader.randId。生成一个随机的唯一ID。</p>\n<h2 id=\"9xsloadercloneobjisdeep\" data-source-line=\"28\"><a class=\"anchor\" href=\"#9xsloadercloneobjisdeep\"><span class=\"octicon octicon-link\"></span></a>9.xsloader.clone(obj,[isDeep])</h2>\n<p data-source-line=\"29\">复制对象。isDeep表示是否深度复制。</p>\n<h2 id=\"10xsloaderis\" data-source-line=\"31\"><a class=\"anchor\" href=\"#10xsloaderis\"><span class=\"octicon octicon-link\"></span></a>10.xsloader.is...</h2>\n<ol data-source-line=\"32\">\n<li>xsloader.isArray(arg)：是否是数组</li>\n<li>xsloader.isString(arg)：是否是字符串</li>\n<li>xsloader.isObject(arg)：是否是Object</li>\n<li>xsloader.isFunction(arg)：是否是function</li>\n<li>xsloader.isDate(arg)：是否是Date对象</li>\n<li>xsloader.isRegExp(arg):是否是正则表达式对象</li>\n</ol>\n<h2 id=\"11xsloadergetobjectattrobj-attrnamesdefaultvalue\" data-source-line=\"39\"><a class=\"anchor\" href=\"#11xsloadergetobjectattrobj-attrnamesdefaultvalue\"><span class=\"octicon octicon-link\"></span></a>11.xsloader.getObjectAttr(obj, attrNames,[defaultValue])</h2>\n<p data-source-line=\"40\">获取对象属性，支持多级调用。</p>\n<pre data-source-line=\"42\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> obj={\n    name:<span class=\"hljs-string\">\"Chen\"</span>,\n    skills:{\n        js:<span class=\"hljs-literal\">true</span>\n    }\n};\n\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"name\"</span>)===<span class=\"hljs-string\">\"Chen\"</span>\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"skills.js\"</span>)===<span class=\"hljs-literal\">true</span></code></pre><h2 id=\"12xsloadersetobjectattrobj-attrnames-value\" data-source-line=\"55\"><a class=\"anchor\" href=\"#12xsloadersetobjectattrobj-attrnames-value\"><span class=\"octicon octicon-link\"></span></a>12.xsloader.setObjectAttr(obj, attrNames, value)</h2>\n<p data-source-line=\"56\">设对象属性，支持多级设置。</p>\n<pre data-source-line=\"58\"><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> obj={\n    name:<span class=\"hljs-string\">\"\"</span>\n};\n\nxsloader.setObjectAttr(obj, <span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Chen\"</span>);\nxsloader.setObjectAttr(obj, <span class=\"hljs-string\">\"skills.js\"</span>, <span class=\"hljs-literal\">true</span>);\n\n\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"name\"</span>)===<span class=\"hljs-string\">\"Chen\"</span>\nxsloader.getObjectAttr(obj,<span class=\"hljs-string\">\"skills.js\"</span>)===<span class=\"hljs-literal\">true</span></code></pre><h2 id=\"13startswithstr-starts\" data-source-line=\"72\"><a class=\"anchor\" href=\"#13startswithstr-starts\"><span class=\"octicon octicon-link\"></span></a>13.startsWith(str, starts)</h2>\n<p data-source-line=\"73\">判断str是否以字符串starts开头。</p>\n<h2 id=\"14endswithstr-ends\" data-source-line=\"75\"><a class=\"anchor\" href=\"#14endswithstr-ends\"><span class=\"octicon octicon-link\"></span></a>14.endsWith(str, ends)</h2>\n<p data-source-line=\"76\">判断str是否以字符串ends结尾。</p>\n<h2 id=\"15xsparsejsonstroption\" data-source-line=\"78\"><a class=\"anchor\" href=\"#15xsparsejsonstroption\"><span class=\"octicon octicon-link\"></span></a>15.xsParseJson(str,[option])</h2>\n<p data-source-line=\"79\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\n<strong>说明</strong>：</p>\n<ol data-source-line=\"81\">\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。</li>\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。</li>\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。</li>\n</ol>\n<h2 id=\"16xsjson2stringobj\" data-source-line=\"85\"><a class=\"anchor\" href=\"#16xsjson2stringobj\"><span class=\"octicon octicon-link\"></span></a>16.xsJson2String(obj)</h2>\n<p data-source-line=\"86\">将对象obj转换成json字符串。</p>\n<h2 id=\"17indexinarrayarray-ele-compare\" data-source-line=\"88\"><a class=\"anchor\" href=\"#17indexinarrayarray-ele-compare\"><span class=\"octicon octicon-link\"></span></a>17.indexInArray(array, ele, [compare])</h2>\n<p data-source-line=\"89\">在array中查找指定元素ele第一次出现的位置。</p>\n<ol data-source-line=\"90\">\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。</li>\n</ol>\n<h2 id=\"18indexinarrayfromarray-eleoffset-compare\" data-source-line=\"92\"><a class=\"anchor\" href=\"#18indexinarrayfromarray-eleoffset-compare\"><span class=\"octicon octicon-link\"></span></a>18.indexInArrayFrom(array, ele,offset, [compare])</h2>\n<p data-source-line=\"93\">从offset开始查找，见indexInArray。</p>\n<h2 id=\"19getpathwithrelativepath-relative-ispathdir\" data-source-line=\"95\"><a class=\"anchor\" href=\"#19getpathwithrelativepath-relative-ispathdir\"><span class=\"octicon octicon-link\"></span></a>19.getPathWithRelative(path, relative,[ isPathDir])</h2>\n<p data-source-line=\"96\">获取相对路径。</p>\n<ol data-source-line=\"97\">\n<li>path：参考地址。</li>\n<li>relative：相对地址，可以是绝对地址。</li>\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\"/\"结尾、路径名称不含后缀表示目录）。</li>\n</ol>\n<h2 id=\"20appendargs2urlurl-urlargs\" data-source-line=\"101\"><a class=\"anchor\" href=\"#20appendargs2urlurl-urlargs\"><span class=\"octicon octicon-link\"></span></a>20.appendArgs2Url(url, urlArgs)</h2>\n<p data-source-line=\"102\">为url添加参数。</p>\n<ol data-source-line=\"103\">\n<li>urlArgs为字符串：如\"a=1&amp;b=2\"。</li>\n<li>urlArgs对象。</li>\n</ol>\n<h2 id=\"21querystring2paramsmapargsstr-decode\" data-source-line=\"106\"><a class=\"anchor\" href=\"#21querystring2paramsmapargsstr-decode\"><span class=\"octicon octicon-link\"></span></a>21.queryString2ParamsMap(argsStr, [decode])</h2>\n<p data-source-line=\"107\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。</p>\n<pre data-source-line=\"109\"><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-title\">queryString2ParamsMap</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"a=1&amp;b=2\"</span>)</span></span>\n返回：\n{\n    <span class=\"hljs-selector-tag\">a</span>:<span class=\"hljs-string\">\"1\"</span>,\n    <span class=\"hljs-selector-tag\">b</span>:<span class=\"hljs-string\">\"2\"</span>\n}</code></pre><h2 id=\"22arrayprototypeindexofelemfromindex\" data-source-line=\"118\"><a class=\"anchor\" href=\"#22arrayprototypeindexofelemfromindex\"><span class=\"octicon octicon-link\"></span></a>22.Array.prototype.indexOf(elem,[fromIndex])</h2>\n<p data-source-line=\"119\">查找元素在数组中出现的位置。</p>\n<h2 id=\"23arraypushalltargetarrarr\" data-source-line=\"121\"><a class=\"anchor\" href=\"#23arraypushalltargetarrarr\"><span class=\"octicon octicon-link\"></span></a>23.Array.pushAll(targetArr,arr)</h2>\n<p data-source-line=\"122\">将arr中的所有元素push到targetArr中。</p>',7,'ARTICLE',1,'2018-07-18 18:28:51','153189041004409000012',NULL,1,'API说明',1,0,296,'## 1.xsloader.config()\n获取最终配置对象。\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\n\n## 2.xsloader.script()\n得到xsloader的script对象。\n\n## 3.xsloader.extend(target,obj1,obj2,...)\n扩展对象。\n\n## 4.xsloader.extendDeep(target,obj1,obj2,...)\n深度扩展对象。\n\n## 5.xsloader.IE_VERSION\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\n\n## 6.xsloader.asyncCall(fun)\n异步执行。\n\n## 7.xsloader.tryCall(fun,[ defaultReturn,thiz])\n调用fun，防止抛出异常。\n\n## 8.randId\n【或】xsloader.randId。生成一个随机的唯一ID。\n\n## 9.xsloader.clone(obj,[isDeep])\n复制对象。isDeep表示是否深度复制。\n\n## 10.xsloader.is...\n1. xsloader.isArray(arg)：是否是数组\n2. xsloader.isString(arg)：是否是字符串\n3. xsloader.isObject(arg)：是否是Object\n4. xsloader.isFunction(arg)：是否是function\n5. xsloader.isDate(arg)：是否是Date对象\n6. xsloader.isRegExp(arg):是否是正则表达式对象\n\n## 11.xsloader.getObjectAttr(obj, attrNames,[defaultValue])\n获取对象属性，支持多级调用。\n\n```\nvar obj={\n    name:\"Chen\",\n    skills:{\n        js:true\n    }\n};\n\nxsloader.getObjectAttr(obj,\"name\")===\"Chen\"\nxsloader.getObjectAttr(obj,\"skills.js\")===true\n\n```\n\n## 12.xsloader.setObjectAttr(obj, attrNames, value)\n设对象属性，支持多级设置。\n\n```\nvar obj={\n    name:\"\"\n};\n\nxsloader.setObjectAttr(obj, \"name\", \"Chen\");\nxsloader.setObjectAttr(obj, \"skills.js\", true);\n\n\nxsloader.getObjectAttr(obj,\"name\")===\"Chen\"\nxsloader.getObjectAttr(obj,\"skills.js\")===true\n\n```\n\n## 13.startsWith(str, starts)\n判断str是否以字符串starts开头。\n\n## 14.endsWith(str, ends)\n判断str是否以字符串ends结尾。\n\n## 15.xsParseJson(str,[option])\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\n**说明**：\n1. 通过“/\\*{f}\\*/”与“/\\*{f}\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\*{f\\*/function(){}/\\*f}\\*/}。\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\n\n## 16.xsJson2String(obj)\n将对象obj转换成json字符串。\n\n## 17.indexInArray(array, ele, [compare])\n在array中查找指定元素ele第一次出现的位置。\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\n\n## 18.indexInArrayFrom(array, ele,offset, [compare])\n从offset开始查找，见indexInArray。\n\n## 19.getPathWithRelative(path, relative,[ isPathDir])\n获取相对路径。\n1. path：参考地址。\n2. relative：相对地址，可以是绝对地址。\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\"/\"结尾、路径名称不含后缀表示目录）。\n\n## 20.appendArgs2Url(url, urlArgs)\n为url添加参数。\n1. urlArgs为字符串：如\"a=1&b=2\"。\n2. urlArgs对象。\n\n## 21.queryString2ParamsMap(argsStr, [decode])\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\n\n```\nqueryString2ParamsMap(\"a=1&b=2\")\n返回：\n{\n    a:\"1\",\n    b:\"2\"\n}\n```\n\n## 22.Array.prototype.indexOf(elem,[fromIndex])\n查找元素在数组中出现的位置。\n\n## 23.Array.pushAll(targetArr,arr)\n将arr中的所有元素push到targetArr中。','153189028248007000010');

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `id` varchar(50) NOT NULL,
  `articleId` varchar(50) NOT NULL,
  `content` varchar(200) NOT NULL,
  `userId` varchar(50) DEFAULT NULL,
  `parentId` varchar(50) DEFAULT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `reply` varchar(200) NOT NULL DEFAULT '',
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `userName` varchar(50) NOT NULL COMMENT '匿名',
  `avatarUrl` varchar(500) NOT NULL DEFAULT 'resources/avatar/avatar0.jpg' COMMENT '用户头像 ',
  PRIMARY KEY (`id`),
  KEY `index_articleId_seq_time` (`articleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

/*Table structure for table `debug` */

DROP TABLE IF EXISTS `debug`;

CREATE TABLE `debug` (
  `id` varchar(50) NOT NULL COMMENT 'id',
  `name` varchar(100) NOT NULL COMMENT '文件夹名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `interfaceId` varchar(50) DEFAULT '',
  `moduleId` varchar(50) NOT NULL,
  `method` varchar(10) NOT NULL,
  `url` varchar(500) NOT NULL,
  `params` varchar(1000) NOT NULL,
  `headers` varchar(1000) NOT NULL,
  `paramType` varchar(100) NOT NULL,
  `version` int(11) NOT NULL DEFAULT '0',
  `uid` varchar(50) NOT NULL DEFAULT '-1',
  PRIMARY KEY (`id`),
  KEY `index_status_seq_createTime` (`status`,`sequence`,`createTime`),
  KEY `index_userId_seq_createTime` (`interfaceId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `debug` */

/*Table structure for table `error` */

DROP TABLE IF EXISTS `error`;

CREATE TABLE `error` (
  `id` varchar(50) NOT NULL COMMENT '主键',
  `errorCode` varchar(50) NOT NULL COMMENT '错误码编码',
  `errorMsg` varchar(128) NOT NULL COMMENT '错误码描述',
  `projectId` varchar(50) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`),
  KEY `index_mod_seq_time` (`projectId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `error` */

insert  into `error`(`id`,`errorCode`,`errorMsg`,`projectId`,`createTime`,`status`,`sequence`) values ('153188649800403000003','0','成功','153188636499907000002','2018-07-18 12:01:38',1,2),('153188653620203000004','4004','用户友好错误信息，可以直接显示desc信息给用户','153188636499907000002','2018-07-18 12:02:16',1,3);

/*Table structure for table `hot_search` */

DROP TABLE IF EXISTS `hot_search`;

CREATE TABLE `hot_search` (
  `id` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `times` int(11) NOT NULL DEFAULT '0' COMMENT '搜索次数',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `keyword` varchar(200) COLLATE utf8_unicode_ci NOT NULL COMMENT '搜索关键字',
  PRIMARY KEY (`id`),
  UNIQUE KEY `keyword_UNIQUE` (`keyword`),
  KEY `index_times` (`times`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

/*Data for the table `hot_search` */

/*Table structure for table `interface` */

DROP TABLE IF EXISTS `interface`;

CREATE TABLE `interface` (
  `id` varchar(50) NOT NULL COMMENT '主键',
  `url` varchar(200) NOT NULL COMMENT 'api链接',
  `method` varchar(50) NOT NULL COMMENT ' 请求方式',
  `param` text COMMENT '参数列表',
  `paramRemark` text COMMENT '请求参数备注',
  `requestExam` text COMMENT '请求示例',
  `responseParam` text COMMENT '返回参数说明',
  `errorList` text COMMENT '接口错误码列表',
  `trueExam` text COMMENT '正确返回示例',
  `falseExam` text COMMENT '错误返回示例',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否可用;0不可用；1可用;-1 删除',
  `moduleId` varchar(50) NOT NULL COMMENT '所属模块ID',
  `interfaceName` varchar(100) NOT NULL COMMENT '接口名',
  `remark` text,
  `errors` text COMMENT '错误码、错误码信息',
  `updateBy` varchar(100) DEFAULT NULL,
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `version` varchar(20) NOT NULL DEFAULT '1.0' COMMENT '版本号',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `header` text,
  `fullUrl` varchar(255) NOT NULL DEFAULT '',
  `monitorType` int(11) NOT NULL DEFAULT '0' COMMENT '监控类型，多选：\nNetwork("网络异常",1),Include("包含指定字符串",2),NotInclude("不包含指定字符串",3),NotEqual("不等于指定字符串",4);	\n',
  `monitorText` varchar(500) NOT NULL DEFAULT '' COMMENT '监控比较内容',
  `monitorEmails` varchar(200) DEFAULT NULL,
  `isTemplate` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否是模板',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  `contentType` varchar(45) NOT NULL DEFAULT 'application/json' COMMENT '接口返回contentType',
  PRIMARY KEY (`id`),
  KEY `Index_fullUrl` (`fullUrl`),
  KEY `index_mod_seq_time` (`moduleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

/*Data for the table `interface` */

/*Table structure for table `log` */

DROP TABLE IF EXISTS `log`;

CREATE TABLE `log` (
  `id` varchar(50) NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `modelClass` varchar(50) NOT NULL,
  `modelName` varchar(50) NOT NULL,
  `type` varchar(20) NOT NULL,
  `updateBy` varchar(50) NOT NULL DEFAULT '' COMMENT '操作人',
  `remark` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `identy` varchar(50) NOT NULL COMMENT '数据唯一主键',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `log` */

insert  into `log`(`id`,`status`,`createTime`,`sequence`,`modelClass`,`modelName`,`type`,`updateBy`,`remark`,`content`,`identy`) values ('152611982039908000005',1,'2018-05-12 18:10:20',0,'InterfaceWithBLOBs','接口','UPDATE','超级管理员','测试接口1','{\"contentType\":\"application/json\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"errorList\":\"\",\"errors\":\"[]\",\"falseExam\":\"{}\",\"fullUrl\":\"http://test.com/test.json\",\"header\":\"[{\\\"name\\\":\\\"header\\\",\\\"def\\\":\\\"1\\\",\\\"remark\\\":\\\"备注\\\",\\\"necessary\\\":\\\"true\\\",\\\"type\\\":\\\"string\\\"}]\",\"id\":\"152611979419112000003\",\"interfaceName\":\"测试接口1\",\"isTemplate\":false,\"method\":\"GET,\",\"moduleId\":\"152611971673309000002\",\"monitorEmails\":\"\",\"monitorText\":\"\",\"monitorType\":0,\"param\":\"form=[{\\\"name\\\":\\\"test\\\",\\\"def\\\":\\\"test\\\",\\\"remark\\\":\\\"test\\\",\\\"necessary\\\":\\\"true\\\",\\\"inUrl\\\":\\\"false\\\",\\\"type\\\":\\\"string\\\"}]\",\"paramRemark\":\"[]\",\"projectId\":\"152611968062607000001\",\"remark\":\"<h3>我是测试项目<\\/h3>\",\"requestExam\":\"请求地址:http://test.com/test.json\\r\\n请求头:\\r\\n\\theader=1\\r\\n请求参数:\\r\\n\\ttest=test\",\"responseParam\":\"[{\\\"deep\\\":\\\"0\\\",\\\"name\\\":\\\"test\\\",\\\"remark\\\":\\\"tet\\\",\\\"type\\\":\\\"string\\\",\\\"necessary\\\":\\\"true\\\"}]\",\"sequence\":1,\"status\":0,\"trueExam\":\"{\\n}\",\"updateBy\":\"userName：admin | trueName：超级管理员\",\"updateTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"url\":\"/test.json\",\"version\":\"1.0.1\"}','152611979419112000003'),('152611988182408000006',1,'2018-05-12 18:11:22',1,'Module','模块','UPDATE','超级管理员','我是测试模块1','{\"canDelete\":1,\"category\":\"分类1,分类2\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":37,\"time\":1526119717000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611971673309000002\",\"name\":\"我是测试模块1\",\"projectId\":\"152611968062607000001\",\"remark\":\"我是测试模块1\",\"sequence\":1,\"status\":1,\"templateId\":\"\",\"url\":\"http://test.com\",\"userId\":\"admin\",\"version\":0}','152611971673309000002'),('153188666359108000005',1,'2018-07-18 12:04:24',2,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188675794808000007',1,'2018-07-18 12:05:58',3,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188679778808000008',1,'2018-07-18 12:06:38',4,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153188684267508000009',1,'2018-07-18 12:07:23',5,'Project','项目','UPDATE','超级管理员','测试项目','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":1,\"time\":1526119681000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611968062607000001\",\"luceneSearch\":1,\"name\":\"测试项目\",\"password\":\"\",\"remark\":\"我是测试项目\",\"sequence\":0,\"status\":2,\"type\":2,\"userId\":\"admin\"}','152611968062607000001'),('153189030665708000011',1,'2018-07-18 13:05:07',6,'Project','项目','UPDATE','超级管理员','公共文档','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":11,\"minutes\":59,\"month\":6,\"seconds\":25,\"time\":1531886365000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188636499907000002\",\"luceneSearch\":1,\"name\":\"公共文档\",\"password\":\"e54f53c5b8132e6b14ee0b7655776120\",\"remark\":\"\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153188636499907000002'),('153189043709608000013',1,'2018-07-18 13:07:17',7,'Module','模块','UPDATE','超级管理员','入门','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":6,\"month\":6,\"seconds\":50,\"time\":1531890410000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189041004409000012\",\"name\":\"入门\",\"projectId\":\"153189028248007000010\",\"remark\":\"\",\"sequence\":3,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153189041004409000012'),('153189123842208000015',1,'2018-07-18 13:20:38',8,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153189476462908000016',1,'2018-07-18 14:19:25',9,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":3,\"commentCount\":0,\"content\":\"<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n\\t<span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n\\t\\t<span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n\\t<span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n\\t\\t\\n\\t},\\n\\t<span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n\\t\\t<span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n\\t\\t\\t<span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n\\t\\t}\\n\\t}\\n});<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"```\\nxsloader({\\n    properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153189535925008000017',1,'2018-07-18 14:29:19',10,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用例子<\\/h2>\\n<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n        <span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n    <span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n        \\n    },\\n    <span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n            <span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">\\tbaseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\turlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tpaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdepsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdeps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tmodulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdefineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\tdefaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">\\twaitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\tautoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">\\tinstance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\tproperties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">\\t\\tname1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">\\t\\t\\tsubName1:<\\/span>anyType\\n\\t\\t},\\n<span class=\\\"hljs-symbol\\\">\\t\\tname3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">\\t\\tname5:<\\/span>function(){}\\n\\t}\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190185922508000018',1,'2018-07-18 16:17:39',11,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190191434708000019',1,'2018-07-18 16:18:34',12,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190223064308000020',1,'2018-07-18 16:23:51',13,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190293721608000021',1,'2018-07-18 16:35:37',14,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><ol data-source-line=\\\"74\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\r\\n\\r\\n```\\r\\nproperties: {\\r\\n        B: \\\"moduleB\\\"\\r\\n    },\\r\\n    autoUrlArgs: false,\\r\\n    urlArgs: {\\r\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\r\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\r\\n        \\\"moduleC\\\": \\\"v=123\\\"\\r\\n    },\\r\\n    paths: {\\r\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\r\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\r\\n    },\\r\\n    depsPaths: {\\r\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\r\\n    },\\r\\n    deps: {\\r\\n        \\r\\n    },\\r\\n    modulePrefix: {\\r\\n        \\\"util/\\\": {\\r\\n            replace: \\\"lib/util/\\\"\\r\\n        }\\r\\n    }\\r\\n});\\r\\n```\\r\\n## 二、config格式\\r\\n```\\r\\n{\\r\\n    baseUrl:\\\"\\\",\\r\\n    urlArgs:{},\\r\\n    paths:{},\\r\\n    depsPaths:{},\\r\\n    deps:{},\\r\\n    modulePrefix:{},\\r\\n    defineFunction:{},\\r\\n    defaultVersion:{},\\r\\n    waitSeconds:10,\\r\\n    autoUrlArgs:false,\\r\\n    instance:\\\"single\\\",\\r\\n    properties:{\\r\\n        name1:anyType,\\r\\n        name2:{\\r\\n            subName1:anyType\\r\\n        },\\r\\n        name3:\\\"123\\\",\\r\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\r\\n        name5:function(){}\\r\\n    }\\r\\n}\\r\\n```\\r\\n## 三、属性说明\\r\\n\\r\\n### 1.baseUrl\\r\\n【String】基础参考路径，默认为当前页所在目录。\\r\\n\\r\\n### 2.路径:==相对与绝对路径==；\\r\\n1. **./** 表示当前目录；\\r\\n2. **../** 表示上一级目录；\\r\\n3. **xx/** 表示相对于baseUrl；\\r\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\r\\n\\r\\n### 3.urlArgs\\r\\n【对象】\\r\\n```\\r\\n{\\r\\n    \\\"key\\\":value,\\r\\n    \\\"key2\\\":value2\\r\\n}\\r\\n```\\r\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\r\\n2. key为绝对地址；\\r\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\r\\n4. key为含有modulePrefix前缀的地址；\\r\\n5. key为模块名；\\r\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\r\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190352282708000022',1,'2018-07-18 16:45:23',15,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3urlargs\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.urlArgs<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"68\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"83\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"84\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    autoUrlArgs:false,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190362131908000023',1,'2018-07-18 16:47:01',16,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-symbol\\\">properties:<\\/span> {\\n<span class=\\\"hljs-symbol\\\">        B:<\\/span> <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span> false,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span> {\\n        \\n    },\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span> {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n<span class=\\\"hljs-symbol\\\">            replace:<\\/span> <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"31\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"61\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"69\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"79\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"82\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"83\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"89\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"90\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"98\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"99\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"103\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nproperties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190366358608000024',1,'2018-07-18 16:47:44',17,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">xsloader<\\/span>({\\n    <span class=\\\"hljs-attribute\\\">properties<\\/span>: {\\n        <span class=\\\"hljs-attribute\\\">B<\\/span>: <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">autoUrlArgs<\\/span>: false,\\n    <span class=\\\"hljs-attribute\\\">urlArgs<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"*\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.0\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=1.0.1\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"moduleC\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"v=123\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">paths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"$\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\"<\\/span>,\\n        <span class=\\\"hljs-string\\\">\\\"bootstrap\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">depsPaths<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"moduleB\\\"<\\/span>: <span class=\\\"hljs-string\\\">\\\"modules/${B}.js\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-attribute\\\">deps<\\/span>: {\\n        \\n    },\\n    <span class=\\\"hljs-attribute\\\">modulePrefix<\\/span>: {\\n        <span class=\\\"hljs-string\\\">\\\"util/\\\"<\\/span>: {\\n            <span class=\\\"hljs-attribute\\\">replace<\\/span>: <span class=\\\"hljs-string\\\">\\\"lib/util/\\\"<\\/span>\\n        }\\n    }\\n});<\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"32\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"59\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"62\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"68\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"70\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"80\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"84\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"91\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"100\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"104\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader({\\n    properties: {\\n        B: \\\"moduleB\\\"\\n    },\\n    autoUrlArgs: false,\\n    urlArgs: {\\n        \\\"*\\\": \\\"v=1.0.0\\\",\\n        \\\"bootstrap\\\": \\\"v=1.0.1\\\",\\n        \\\"moduleC\\\": \\\"v=123\\\"\\n    },\\n    paths: {\\n        \\\"$\\\": \\\"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js\\\",\\n        \\\"bootstrap\\\": \\\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js\\\"\\n    },\\n    depsPaths: {\\n        \\\"moduleB\\\": \\\"modules/${B}.js\\\"\\n    },\\n    deps: {\\n        \\n    },\\n    modulePrefix: {\\n        \\\"util/\\\": {\\n            replace: \\\"lib/util/\\\"\\n        }\\n    }\\n});\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190411783808000025',1,'2018-07-18 16:55:18',18,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"36\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"37\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"43\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"45\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"55\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"58\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"59\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"66\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"79\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190457006908000026',1,'2018-07-18 17:02:50',19,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"36\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"37\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"43\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"45\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"55\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"58\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"59\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"65\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"66\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"74\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"75\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"79\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"81\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"82\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"84\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"85\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"88\\\">【对象】用于配置依赖。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n### 8.deps\\n【对象】用于配置依赖。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190547914008000027',1,'2018-07-18 17:17:59',20,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"39\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"47\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"49\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"59\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"65\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"72\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"80\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"81\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"87\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"92\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"97\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"102\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"104\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"110\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"111\\\">\\n<li>ke为\\\"*\\\"表对depsPaths中的所有模块加上此依赖:\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表为指定的模块或路径的js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"113\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"114\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. ke为\\\"\\\\*\\\"表对depsPaths中的所有模块加上此依赖:\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表为指定的模块或路径的js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n---\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190577890408000028',1,'2018-07-18 17:22:59',21,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":5,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190589246008000029',1,'2018-07-18 17:24:52',22,'Project','项目','UPDATE','超级管理员','xsloader.js加载器','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":4,\"month\":6,\"seconds\":42,\"time\":1531890282000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189028248007000010\",\"luceneSearch\":1,\"name\":\"xsloader.js加载器\",\"password\":\"\",\"remark\":\"开源地址:https://github.com/gzxishan/xsloader\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153189028248007000010'),('153190595123108000030',1,'2018-07-18 17:25:51',23,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190638384408000031',1,'2018-07-18 17:33:04',24,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":11,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190650026908000034',1,'2018-07-18 17:35:00',25,'ArticleWithBLOBs','文章','UPDATE','超级管理员','require','{\"brief\":\"使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"require\",\"projectId\":\"153189028248007000010\",\"sequence\":4,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190652854508000035',1,'2018-07-18 17:35:29',26,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明文档','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190654572708000036',1,'2018-07-18 17:35:46',27,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":9,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明文档\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190664470908000037',1,'2018-07-18 17:37:25',28,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190740554608000038',1,'2018-07-18 17:50:06',29,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190751401508000039',1,'2018-07-18 17:51:54',30,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190772663208000040',1,'2018-07-18 17:55:27',31,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">content可以是任何类型，当content为function时表示回调函数。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\ncontent可以是任何类型，当content为function时表示回调函数。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190831086208000041',1,'2018-07-18 18:05:11',32,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5重要说明\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"52\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190856398108000042',1,'2018-07-18 18:09:24',33,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define于require','{\"brief\":\"定义模块与使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6重要说明\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"63\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190859980608000043',1,'2018-07-18 18:10:00',34,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"使用模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"require\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190864877608000044',1,'2018-07-18 18:10:49',35,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define于require\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190947305708000045',1,'2018-07-18 18:24:33',36,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190949260608000046',1,'2018-07-18 18:24:53',37,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":100,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153190950798608000047',1,'2018-07-18 18:25:08',38,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":3,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153190951711608000048',1,'2018-07-18 18:25:17',39,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":2,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153190988606108000052',1,'2018-07-18 18:31:26',40,'InterfaceWithBLOBs','接口','DELTET','超级管理员','测试接口1','{\"contentType\":\"application/json\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"errorList\":\"000001,\",\"errors\":\"[{\\\"createTime\\\":{\\\"date\\\":12,\\\"day\\\":6,\\\"hours\\\":18,\\\"minutes\\\":10,\\\"month\\\":4,\\\"seconds\\\":9,\\\"time\\\":1526119809000,\\\"timezoneOffset\\\":-480,\\\"year\\\":118},\\\"errorCode\\\":\\\"000001\\\",\\\"errorMsg\\\":\\\"错误码1\\\",\\\"id\\\":\\\"152611980854003000004\\\",\\\"projectId\\\":\\\"152611968062607000001\\\",\\\"sequence\\\":0,\\\"status\\\":1}]\",\"falseExam\":\"{}\",\"fullUrl\":\"http://test.com/test.json\",\"header\":\"[{\\\"name\\\":\\\"header\\\",\\\"def\\\":\\\"1\\\",\\\"remark\\\":\\\"备注\\\",\\\"necessary\\\":\\\"true\\\",\\\"type\\\":\\\"string\\\"}]\",\"id\":\"152611979419112000003\",\"interfaceName\":\"测试接口1\",\"isTemplate\":false,\"method\":\"GET,\",\"moduleId\":\"152611971673309000002\",\"monitorEmails\":\"\",\"monitorText\":\"\",\"monitorType\":0,\"param\":\"form=[{\\\"name\\\":\\\"test\\\",\\\"def\\\":\\\"test\\\",\\\"remark\\\":\\\"test\\\",\\\"necessary\\\":\\\"true\\\",\\\"inUrl\\\":\\\"false\\\",\\\"type\\\":\\\"string\\\"}]\",\"paramRemark\":\"[]\",\"projectId\":\"152611968062607000001\",\"remark\":\"<h3>我是测试项目<\\/h3>\",\"requestExam\":\"请求地址:http://test.com/test.json\\r\\n请求头:\\r\\n\\theader=1\\r\\n请求参数:\\r\\n\\ttest=test\",\"responseParam\":\"[{\\\"deep\\\":\\\"0\\\",\\\"name\\\":\\\"test\\\",\\\"remark\\\":\\\"tet\\\",\\\"type\\\":\\\"string\\\",\\\"necessary\\\":\\\"true\\\"}]\",\"sequence\":1,\"status\":0,\"trueExam\":\"{\\n}\",\"updateBy\":\"userName：admin | trueName：超级管理员\",\"updateTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":9,\"month\":4,\"seconds\":54,\"time\":1526119794000,\"timezoneOffset\":-480,\"year\":118},\"url\":\"/test.json\",\"version\":\"1.0.1\"}','152611979419112000003'),('153190990596308000053',1,'2018-07-18 18:31:46',41,'ArticleWithBLOBs','文章','DELTET','超级管理员','V8.0.0使用视频-用户版','{\"brief\":\"V8.0.0使用视频-用户版，觉得有用的可以去https://gitee.com/CrapApi/CrapApi 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下\",\"canComment\":1,\"canDelete\":1,\"category\":\"帮助文档\",\"click\":3,\"commentCount\":0,\"content\":\"<p data-source-line=\\\"3\\\">V8.0.0使用视频-用户版，觉得有用的可以去 <a href=\\\"https://gitee.com/CrapApi/CrapApi\\\">https://gitee.com/CrapApi/CrapApi<\\/a> 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下<\\/p>\\n<iframe height=\\\"498\\\" width=\\\"100%\\\" src=\\\"http://player.youku.com/embed/XMzU4NjQwODIzNg==\\\" frameborder=\\\"0\\\" \'allowfullscreen\'=\\\"\\\"><\\/iframe>\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":13,\"month\":4,\"seconds\":3,\"time\":1526119983000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611998276001000007\",\"markdown\":\"V8.0.0使用视频-用户版，觉得有用的可以去 https://gitee.com/CrapApi/CrapApi 上支持下，有钱的捐赠的咖啡钱，没钱的捧个人场，fork下、star一下\\n\\n&lt;iframe height=498 width=100% src=\'http://player.youku.com/embed/XMzU4NjQwODIzNg==\' frameborder=0 \'allowfullscreen\'&gt;&lt;/iframe&gt;\",\"mkey\":\"\",\"moduleId\":\"152611971673309000002\",\"name\":\"V8.0.0使用视频-用户版\",\"projectId\":\"152611968062607000001\",\"sequence\":1,\"status\":2,\"type\":\"ARTICLE\"}','152611998276001000007'),('153190990975208000054',1,'2018-07-18 18:31:50',42,'Module','模块','DELTET','超级管理员','我是测试模块1','{\"canDelete\":1,\"category\":\"分类1,分类2,帮助文档\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":37,\"time\":1526119717000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611971673309000002\",\"name\":\"我是测试模块1\",\"projectId\":\"152611968062607000001\",\"remark\":\"我是测试模块1\",\"sequence\":1,\"status\":1,\"templateId\":\"\",\"url\":\"http://test.com\",\"userId\":\"admin\",\"version\":0}','152611971673309000002'),('153190993039608000055',1,'2018-07-18 18:32:10',43,'Project','项目','DELTET','超级管理员','测试项目','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":12,\"day\":6,\"hours\":18,\"minutes\":8,\"month\":4,\"seconds\":1,\"time\":1526119681000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"152611968062607000001\",\"luceneSearch\":1,\"name\":\"测试项目\",\"password\":\"\",\"remark\":\"我是测试项目\",\"sequence\":0,\"status\":1,\"type\":2,\"userId\":\"admin\"}','152611968062607000001'),('153196212615808000001',1,'2018-07-19 09:02:06',44,'Module','模块','UPDATE','超级管理员','基础','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":6,\"month\":6,\"seconds\":50,\"time\":1531890410000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189041004409000012\",\"name\":\"基础\",\"projectId\":\"153189028248007000010\",\"remark\":\"\",\"sequence\":3,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153189041004409000012'),('153196258978308000002',1,'2018-07-19 09:09:50',45,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":14,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//、/、https://、http:// 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//、/、https://、http:// 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196260794808000003',1,'2018-07-19 09:10:08',46,'ArticleWithBLOBs','文章','UPDATE','超级管理员','define、require、invoker、[deps]','{\"brief\":\"定义模块与使用模块，[deps]等说明\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"1define定义模块\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1define定义模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.define定义模块<\\/h2>\\n<p data-source-line=\\\"2\\\">以下content可以是任何类型，当content为<mark>function时表示回调函数<\\/mark>。<\\/p>\\n<h3 id=\\\"使用形式\\\" data-source-line=\\\"3\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"4\\\">\\n<li>define([deps],content)<\\/li>\\n<li>define(content)<\\/li>\\n<li>define(moduleName,[deps],content)<\\/li>\\n<li>define(moduleName,content)<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">define([<span class=\\\"hljs-string\\\">\\\"moduleA\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(A)<\\/span><\\/span>{\\n\\n});<\\/code><\\/pre><hr>\\n<h2 id=\\\"2definethen\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#2definethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.define.then<\\/h2>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\">define(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"26\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"3require\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3require\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.require<\\/h2>\\n<h3 id=\\\"使用形式-2\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#使用形式-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>使用形式：<\\/h3>\\n<ol data-source-line=\\\"32\\\">\\n<li>require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。<\\/li>\\n<li>require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");<\\/li>\\n<li>require([deps],function(dep1,dep2,...){})<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"4requirethen\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#4requirethen\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.require.then<\\/h2>\\n<pre data-source-line=\\\"39\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">require<\\/span>(...).<span class=\\\"hljs-keyword\\\">then<\\/span>({\\n    <span class=\\\"hljs-string\\\">\\\"onError\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n    \\n    },\\n    <span class=\\\"hljs-string\\\">\\\"orderDep\\\"<\\/span>:<span class=\\\"hljs-keyword\\\">false<\\/span>\\n});<\\/code><\\/pre><ol data-source-line=\\\"47\\\">\\n<li>onError错误回调<\\/li>\\n<li>orderDep表示是否按照顺序加载依赖，默false。<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"5this与_invoker_\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#5this与_invoker_\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.this与_invoker_<\\/h2>\\n<p data-source-line=\\\"52\\\">回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：<\\/p>\\n<ol data-source-line=\\\"53\\\">\\n<li>require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；<\\/li>\\n<li>getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：<\\/li>\\n<\\/ol>\\n<ul data-source-line=\\\"55\\\">\\n<li>\\n<ol>\\n<li>当没有提供了relativeUrl时，获取当前模块的url路径；<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<ol start=\\\"3\\\" data-source-line=\\\"57\\\">\\n<li>getAbsoluteUrl，function，获取当前模块的绝对路径；<\\/li>\\n<li>getName，function，获取当前模块或插件的名称；<\\/li>\\n<li>invoker，function，获取调用者的this对象(含有require(),getUrl()等等)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"6deps\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#6deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.[deps]<\\/h2>\\n<p data-source-line=\\\"63\\\">格式[module1,module2,...,moduleX]<\\/p>\\n<ol data-source-line=\\\"64\\\">\\n<li>版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。<\\/li>\\n<li>版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。<\\/li>\\n<li>module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。<\\/li>\\n<li>path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"<\\/li>\\n<li>内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"7重要说明\\\" data-source-line=\\\"71\\\"><a class=\\\"anchor\\\" href=\\\"#7重要说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.<mark>重要说明<\\/mark><\\/h2>\\n<ol data-source-line=\\\"72\\\">\\n<li>当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。<\\/li>\\n<li>匿名define的模块名为对应路径或为配置里定义的模块名。<\\/li>\\n<li>模块路径应该都以\\\".js\\\"为后缀。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":2,\"time\":1531906442000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190644215601000032\",\"markdown\":\"## 1.define定义模块\\n以下content可以是任何类型，当content为==function时表示回调函数==。\\n### 使用形式：\\n1. define([deps],content)\\n2. define(content)\\n3. define(moduleName,[deps],content)\\n4. define(moduleName,content)\\n\\n```\\ndefine([\\\"moduleA\\\"],function(A){\\n\\n});\\n```\\n\\n---\\n## 2.define.then\\n\\n```\\ndefine(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 3.require\\n### 使用形式：\\n1. require(\\\"moduleName\\\"),获取已经加载的模块；如果没有加载过，会抛出异常。\\n2. require.has(...)是否含有指定的所有模块，如var exists = require.has(\\\"a\\\",\\\"b\\\",\\\"c\\\");\\n3. require([deps],function(dep1,dep2,...){})\\n\\n---\\n## 4.require.then\\n\\n```\\nrequire(...).then({\\n    \\\"onError\\\":function(err){\\n    \\n    },\\n    \\\"orderDep\\\":false\\n});\\n```\\n1. onError错误回调\\n2. orderDep表示是否按照顺序加载依赖，默false。\\n\\n---\\n## 5.this与_invoker_\\n回调函数(包括pluginMain函数)的this对象、模块对象(为define(...Object))的_invoker_是一个对象，包含属性：\\n1. require，function,同require,但具有当前js文件的路径信息、从而可以使用正确的相对路径；\\n2. getUrl，function(relativeUrl,appendArgs)，appendArgs表示是否加上urlArgs参数：\\n- 1. 当没有提供了relativeUrl时，获取当前模块的url路径；\\n- 2. 提供了relativeUrl时，获取相对于当前模块的url路径、获取path映射路径或绝对路径。\\n3. getAbsoluteUrl，function，获取当前模块的绝对路径；\\n4. getName，function，获取当前模块或插件的名称；\\n5. invoker，function，获取调用者的this对象(含有require(),getUrl()等等)\\n\\n---\\n## 6.[deps]\\n格式[module1,module2,...,moduleX]\\n1. 版本模块:moduleX=\\\"group:project:version\\\",如\\\"cn.xishan:demo:1.0\\\"。\\n2. 版本模块（默认版本）：moduleX=\\\"group:project\\\"(需要配置默认版本,否则会报错)。\\n3. module名称：moduleX=\\\"myModule\\\",其中myModule在paths或depsPaths中定义过、不以\\\".js\\\"结尾。\\n4. path路径(不可省略.js后缀)：如moduleX=\\\"/js/..../myModuleName.js\\\"\\n5. 内嵌模块：module=[module1,module2],如果有一个为数组，如[[(orderDep),\\\"m1\\\",\\\"m2\\\"],\\\"m3\\\",\\\"m4\\\"],则[(orderDep),\\\"m1\\\",\\\"m2\\\"]里的orderDep（默认为true）为true表示顺序加载\\n\\n---\\n## 7.==重要说明==\\n1. 当js里只有一个define时，优先使用配置里定义的模块名、同时也保留define提供的名称。\\n2. 匿名define的模块名为对应路径或为配置里定义的模块名。\\n3. 模块路径应该都以\\\".js\\\"为后缀。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"define、require、invoker、[deps]\",\"projectId\":\"153189028248007000010\",\"sequence\":1000,\"status\":1,\"type\":\"ARTICLE\"}','153190644215601000032'),('153196261671308000004',1,'2018-07-19 09:10:17',47,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":500,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153196262378408000005',1,'2018-07-19 09:10:24',48,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153196263160008000006',1,'2018-07-19 09:10:32',49,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196263919108000007',1,'2018-07-19 09:10:39',50,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"默认分类\",\"click\":0,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153196278023108000008',1,'2018-07-19 09:13:00',51,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":16,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196285699608000009',1,'2018-07-19 09:14:17',52,'Project','项目','UPDATE','超级管理员','xsloader.js加载器','{\"cover\":\"resources/images/cover.png\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":4,\"month\":6,\"seconds\":42,\"time\":1531890282000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189028248007000010\",\"luceneSearch\":1,\"name\":\"xsloader.js加载器\",\"password\":\"\",\"remark\":\"文档请看“文章”，开源地址:https://github.com/gzxishan/xsloader\",\"sequence\":1,\"status\":2,\"type\":2,\"userId\":\"admin\"}','153189028248007000010'),('153196302598008000010',1,'2018-07-19 09:17:06',53,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":19,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\">所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n所有的\\\"lib/\\\"qianzhui前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"qianzhui前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196351163708000011',1,'2018-07-19 09:25:12',54,'ArticleWithBLOBs','文章','UPDATE','超级管理员','配置参数说明','{\"brief\":\"初始化配置:xsloader(config)\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":20,\"commentCount\":0,\"content\":\"<h2 id=\\\"一-使用例子\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#一-使用例子\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>一、使用例子<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">xsloader(<span class=\\\"hljs-name\\\">config<\\/span>)<span class=\\\"hljs-comment\\\">;<\\/span><\\/code><\\/pre><h2 id=\\\"二-config格式\\\" data-source-line=\\\"6\\\"><a class=\\\"anchor\\\" href=\\\"#二-config格式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>二、config格式<\\/h2>\\n<pre data-source-line=\\\"7\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    baseUrl:<\\/span><span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    urlArgs:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    autoUrlArgs:<\\/span>false,\\n<span class=\\\"hljs-symbol\\\">    paths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    depsPaths:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    deps:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    modulePrefix:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defineFunction:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    defaultVersion:<\\/span>{},\\n<span class=\\\"hljs-symbol\\\">    waitSeconds:<\\/span><span class=\\\"hljs-number\\\">10<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    instance:<\\/span><span class=\\\"hljs-string\\\">\\\"single\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    properties:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">        name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">        name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">            subName1:<\\/span>anyType\\n        },\\n<span class=\\\"hljs-symbol\\\">        name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">        name5:<\\/span>function(){}\\n    }\\n}<\\/code><\\/pre><h2 id=\\\"三-属性说明\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#三-属性说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>三、属性说明<\\/h2>\\n<h3 id=\\\"1baseurl\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#1baseurl\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.baseUrl<\\/h3>\\n<p data-source-line=\\\"34\\\">【String】基础参考路径，默认为当前页所在目录。<\\/p>\\n<hr>\\n<h3 id=\\\"2路径相对与绝对路径\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#2路径相对与绝对路径\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.路径:<mark>相对与绝对路径<\\/mark>；<\\/h3>\\n<ol data-source-line=\\\"38\\\">\\n<li><strong>./<\\/strong> 表示当前目录；<\\/li>\\n<li><strong>../<\\/strong> 表示上一级目录；<\\/li>\\n<li><strong>xx/<\\/strong> 表示相对于baseUrl；<\\/li>\\n<li><strong>//xxx、/xxx、<a href=\\\"https://xxx\\\">https://xxx<\\/a>、<a href=\\\"http://xxx\\\">http://xxx<\\/a> 等<\\/strong> 表示绝对地址 ；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"3moduleprefix\\\" data-source-line=\\\"44\\\"><a class=\\\"anchor\\\" href=\\\"#3moduleprefix\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.modulePrefix<\\/h3>\\n<p data-source-line=\\\"45\\\">【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。<\\/p>\\n<pre data-source-line=\\\"47\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"lib/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn/lib/\\\"<\\/span>\\n    },\\n    <span class=\\\"hljs-string\\\">\\\"lib2/\\\"<\\/span>:{\\n    \\t\\treplace:<span class=\\\"hljs-string\\\">\\\"/cdn2/lib/\\\"<\\/span>\\n    }\\n}<\\/code><\\/pre><p data-source-line=\\\"57\\\"><strong>例如<\\/strong>：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。<\\/p>\\n<hr>\\n<h3 id=\\\"4urlargs\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#4urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.urlArgs<\\/h3>\\n<p data-source-line=\\\"61\\\">【对象】<\\/p>\\n<pre data-source-line=\\\"62\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明\\\" data-source-line=\\\"68\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"69\\\">\\n<li>key<mark>以\\\".\\\"开头<\\/mark>，表示相对于xsloader地址的模块；<\\/li>\\n<li>key为绝对地址；<\\/li>\\n<li>key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；<\\/li>\\n<li>key为含有modulePrefix前缀的地址；<\\/li>\\n<li>key为模块名；<\\/li>\\n<li>key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；<\\/li>\\n<li>key以\\\"*]\\\"开头，表示指定后缀的地址；<\\/li>\\n<li>key为\\\"*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖*的；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明\\\" data-source-line=\\\"77\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"78\\\">\\n<li>value为字符串；<\\/li>\\n<li>value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"5autourlargs\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#5autourlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.autoUrlArgs<\\/h3>\\n<p data-source-line=\\\"83\\\">【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。<\\/p>\\n<hr>\\n<h3 id=\\\"6paths\\\" data-source-line=\\\"86\\\"><a class=\\\"anchor\\\" href=\\\"#6paths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.paths<\\/h3>\\n<p data-source-line=\\\"87\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。<\\/p>\\n<hr>\\n<h3 id=\\\"7depspaths\\\" data-source-line=\\\"90\\\"><a class=\\\"anchor\\\" href=\\\"#7depspaths\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.depsPaths<\\/h3>\\n<p data-source-line=\\\"91\\\">【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块<mark>配置依赖<\\/mark>。<\\/p>\\n<hr>\\n<h3 id=\\\"8deps\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#8deps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.deps<\\/h3>\\n<p data-source-line=\\\"95\\\">【对象】用于配置依赖。<\\/p>\\n<pre data-source-line=\\\"97\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"key\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value<\\/span>,\\n    <span class=\\\"hljs-string\\\">\\\"key2\\\"<\\/span><span class=\\\"hljs-symbol\\\">:value2<\\/span>\\n}<\\/code><\\/pre><h4 id=\\\"对key的说明-2\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#对key的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对key的说明：<\\/h4>\\n<ol data-source-line=\\\"104\\\">\\n<li>key为\\\"*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；<\\/li>\\n<li>key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；<\\/li>\\n<\\/ol>\\n<h4 id=\\\"对value的说明-2\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#对value的说明-2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>对value的说明：<\\/h4>\\n<ol data-source-line=\\\"107\\\">\\n<li>value为字符串,添加一个依赖；<\\/li>\\n<li>value为数据组，添加多个依赖；<\\/li>\\n<\\/ol>\\n<hr>\\n<h3 id=\\\"9definefunction\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#9definefunction\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.defineFunction<\\/h3>\\n<p data-source-line=\\\"112\\\">【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-string\\\">\\\"moduleName\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">originCallback<\\/span>,originThis,originArgs)\\n    {\\n        return originCallback.apply(<span class=\\\"hljs-name\\\">originThis<\\/span>, originArgs)<span class=\\\"hljs-comment\\\">;<\\/span>\\n    }\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"10defaultversion\\\" data-source-line=\\\"124\\\"><a class=\\\"anchor\\\" href=\\\"#10defaultversion\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.defaultVersion<\\/h3>\\n<p data-source-line=\\\"125\\\">【对象】默认包名。<\\/p>\\n<pre data-source-line=\\\"127\\\"><code class=\\\"hljs\\\">{\\n    <span class=\\\"hljs-symbol\\\">\'group<\\/span>:project\':<span class=\\\"hljs-symbol\\\">\'versionName\'<\\/span>\\n}<\\/code><\\/pre><hr>\\n<h3 id=\\\"11waitseconds\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#11waitseconds\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.waitSeconds<\\/h3>\\n<p data-source-line=\\\"135\\\">【number】require等待时间，单位秒，默认10。<\\/p>\\n<hr>\\n<h3 id=\\\"12properties\\\" data-source-line=\\\"138\\\"><a class=\\\"anchor\\\" href=\\\"#12properties\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.properties<\\/h3>\\n<p data-source-line=\\\"139\\\">【对象】用于配变量，所有的字符串都可以使用变量。<\\/p>\\n<pre data-source-line=\\\"141\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    name1:<\\/span>anyType,\\n<span class=\\\"hljs-symbol\\\">    name2:<\\/span>{\\n<span class=\\\"hljs-symbol\\\">    \\tsubName1:<\\/span>anyType\\n    },\\n<span class=\\\"hljs-symbol\\\">    name3:<\\/span><span class=\\\"hljs-string\\\">\\\"123\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name4:<\\/span><span class=\\\"hljs-string\\\">\\\"name${name3}-${name2.subName1}\\\"<\\/span>,\\n<span class=\\\"hljs-symbol\\\">    name5:<\\/span>function(){<span class=\\\"hljs-comment\\\">//注意：this为当前的properties<\\/span>\\n    \\n    }\\n}<\\/code><\\/pre><h4 id=\\\"说明\\\" data-source-line=\\\"154\\\"><a class=\\\"anchor\\\" href=\\\"#说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>说明：<\\/h4>\\n<ol data-source-line=\\\"155\\\">\\n<li>属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；<\\/li>\\n<li>通过${properName}引用字符串属性；<\\/li>\\n<li>通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；<\\/li>\\n<li>key中也支持属性引用(除了properties)；<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"13xsloaderonerror\\\" data-source-line=\\\"161\\\"><a class=\\\"anchor\\\" href=\\\"#13xsloaderonerror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.xsloader.onError<\\/h2>\\n<p data-source-line=\\\"162\\\">全局异常回调。<\\/p>\\n<pre data-source-line=\\\"164\\\"><code class=\\\"hljs\\\">xsloader.onError=<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">code,errinfo<\\/span>)<\\/span>{\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(code);\\n    <span class=\\\"hljs-built_in\\\">console<\\/span>.error(errinfo);\\n};<\\/code><\\/pre>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":13,\"minutes\":10,\"month\":6,\"seconds\":21,\"time\":1531890621000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153189062110601000014\",\"markdown\":\"## 一、使用例子\\n\\n```\\nxsloader(config);\\n```\\n## 二、config格式\\n```\\n{\\n    baseUrl:\\\"\\\",\\n    urlArgs:{},\\n    autoUrlArgs:false,\\n    paths:{},\\n    depsPaths:{},\\n    deps:{},\\n    modulePrefix:{},\\n    defineFunction:{},\\n    defaultVersion:{},\\n    waitSeconds:10,\\n    instance:\\\"single\\\",\\n    properties:{\\n        name1:anyType,\\n        name2:{\\n            subName1:anyType\\n        },\\n        name3:\\\"123\\\",\\n        name4:\\\"name${name3}-${name2.subName1}\\\",\\n        name5:function(){}\\n    }\\n}\\n```\\n## 三、属性说明\\n\\n### 1.baseUrl\\n【String】基础参考路径，默认为当前页所在目录。\\n\\n---\\n### 2.路径:==相对与绝对路径==；\\n1. **./** 表示当前目录；\\n2. **../** 表示上一级目录；\\n3. **xx/** 表示相对于baseUrl；\\n4. **//xxx、/xxx、https://xxx、http://xxx 等** 表示绝对地址 ；\\n\\n---\\n### 3.modulePrefix\\n【对象】用于替换模块url（或urlArgs中）的前缀,其中prefix不能以\\\".\\\"、\\\"/\\\"开头。\\n\\n```\\n{\\n    \\\"lib/\\\":{\\n    \\t\\treplace:\\\"/cdn/lib/\\\"\\n    },\\n    \\\"lib2/\\\":{\\n    \\t\\treplace:\\\"/cdn2/lib/\\\"\\n    }\\n}\\n```\\n**例如**：所有的\\\"lib/\\\"前缀会替换成\\\"/cdn/lib/\\\",\\\"lib2/\\\"前缀会替换成\\\"/cdn2/lib/\\\"。\\n\\n---\\n### 4.urlArgs\\n【对象】\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key==以\\\".\\\"开头==，表示相对于xsloader地址的模块；\\n2. key为绝对地址；\\n3. key为相对于baseUrl的地址(不以\\\".\\\"开头的相对地址)；\\n4. key为含有modulePrefix前缀的地址；\\n5. key为模块名；\\n6. key以\\\"*[\\\"开头，表示指定前缀的地址，支持相对地址(\\\".\\\"开头相对于xsloader地址，其他相对于baseUrl)；\\n7. key以\\\"*]\\\"开头，表示指定后缀的地址；\\n8. key为\\\"\\\\*\\\"时，表示对所有模块，但优先级最低,其他模块的重名地址参数会覆盖\\\\*的；\\n#### 对value的说明：\\n1. value为字符串；\\n2. value为函数function(moduleNameOrUrl)，函数this为当前配置对象，返回值为字符串；\\n\\n---\\n### 5.autoUrlArgs\\n【boolean】默认为false，优先于urlArgs。自动添加当前时间_t=currentTimeMillis到url上。\\n\\n---\\n### 6.paths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。\\n\\n---\\n### 7.depsPaths\\n【String/String[]】用于指定模块的路径(以\\\".js\\\"后缀)，不能使用插件,当为数组时、会按照顺序加载、直到成功。可以为其中的模块==配置依赖==。\\n\\n---\\n### 8.deps\\n【对象】用于配置依赖。\\n\\n```\\n{\\n    \\\"key\\\":value,\\n    \\\"key2\\\":value2\\n}\\n```\\n#### 对key的说明：\\n1. key为\\\"\\\\*\\\"表示对depsPaths中的所有模块添加依赖，但\\\"\\\\*\\\"中的模块不能依赖depsPaths中的模块(会报循环依赖错误)，但可以依赖paths中的模块；\\n2. key的格式为\\\"path_or_module1::path_or_module2::path_or_module3...\\\"表示为指定的模块或路径js添加依赖；\\n#### 对value的说明：\\n1. value为字符串,添加一个依赖；\\n2. value为数据组，添加多个依赖；\\n\\n---\\n### 9.defineFunction\\n【对象】模块定义回调函数，moduleName可能是js绝对路径（没有定义模块名的）。\\n\\n```\\n{\\n    \\\"moduleName\\\":function(originCallback,originThis,originArgs)\\n    {\\n        return originCallback.apply(originThis, originArgs);\\n    }\\n}\\n```\\n\\n---\\n### 10.defaultVersion\\n【对象】默认包名。\\n\\n```\\n{\\n    \'group:project\':\'versionName\'\\n}\\n```\\n\\n---\\n### 11.waitSeconds\\n【number】require等待时间，单位秒，默认10。\\n\\n---\\n### 12.properties\\n【对象】用于配变量，所有的字符串都可以使用变量。\\n\\n```\\n{\\n    name1:anyType,\\n    name2:{\\n    \\tsubName1:anyType\\n    },\\n    name3:\\\"123\\\",\\n    name4:\\\"name${name3}-${name2.subName1}\\\",\\n    name5:function(){//注意：this为当前的properties\\n    \\n    }\\n}\\n```\\n#### 说明：\\n1. 属性值是function的，会执行(this为当前的properties)得到结果；且函数会在属性引用前处理；\\n2. 通过${properName}引用字符串属性；\\n3. 通过$[properName]引用属性（对应的属性值可以是任何类型,除了undefined与function）；\\n4. key中也支持属性引用(除了properties)；\\n\\n---\\n## 13.xsloader.onError\\n全局异常回调。\\n\\n```\\nxsloader.onError=function(code,errinfo){\\n    console.error(code);\\n    console.error(errinfo);\\n};\\n```\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"配置参数说明\",\"projectId\":\"153189028248007000010\",\"sequence\":1001,\"status\":1,\"type\":\"ARTICLE\"}','153189062110601000014'),('153196437370008000012',1,'2018-07-19 09:39:34',55,'ArticleWithBLOBs','文章','UPDATE','超级管理员','插件定义、内置插件与模块','{\"brief\":\"插件、内置插件与模块\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"1自定义插件\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1自定义插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.自定义插件<\\/h2>\\n<p data-source-line=\\\"2\\\">pluginObject格式:<\\/p>\\n<pre data-source-line=\\\"4\\\"><code class=\\\"hljs\\\">{\\n  \\t<span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span><span class=\\\"hljs-symbol\\\">:function<\\/span>(<span class=\\\"hljs-name\\\">pluginArgs<\\/span>, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}<\\/code><\\/pre><p data-source-line=\\\"12\\\">定义例子：<\\/p>\\n<pre data-source-line=\\\"14\\\"><code class=\\\"hljs\\\">define(<span class=\\\"hljs-string\\\">\\\"pluginA\\\"<\\/span>,[deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine<\\/span>([deps],{\\n    <span class=\\\"hljs-string\\\">\\\"pluginMain\\\"<\\/span>:function(pluginArgs, onload,onerror, config,dep1,dep2,<span class=\\\"hljs-rest_arg\\\">...)\\n  \\t{\\n  \\t\\n  \\t}\\n});<\\/span><\\/span><\\/span><\\/code><\\/pre><ol data-source-line=\\\"29\\\">\\n<li>onload(result，ignoreAspect=true)<\\/li>\\n<li>onerror(err)<\\/li>\\n<\\/ol>\\n<hr>\\n<h2 id=\\\"2内置插件\\\" data-source-line=\\\"33\\\"><a class=\\\"anchor\\\" href=\\\"#2内置插件\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.内置插件<\\/h2>\\n<h3 id=\\\"csstextjson\\\" data-source-line=\\\"35\\\"><a class=\\\"anchor\\\" href=\\\"#csstextjson\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>css!,text!,json!<\\/h3>\\n<p data-source-line=\\\"36\\\">【格式】:type!resourceUrl；<br><\\/p>\\n<h3 id=\\\"name\\\" data-source-line=\\\"38\\\"><a class=\\\"anchor\\\" href=\\\"#name\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>name!<\\/h3>\\n<p data-source-line=\\\"39\\\">【格式】：name!moduleName=&gt;&gt;modulePath<br>\\n【作用】：用于给模块命名。<\\/p>\\n<h3 id=\\\"window\\\" data-source-line=\\\"42\\\"><a class=\\\"anchor\\\" href=\\\"#window\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>window!<\\/h3>\\n<p data-source-line=\\\"43\\\">【格式】：window!varNameInWindow=&gt;&gt;modulePath<br>\\n【作用】：用于把模块添加到window对象中。<\\/p>\\n<h3 id=\\\"withdeps\\\" data-source-line=\\\"46\\\"><a class=\\\"anchor\\\" href=\\\"#withdeps\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>withdeps!<\\/h3>\\n<p data-source-line=\\\"47\\\">【格式】：withdeps!modulePath=&gt;&gt;[deps]<br>\\n【作用】：用于方便给模块添加依赖。<\\/p>\\n<hr>\\n<h2 id=\\\"3内置模块\\\" data-source-line=\\\"51\\\"><a class=\\\"anchor\\\" href=\\\"#3内置模块\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.内置模块<\\/h2>\\n<h3 id=\\\"exports\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#exports\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>exports<\\/h3>\\n<p data-source-line=\\\"54\\\">代表当前模块，可以直接为添加属性。<\\/p>\\n<h3 id=\\\"xshttp\\\" data-source-line=\\\"56\\\"><a class=\\\"anchor\\\" href=\\\"#xshttp\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xshttp<\\/h3>\\n<p data-source-line=\\\"57\\\">网络访模块。<\\/p>\\n<h3 id=\\\"xsmsg\\\" data-source-line=\\\"59\\\"><a class=\\\"anchor\\\" href=\\\"#xsmsg\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsmsg<\\/h3>\\n<p data-source-line=\\\"60\\\">窗口通信模块，支持跨域。<\\/p>\\n<h3 id=\\\"xslinkedlist\\\" data-source-line=\\\"62\\\"><a class=\\\"anchor\\\" href=\\\"#xslinkedlist\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>XsLinkedList<\\/h3>\\n<p data-source-line=\\\"63\\\">链表。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":17,\"minutes\":34,\"month\":6,\"seconds\":46,\"time\":1531906486000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190648624301000033\",\"markdown\":\"## 1.自定义插件\\npluginObject格式:\\n\\n```\\n{\\n  \\t\\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n}\\n```\\n定义例子：\\n\\n```\\ndefine(\\\"pluginA\\\",[deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n\\ndefine([deps],{\\n    \\\"pluginMain\\\":function(pluginArgs, onload,onerror, config,dep1,dep2,...)\\n  \\t{\\n  \\t\\n  \\t}\\n});\\n```\\n1. onload(result，ignoreAspect=true)\\n2. onerror(err)\\n\\n---\\n## 2.内置插件\\n\\n### css!,text!,json!\\n【格式】:type!resourceUrl；<br>\\n\\n### name!\\n【格式】：name!moduleName=>>modulePath<br>\\n【作用】：用于给模块命名。\\n\\n### window!\\n【格式】：window!varNameInWindow=>>modulePath<br>\\n【作用】：用于把模块添加到window对象中。\\n\\n### withdeps!\\n【格式】：withdeps!modulePath=>>[deps]<br>\\n【作用】：用于方便给模块添加依赖。\\n\\n---\\n## 3.内置模块\\n\\n### exports\\n代表当前模块，可以直接为添加属性。\\n\\n### xshttp\\n网络访模块。\\n\\n### xsmsg\\n窗口通信模块，支持跨域。\\n\\n### XsLinkedList\\n链表。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"插件、内置插件与模块\",\"projectId\":\"153189028248007000010\",\"sequence\":500,\"status\":1,\"type\":\"ARTICLE\"}','153190648624301000033'),('153196742937908000013',1,'2018-07-19 10:30:29',56,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196774397408000014',1,'2018-07-19 10:35:44',57,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-built_in\\\">var<\\/span> http=<span class=\\\"hljs-keyword\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\nhttp(<span class=\\\"hljs-attr\\\">...<\\/span>)<span class=\\\"hljs-attr\\\">...<\\/span>done();<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"9\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"11\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n\\n<span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"33\\\"><strong>注意<\\/strong>：参数与函数是一一对应的。<\\/p>\\n<pre data-source-line=\\\"35\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n\\nhttp()\\n.url(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>).method(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>).params({})\\n.ok(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\n})\\n.fail(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\"><\\/span>)<\\/span>{\\n\\n})\\n.done();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"50\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"52\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"53\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"56\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"59\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"62\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"64\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"65\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"68\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"71\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"74\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"76\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"82\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"83\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"85\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"91\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"92\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"95\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"98\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"100\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"101\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"103\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"108\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"111\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"112\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"114\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"119\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"122\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"123\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"125\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"130\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"131\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok调用，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\nhttp(...)...done();\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：参数与函数是一一对应的。\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok调用，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196785821308000015',1,'2018-07-19 10:37:38',58,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":4,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：参数与函数是一一对应的。<\\/p>\\n<pre data-source-line=\\\"40\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"53\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"56\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"58\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"59\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"61\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"62\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"64\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"65\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"67\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"68\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"70\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"71\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"73\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"74\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"76\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"77\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"79\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"86\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"88\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"94\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"95\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"97\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"98\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"100\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"101\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"103\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"104\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"106\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"111\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"114\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"115\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"117\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"122\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"125\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"126\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"128\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"133\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"134\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：参数与函数是一一对应的。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196892972408000016',1,'2018-07-19 10:55:30',59,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196904052608000017',1,'2018-07-19 10:57:21',60,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":6,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196918423608000018',1,'2018-07-19 10:59:44',61,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":8,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, callback,xhr)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option, callback,xhr) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196960790308000019',1,'2018-07-19 11:06:48',62,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":10,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传结束的回调。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"105\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"106\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"108\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"113\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"116\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"117\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"119\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"124\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"127\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"128\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"130\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"135\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"136\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196976534008000020',1,'2018-07-19 11:09:25',63,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":12,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文上传结束的回调,不论成与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文上传成功的回调。\\n\\n\\n### uploadError\\n【function】文上传失败的回调。\\n\\n### uploadEnd\\n【function】文上传结束的回调,不论成与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153196979981008000021',1,'2018-07-19 11:10:00',64,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":13,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】上传文件开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文件上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文件上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文件上传结束的回调,不论成功与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】上传文件开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文件上传成功的回调。\\n\\n\\n### uploadError\\n【function】文件上传失败的回调。\\n\\n### uploadEnd\\n【function】文件上传结束的回调,不论成功与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049'),('153197276134208000022',1,'2018-07-19 11:59:21',65,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197354752208000023',1,'2018-07-19 12:12:28',66,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。<br>\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## xsloader.script()\\n得到xsloader的script对象。\\n\\n## xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## xsloader.asyncCall(fun)\\n异步执行。\\n\\n## xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。<br>\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197381459108000024',1,'2018-07-19 12:16:55',67,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":2,\"commentCount\":0,\"content\":\"<h2 id=\\\"xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"appendargs2urlurl-urlargs\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#appendargs2urlurl-urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>appendArgs2Url(url, urlArgs)<\\/h2>\\n<p data-source-line=\\\"102\\\">为url添加参数。<\\/p>\\n<ol data-source-line=\\\"103\\\">\\n<li>urlArgs为字符串：如\\\"a=1&amp;b=2\\\"。<\\/li>\\n<li>urlArgs对象。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"querystring2paramsmapargsstr-decode\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#querystring2paramsmapargsstr-decode\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>queryString2ParamsMap(argsStr, decode)<\\/h2>\\n<p data-source-line=\\\"107\\\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">queryString2ParamsMap<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-string\\\">\\\"a=1&amp;b=2\\\"<\\/span>)<\\/span><\\/span>\\n返回：\\n{\\n    <span class=\\\"hljs-selector-tag\\\">a<\\/span>:<span class=\\\"hljs-string\\\">\\\"1\\\"<\\/span>,\\n    <span class=\\\"hljs-selector-tag\\\">b<\\/span>:<span class=\\\"hljs-string\\\">\\\"2\\\"<\\/span>\\n}<\\/code><\\/pre><h2 id=\\\"arrayprototypeindexofelemfromindex\\\" data-source-line=\\\"118\\\"><a class=\\\"anchor\\\" href=\\\"#arrayprototypeindexofelemfromindex\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>Array.prototype.indexOf(elem,[fromIndex])<\\/h2>\\n<p data-source-line=\\\"119\\\">查找元素在数组中出现的位置。<\\/p>\\n<h2 id=\\\"arraypushalltargetarrarr\\\" data-source-line=\\\"121\\\"><a class=\\\"anchor\\\" href=\\\"#arraypushalltargetarrarr\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>Array.pushAll(targetArr,arr)<\\/h2>\\n<p data-source-line=\\\"122\\\">将arr中的所有元素push到targetArr中。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## xsloader.script()\\n得到xsloader的script对象。\\n\\n## xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## xsloader.asyncCall(fun)\\n异步执行。\\n\\n## xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\\n\\n## appendArgs2Url(url, urlArgs)\\n为url添加参数。\\n1. urlArgs为字符串：如\\\"a=1&b=2\\\"。\\n2. urlArgs对象。\\n\\n## queryString2ParamsMap(argsStr, decode)\\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\\n\\n```\\nqueryString2ParamsMap(\\\"a=1&b=2\\\")\\n返回：\\n{\\n    a:\\\"1\\\",\\n    b:\\\"2\\\"\\n}\\n```\\n\\n## Array.prototype.indexOf(elem,[fromIndex])\\n查找元素在数组中出现的位置。\\n\\n## Array.pushAll(targetArr,arr)\\n将arr中的所有元素push到targetArr中。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197390973508000025',1,'2018-07-19 12:18:30',68,'ArticleWithBLOBs','文章','UPDATE','超级管理员','内置函数','{\"brief\":\"内置函数\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":3,\"commentCount\":0,\"content\":\"<h2 id=\\\"1xsloaderconfig\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1xsloaderconfig\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.xsloader.config()<\\/h2>\\n<p data-source-line=\\\"2\\\">获取最终配置对象。<\\/p>\\n<ol data-source-line=\\\"3\\\">\\n<li>xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。<\\/li>\\n<li>xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。<\\/li>\\n<li>xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2xsloaderscript\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#2xsloaderscript\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.xsloader.script()<\\/h2>\\n<p data-source-line=\\\"8\\\">得到xsloader的script对象。<\\/p>\\n<h2 id=\\\"3xsloaderextendtargetobj1obj2\\\" data-source-line=\\\"10\\\"><a class=\\\"anchor\\\" href=\\\"#3xsloaderextendtargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.xsloader.extend(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"11\\\">扩展对象。<\\/p>\\n<h2 id=\\\"4xsloaderextenddeeptargetobj1obj2\\\" data-source-line=\\\"13\\\"><a class=\\\"anchor\\\" href=\\\"#4xsloaderextenddeeptargetobj1obj2\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>4.xsloader.extendDeep(target,obj1,obj2,...)<\\/h2>\\n<p data-source-line=\\\"14\\\">深度扩展对象。<\\/p>\\n<h2 id=\\\"5xsloaderie_version\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#5xsloaderie_version\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>5.xsloader.IE_VERSION<\\/h2>\\n<p data-source-line=\\\"17\\\">ie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。<\\/p>\\n<h2 id=\\\"6xsloaderasynccallfun\\\" data-source-line=\\\"19\\\"><a class=\\\"anchor\\\" href=\\\"#6xsloaderasynccallfun\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>6.xsloader.asyncCall(fun)<\\/h2>\\n<p data-source-line=\\\"20\\\">异步执行。<\\/p>\\n<h2 id=\\\"7xsloadertrycallfun-defaultreturnthiz\\\" data-source-line=\\\"22\\\"><a class=\\\"anchor\\\" href=\\\"#7xsloadertrycallfun-defaultreturnthiz\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>7.xsloader.tryCall(fun, defaultReturn,thiz)<\\/h2>\\n<p data-source-line=\\\"23\\\">调用fun，防止抛出异常。<\\/p>\\n<h2 id=\\\"8randid\\\" data-source-line=\\\"25\\\"><a class=\\\"anchor\\\" href=\\\"#8randid\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>8.randId<\\/h2>\\n<p data-source-line=\\\"26\\\">【或】xsloader.randId。生成一个随机的唯一ID。<\\/p>\\n<h2 id=\\\"9xsloadercloneobjisdeep\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#9xsloadercloneobjisdeep\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>9.xsloader.clone(obj,isDeep)<\\/h2>\\n<p data-source-line=\\\"29\\\">复制对象。isDeep表示是否深度复制。<\\/p>\\n<h2 id=\\\"10xsloaderis\\\" data-source-line=\\\"31\\\"><a class=\\\"anchor\\\" href=\\\"#10xsloaderis\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>10.xsloader.is...<\\/h2>\\n<ol data-source-line=\\\"32\\\">\\n<li>xsloader.isArray(arg)：是否是数组<\\/li>\\n<li>xsloader.isString(arg)：是否是字符串<\\/li>\\n<li>xsloader.isObject(arg)：是否是Object<\\/li>\\n<li>xsloader.isFunction(arg)：是否是function<\\/li>\\n<li>xsloader.isDate(arg)：是否是Date对象<\\/li>\\n<li>xsloader.isRegExp(arg):是否是正则表达式对象<\\/li>\\n<\\/ol>\\n<h2 id=\\\"11xsloadergetobjectattrobj-attrnamesdefaultvalue\\\" data-source-line=\\\"39\\\"><a class=\\\"anchor\\\" href=\\\"#11xsloadergetobjectattrobj-attrnamesdefaultvalue\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>11.xsloader.getObjectAttr(obj, attrNames,defaultValue)<\\/h2>\\n<p data-source-line=\\\"40\\\">获取对象属性，支持多级调用。<\\/p>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>,\\n    skills:{\\n        js:<span class=\\\"hljs-literal\\\">true<\\/span>\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"12xsloadersetobjectattrobj-attrnames-value\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#12xsloadersetobjectattrobj-attrnames-value\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>12.xsloader.setObjectAttr(obj, attrNames, value)<\\/h2>\\n<p data-source-line=\\\"56\\\">设对象属性，支持多级设置。<\\/p>\\n<pre data-source-line=\\\"58\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> obj={\\n    name:<span class=\\\"hljs-string\\\">\\\"\\\"<\\/span>\\n};\\n\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>, <span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>);\\nxsloader.setObjectAttr(obj, <span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>, <span class=\\\"hljs-literal\\\">true<\\/span>);\\n\\n\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"name\\\"<\\/span>)===<span class=\\\"hljs-string\\\">\\\"Chen\\\"<\\/span>\\nxsloader.getObjectAttr(obj,<span class=\\\"hljs-string\\\">\\\"skills.js\\\"<\\/span>)===<span class=\\\"hljs-literal\\\">true<\\/span><\\/code><\\/pre><h2 id=\\\"13startswithstr-starts\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#13startswithstr-starts\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>13.startsWith(str, starts)<\\/h2>\\n<p data-source-line=\\\"73\\\">判断str是否以字符串starts开头。<\\/p>\\n<h2 id=\\\"14endswithstr-ends\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#14endswithstr-ends\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>14.endsWith(str, ends)<\\/h2>\\n<p data-source-line=\\\"76\\\">判断str是否以字符串ends结尾。<\\/p>\\n<h2 id=\\\"15xsparsejsonstroption\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#15xsparsejsonstroption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>15.xsParseJson(str,option)<\\/h2>\\n<p data-source-line=\\\"79\\\">将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n<strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"81\\\">\\n<li>通过“/*{f}*/”与“/*{f}*/”可包裹function来支持函数，如json字符串{\'callback\':/*{f*/function(){}/*f}*/}。<\\/li>\\n<li>通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。<\\/li>\\n<li>在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"16xsjson2stringobj\\\" data-source-line=\\\"85\\\"><a class=\\\"anchor\\\" href=\\\"#16xsjson2stringobj\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>16.xsJson2String(obj)<\\/h2>\\n<p data-source-line=\\\"86\\\">将对象obj转换成json字符串。<\\/p>\\n<h2 id=\\\"17indexinarrayarray-ele-compare\\\" data-source-line=\\\"88\\\"><a class=\\\"anchor\\\" href=\\\"#17indexinarrayarray-ele-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>17.indexInArray(array, ele, compare)<\\/h2>\\n<p data-source-line=\\\"89\\\">在array中查找指定元素ele第一次出现的位置。<\\/p>\\n<ol data-source-line=\\\"90\\\">\\n<li>compare可选，function(arrEle,ele,index,array),返回boolean。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"18indexinarrayfromarray-eleoffset-compare\\\" data-source-line=\\\"92\\\"><a class=\\\"anchor\\\" href=\\\"#18indexinarrayfromarray-eleoffset-compare\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>18.indexInArrayFrom(array, ele,offset, compare)<\\/h2>\\n<p data-source-line=\\\"93\\\">从offset开始查找，见indexInArray。<\\/p>\\n<h2 id=\\\"19getpathwithrelativepath-relative-ispathdir\\\" data-source-line=\\\"95\\\"><a class=\\\"anchor\\\" href=\\\"#19getpathwithrelativepath-relative-ispathdir\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>19.getPathWithRelative(path, relative, isPathDir)<\\/h2>\\n<p data-source-line=\\\"96\\\">获取相对路径。<\\/p>\\n<ol data-source-line=\\\"97\\\">\\n<li>path：参考地址。<\\/li>\\n<li>relative：相对地址，可以是绝对地址。<\\/li>\\n<li>isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"20appendargs2urlurl-urlargs\\\" data-source-line=\\\"101\\\"><a class=\\\"anchor\\\" href=\\\"#20appendargs2urlurl-urlargs\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>20.appendArgs2Url(url, urlArgs)<\\/h2>\\n<p data-source-line=\\\"102\\\">为url添加参数。<\\/p>\\n<ol data-source-line=\\\"103\\\">\\n<li>urlArgs为字符串：如\\\"a=1&amp;b=2\\\"。<\\/li>\\n<li>urlArgs对象。<\\/li>\\n<\\/ol>\\n<h2 id=\\\"21querystring2paramsmapargsstr-decode\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#21querystring2paramsmapargsstr-decode\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>21.queryString2ParamsMap(argsStr, decode)<\\/h2>\\n<p data-source-line=\\\"107\\\">query字符串对象。decode表示是否进行decodeURIComponent处理，默认true。<\\/p>\\n<pre data-source-line=\\\"109\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">queryString2ParamsMap<\\/span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-string\\\">\\\"a=1&amp;b=2\\\"<\\/span>)<\\/span><\\/span>\\n返回：\\n{\\n    <span class=\\\"hljs-selector-tag\\\">a<\\/span>:<span class=\\\"hljs-string\\\">\\\"1\\\"<\\/span>,\\n    <span class=\\\"hljs-selector-tag\\\">b<\\/span>:<span class=\\\"hljs-string\\\">\\\"2\\\"<\\/span>\\n}<\\/code><\\/pre><h2 id=\\\"22arrayprototypeindexofelemfromindex\\\" data-source-line=\\\"118\\\"><a class=\\\"anchor\\\" href=\\\"#22arrayprototypeindexofelemfromindex\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>22.Array.prototype.indexOf(elem,[fromIndex])<\\/h2>\\n<p data-source-line=\\\"119\\\">查找元素在数组中出现的位置。<\\/p>\\n<h2 id=\\\"23arraypushalltargetarrarr\\\" data-source-line=\\\"121\\\"><a class=\\\"anchor\\\" href=\\\"#23arraypushalltargetarrarr\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>23.Array.pushAll(targetArr,arr)<\\/h2>\\n<p data-source-line=\\\"122\\\">将arr中的所有元素push到targetArr中。<\\/p>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":28,\"month\":6,\"seconds\":51,\"time\":1531909731000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190973123201000051\",\"markdown\":\"## 1.xsloader.config()\\n获取最终配置对象。\\n1. xsloader.config().dealProperties(obj)：使用配置里properties替换obj里的变量。\\n2. xsloader.dealProperties(obj,properties)：使用提供的properties替换obj里的变量。\\n3. xsloader.config().dealUrlArgs(url)：返回加上参数的地址,url可为相当于当前页面地址的路径。\\n\\n## 2.xsloader.script()\\n得到xsloader的script对象。\\n\\n## 3.xsloader.extend(target,obj1,obj2,...)\\n扩展对象。\\n\\n## 4.xsloader.extendDeep(target,obj1,obj2,...)\\n深度扩展对象。\\n\\n## 5.xsloader.IE_VERSION\\nie版本（-1表示不是ie，其余检测结果为ie6~ie11及edge）。\\n\\n## 6.xsloader.asyncCall(fun)\\n异步执行。\\n\\n## 7.xsloader.tryCall(fun, defaultReturn,thiz)\\n调用fun，防止抛出异常。\\n\\n## 8.randId\\n【或】xsloader.randId。生成一个随机的唯一ID。\\n\\n## 9.xsloader.clone(obj,isDeep)\\n复制对象。isDeep表示是否深度复制。\\n\\n## 10.xsloader.is...\\n1. xsloader.isArray(arg)：是否是数组\\n2. xsloader.isString(arg)：是否是字符串\\n3. xsloader.isObject(arg)：是否是Object\\n4. xsloader.isFunction(arg)：是否是function\\n5. xsloader.isDate(arg)：是否是Date对象\\n6. xsloader.isRegExp(arg):是否是正则表达式对象\\n\\n## 11.xsloader.getObjectAttr(obj, attrNames,defaultValue)\\n获取对象属性，支持多级调用。\\n\\n```\\nvar obj={\\n    name:\\\"Chen\\\",\\n    skills:{\\n        js:true\\n    }\\n};\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## 12.xsloader.setObjectAttr(obj, attrNames, value)\\n设对象属性，支持多级设置。\\n\\n```\\nvar obj={\\n    name:\\\"\\\"\\n};\\n\\nxsloader.setObjectAttr(obj, \\\"name\\\", \\\"Chen\\\");\\nxsloader.setObjectAttr(obj, \\\"skills.js\\\", true);\\n\\n\\nxsloader.getObjectAttr(obj,\\\"name\\\")===\\\"Chen\\\"\\nxsloader.getObjectAttr(obj,\\\"skills.js\\\")===true\\n\\n```\\n\\n## 13.startsWith(str, starts)\\n判断str是否以字符串starts开头。\\n\\n## 14.endsWith(str, ends)\\n判断str是否以字符串ends结尾。\\n\\n## 15.xsParseJson(str,option)\\n将字符串转换成json对象。注意：key需要用引号包裹，需要遵守json格式规范。\\n**说明**：\\n1. 通过“/\\\\*{f}\\\\*/”与“/\\\\*{f}\\\\*/”可包裹function来支持函数，如json字符串{\'callback\':/\\\\*{f\\\\*/function(){}/\\\\*f}\\\\*/}。\\n2. 通过option.fnStart与option.fnEnd来指定（1）中函数的开始与结束的标志,如果没有该标志则不会进行函数的转换。\\n3. 在function外的json部分，支持“//#//”行注释,可通过option.rcomment修改(正则相关字符需要转义)。\\n\\n## 16.xsJson2String(obj)\\n将对象obj转换成json字符串。\\n\\n## 17.indexInArray(array, ele, compare)\\n在array中查找指定元素ele第一次出现的位置。\\n1. compare可选，function(arrEle,ele,index,array),返回boolean。\\n\\n## 18.indexInArrayFrom(array, ele,offset, compare)\\n从offset开始查找，见indexInArray。\\n\\n## 19.getPathWithRelative(path, relative, isPathDir)\\n获取相对路径。\\n1. path：参考地址。\\n2. relative：相对地址，可以是绝对地址。\\n3. isPathDir：可选，path是否是目录，默认进自动判断（以\\\"/\\\"结尾、路径名称不含后缀表示目录）。\\n\\n## 20.appendArgs2Url(url, urlArgs)\\n为url添加参数。\\n1. urlArgs为字符串：如\\\"a=1&b=2\\\"。\\n2. urlArgs对象。\\n\\n## 21.queryString2ParamsMap(argsStr, decode)\\nquery字符串对象。decode表示是否进行decodeURIComponent处理，默认true。\\n\\n```\\nqueryString2ParamsMap(\\\"a=1&b=2\\\")\\n返回：\\n{\\n    a:\\\"1\\\",\\n    b:\\\"2\\\"\\n}\\n```\\n\\n## 22.Array.prototype.indexOf(elem,[fromIndex])\\n查找元素在数组中出现的位置。\\n\\n## 23.Array.pushAll(targetArr,arr)\\n将arr中的所有元素push到targetArr中。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"内置函数\",\"projectId\":\"153189028248007000010\",\"sequence\":296,\"status\":1,\"type\":\"ARTICLE\"}','153190973123201000051'),('153197915401408000026',1,'2018-07-19 13:45:54',69,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153197961573908000027',1,'2018-07-19 13:53:36',70,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<h2 id=\\\"option说明\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#option说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>option说明<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    cmd:<\\/span>命令类型名\\n<span class=\\\"hljs-symbol\\\">    originSend:<\\/span>发送源\\n<span class=\\\"hljs-symbol\\\">    originReceive:<\\/span>接收源\\n<span class=\\\"hljs-symbol\\\">    listener:<\\/span>消息监听\\n<span class=\\\"hljs-symbol\\\">    connected:<\\/span>成功连接\\n<span class=\\\"hljs-symbol\\\">    conndata:<\\/span>连接数据\\n}<\\/code><\\/pre><p data-source-line=\\\"13\\\"><strong>参数说明<\\/strong>:<\\/p>\\n<ol data-source-line=\\\"14\\\">\\n<li>cmd:只有相同命令类型的，才可以进行连接<\\/li>\\n<li>originSend:【String】或【function(source)】(返回origin)<\\/li>\\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)<\\/li>\\n<li>listener:【function(data,sender,extra)】<\\/li>\\n<li>connected:【function(sender,conndata,extra)】<\\/li>\\n<li>conndata:【对象】连接时传递的对象<\\/li>\\n<li>extra.originStr：【字符串】对方页面的地址<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"## option说明\\n\\n```\\n{\\n    cmd:命令类型名\\n    originSend:发送源\\n    originReceive:接收源\\n    listener:消息监听\\n    connected:成功连接\\n    conndata:连接数据\\n}\\n```\\n**参数说明**:\\n1. cmd:只有相同命令类型的，才可以进行连接\\n2. originSend:【String】或【function(source)】(返回origin)\\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\\n4. listener:【function(data,sender,extra)】\\n5. connected:【function(sender,conndata,extra)】\\n6. conndata:【对象】连接时传递的对象\\n7. extra.originStr：【字符串】对方页面的地址\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153198184686908000001',1,'2018-07-19 14:30:47',71,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xsmsg','{\"brief\":\"窗口通信模块，支持跨域。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":1,\"commentCount\":0,\"content\":\"<pre data-source-line=\\\"2\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> xsmsg=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xsmsg\\\"<\\/span>);<\\/code><\\/pre><h2 id=\\\"1option说明\\\" data-source-line=\\\"7\\\"><a class=\\\"anchor\\\" href=\\\"#1option说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.option说明<\\/h2>\\n<pre data-source-line=\\\"9\\\"><code class=\\\"hljs\\\">{\\n<span class=\\\"hljs-symbol\\\">    cmd:<\\/span>命令类型名\\n<span class=\\\"hljs-symbol\\\">    originSend:<\\/span>发送源\\n<span class=\\\"hljs-symbol\\\">    originReceive:<\\/span>接收源\\n<span class=\\\"hljs-symbol\\\">    listener:<\\/span>消息监听\\n<span class=\\\"hljs-symbol\\\">    connected:<\\/span>成功连接\\n<span class=\\\"hljs-symbol\\\">    conndata:<\\/span>连接数据\\n}<\\/code><\\/pre><p data-source-line=\\\"19\\\"><strong>参数说明<\\/strong>:<\\/p>\\n<ol data-source-line=\\\"20\\\">\\n<li>cmd:只有相同命令类型的，才可以进行连接<\\/li>\\n<li>originSend:【String】或【function(source)】(返回origin)<\\/li>\\n<li>originReceive:【String】或【function(source,origin,data)】(返回origin)<\\/li>\\n<li>listener:【function(data,sender,extra)】<\\/li>\\n<li>connected:【function(sender,conndata,extra)】<\\/li>\\n<li>conndata:【对象】连接时传递的对象<\\/li>\\n<li>extra.originStr：【字符串】对方页面的地址<\\/li>\\n<\\/ol>\\n<h2 id=\\\"2connectiframeiframe-option\\\" data-source-line=\\\"28\\\"><a class=\\\"anchor\\\" href=\\\"#2connectiframeiframe-option\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.connectIFrame(iframe, option)<\\/h2>\\n<h2 id=\\\"3connectparent-functionoption\\\" data-source-line=\\\"30\\\"><a class=\\\"anchor\\\" href=\\\"#3connectparent-functionoption\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>3.connectParent = function(option)<\\/h2>\\n<h2 id=\\\"a\\\" data-source-line=\\\"32\\\"><a class=\\\"anchor\\\" href=\\\"#a\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a><\\/h2>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":27,\"month\":6,\"seconds\":29,\"time\":1531909649000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190964856301000050\",\"markdown\":\"```\\nvar xsmsg=require(\\\"xsmsg\\\");\\n```\\n\\n\\n## 1.option说明\\n\\n```\\n{\\n    cmd:命令类型名\\n    originSend:发送源\\n    originReceive:接收源\\n    listener:消息监听\\n    connected:成功连接\\n    conndata:连接数据\\n}\\n```\\n**参数说明**:\\n1. cmd:只有相同命令类型的，才可以进行连接\\n2. originSend:【String】或【function(source)】(返回origin)\\n3. originReceive:【String】或【function(source,origin,data)】(返回origin)\\n4. listener:【function(data,sender,extra)】\\n5. connected:【function(sender,conndata,extra)】\\n6. conndata:【对象】连接时传递的对象\\n7. extra.originStr：【字符串】对方页面的地址\\n\\n## 2.connectIFrame(iframe, option)\\n\\n## 3.connectParent = function(option)\\n\\n##\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xsmsg\",\"projectId\":\"153189028248007000010\",\"sequence\":400,\"status\":1,\"type\":\"ARTICLE\"}','153190964856301000050'),('153198266818308000002',1,'2018-07-19 14:44:28',72,'Module','模块','UPDATE','超级管理员','JS Sdk','{\"canDelete\":1,\"category\":\"默认分类\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":12,\"minutes\":5,\"month\":6,\"seconds\":40,\"time\":1531886740000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153188673971709000006\",\"name\":\"JS Sdk\",\"projectId\":\"153188636499907000002\",\"remark\":\"\",\"sequence\":2,\"status\":1,\"templateId\":\"\",\"url\":\"\",\"userId\":\"admin\",\"version\":0}','153188673971709000006'),('153199505975108000003',1,'2018-07-19 18:11:00',73,'ArticleWithBLOBs','文章','UPDATE','超级管理员','xshttp','{\"brief\":\"网络访问模块，对XMLHttpRequest的封装。\",\"canComment\":1,\"canDelete\":1,\"category\":\"API说明\",\"click\":16,\"commentCount\":0,\"content\":\"<h2 id=\\\"1使用方式\\\" data-source-line=\\\"1\\\"><a class=\\\"anchor\\\" href=\\\"#1使用方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>1.使用方式<\\/h2>\\n<pre data-source-line=\\\"3\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> http=<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>);\\n或\\n<span class=\\\"hljs-built_in\\\">require<\\/span>(<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});\\n或\\ndefine([<span class=\\\"hljs-string\\\">\\\"xshttp\\\"<\\/span>],<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span>(<span class=\\\"hljs-params\\\">http<\\/span>)<\\/span>{\\n\\n});<\\/code><\\/pre><h3 id=\\\"通过option方式\\\" data-source-line=\\\"16\\\"><a class=\\\"anchor\\\" href=\\\"#通过option方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过option方式<\\/h3>\\n<pre data-source-line=\\\"18\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> option={\\n    url:<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>,\\n    method:<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>,\\n    params:{\\n        \\n    },\\n    ok:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    },\\n    fail:<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">()<\\/span><\\/span>{\\n    \\n    }\\n};\\n\\nhttp(option).done();<\\/code><\\/pre><hr>\\n<h3 id=\\\"通过函数设置的方式\\\" data-source-line=\\\"37\\\"><a class=\\\"anchor\\\" href=\\\"#通过函数设置的方式\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>通过函数设置的方式<\\/h3>\\n<p data-source-line=\\\"38\\\"><strong>注意<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"39\\\">\\n<li>参数与函数是一一对应的。<\\/li>\\n<li>两种调用方式必都以\\\"<mark>.done()<\\/mark>\\\"结束。<\\/li>\\n<\\/ol>\\n<pre data-source-line=\\\"42\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-selector-tag\\\">http<\\/span>()\\n<span class=\\\"hljs-selector-class\\\">.url<\\/span>(<span class=\\\"hljs-string\\\">\\\"Hello/say\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.method<\\/span>(<span class=\\\"hljs-string\\\">\\\"get\\\"<\\/span>)<span class=\\\"hljs-selector-class\\\">.params<\\/span>({})\\n<span class=\\\"hljs-selector-class\\\">.ok<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.fail<\\/span>(function(){\\n\\n})\\n<span class=\\\"hljs-selector-class\\\">.done<\\/span>();<\\/code><\\/pre><h2 id=\\\"2基本参数说明\\\" data-source-line=\\\"55\\\"><a class=\\\"anchor\\\" href=\\\"#2基本参数说明\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>2.基本参数说明<\\/h2>\\n<h3 id=\\\"url\\\" data-source-line=\\\"57\\\"><a class=\\\"anchor\\\" href=\\\"#url\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>url<\\/h3>\\n<p data-source-line=\\\"58\\\">【String】设置访问的地址<\\/p>\\n<h3 id=\\\"method\\\" data-source-line=\\\"60\\\"><a class=\\\"anchor\\\" href=\\\"#method\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>method<\\/h3>\\n<p data-source-line=\\\"61\\\">【String】设置请求方法：get、post、put、delete等<\\/p>\\n<h3 id=\\\"params\\\" data-source-line=\\\"63\\\"><a class=\\\"anchor\\\" href=\\\"#params\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>params<\\/h3>\\n<p data-source-line=\\\"64\\\">【对象】设置请求参数，为对象的属性会被转换成字符串。<\\/p>\\n<h3 id=\\\"headers\\\" data-source-line=\\\"66\\\"><a class=\\\"anchor\\\" href=\\\"#headers\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>headers<\\/h3>\\n<p data-source-line=\\\"67\\\">【对象】设置请求头。<\\/p>\\n<h3 id=\\\"async\\\" data-source-line=\\\"69\\\"><a class=\\\"anchor\\\" href=\\\"#async\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>async<\\/h3>\\n<p data-source-line=\\\"70\\\">【boolean】设置是否异步，默认true。<\\/p>\\n<h3 id=\\\"multipart\\\" data-source-line=\\\"72\\\"><a class=\\\"anchor\\\" href=\\\"#multipart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>multiPart<\\/h3>\\n<p data-source-line=\\\"73\\\">【boolean】设置是否同multiPart表单提交，默false。<\\/p>\\n<h3 id=\\\"handletype\\\" data-source-line=\\\"75\\\"><a class=\\\"anchor\\\" href=\\\"#handletype\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>handleType<\\/h3>\\n<p data-source-line=\\\"76\\\">【String】设置响应结果的处理类型：json，text。默认json。<\\/p>\\n<h3 id=\\\"ok\\\" data-source-line=\\\"78\\\"><a class=\\\"anchor\\\" href=\\\"#ok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>ok<\\/h3>\\n<p data-source-line=\\\"79\\\">【function】成功的回调。<\\/p>\\n<pre data-source-line=\\\"81\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result,xhr)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"fail\\\" data-source-line=\\\"87\\\"><a class=\\\"anchor\\\" href=\\\"#fail\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>fail<\\/h3>\\n<p data-source-line=\\\"88\\\">【function】失败的回调。<\\/p>\\n<pre data-source-line=\\\"90\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(err)<\\/span><\\/span>{\\n\\n}<\\/code><\\/pre><h3 id=\\\"uploadstart\\\" data-source-line=\\\"96\\\"><a class=\\\"anchor\\\" href=\\\"#uploadstart\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadStart<\\/h3>\\n<p data-source-line=\\\"97\\\">【function】文件上传开始的回调。<\\/p>\\n<h3 id=\\\"uploadprogress\\\" data-source-line=\\\"99\\\"><a class=\\\"anchor\\\" href=\\\"#uploadprogress\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadProgress<\\/h3>\\n<p data-source-line=\\\"100\\\">【function】文件上传中的回调。<\\/p>\\n<h3 id=\\\"uploadok\\\" data-source-line=\\\"102\\\"><a class=\\\"anchor\\\" href=\\\"#uploadok\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadOk<\\/h3>\\n<p data-source-line=\\\"103\\\">【function】文件上传成功的回调。<\\/p>\\n<h3 id=\\\"uploaderror\\\" data-source-line=\\\"106\\\"><a class=\\\"anchor\\\" href=\\\"#uploaderror\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadError<\\/h3>\\n<p data-source-line=\\\"107\\\">【function】文件上传失败的回调。<\\/p>\\n<h3 id=\\\"uploadend\\\" data-source-line=\\\"109\\\"><a class=\\\"anchor\\\" href=\\\"#uploadend\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>uploadEnd<\\/h3>\\n<p data-source-line=\\\"110\\\">【function】文件上传结束的回调,不论成功与否。<\\/p>\\n<h3 id=\\\"_beforeopenhook\\\" data-source-line=\\\"112\\\"><a class=\\\"anchor\\\" href=\\\"#_beforeopenhook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_beforeOpenHook<\\/h3>\\n<p data-source-line=\\\"113\\\">【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"115\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _beforeOpenHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option,xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>();\\n};<\\/code><\\/pre><p data-source-line=\\\"120\\\"><strong>注意<\\/strong>：只有调用callback(),才会继续进行请求。<\\/p>\\n<h3 id=\\\"_onokresponsehook\\\" data-source-line=\\\"123\\\"><a class=\\\"anchor\\\" href=\\\"#_onokresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onOkResponseHook<\\/h3>\\n<p data-source-line=\\\"124\\\">【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"126\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onOkResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(result, option, xhr, callback)<\\/span> <\\/span>{\\n\\t<span class=\\\"hljs-keyword\\\">callback<\\/span>(result);\\n};<\\/code><\\/pre><p data-source-line=\\\"131\\\"><strong>注意<\\/strong>：只有调用callback(result),才会继续调用ok回调。<\\/p>\\n<h3 id=\\\"_onfailresponsehook\\\" data-source-line=\\\"134\\\"><a class=\\\"anchor\\\" href=\\\"#_onfailresponsehook\\\"><span class=\\\"octicon octicon-link\\\"><\\/span><\\/a>_onFailResponseHook<\\/h3>\\n<p data-source-line=\\\"135\\\">【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。<\\/p>\\n<pre data-source-line=\\\"137\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var<\\/span> _onFailResponseHook = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function<\\/span><span class=\\\"hljs-params\\\">(option, xhr, callback,extraErrorType)<\\/span> <\\/span>{\\n\\tcallback(<span class=\\\"hljs-literal\\\">undefined<\\/span>);\\n};<\\/code><\\/pre><p data-source-line=\\\"142\\\"><strong>说明<\\/strong>：<\\/p>\\n<ol data-source-line=\\\"143\\\">\\n<li>callback(undefined)：表示进行默认fail回调。<\\/li>\\n<li>callback(false)：不会进后面的fail回调。<\\/li>\\n<li>callback(result)：会进行ok回调，回调结果是result。<\\/li>\\n<li>extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。<\\/li>\\n<\\/ol>\",\"createTime\":{\"date\":18,\"day\":3,\"hours\":18,\"minutes\":26,\"month\":6,\"seconds\":28,\"time\":1531909588000,\"timezoneOffset\":-480,\"year\":118},\"id\":\"153190958824901000049\",\"markdown\":\"## 1.使用方式\\n\\n```\\nvar http=require(\\\"xshttp\\\");\\n或\\nrequire(\\\"xshttp\\\",function(http){\\n\\n});\\n或\\ndefine([\\\"xshttp\\\"],function(http){\\n\\n});\\n```\\n\\n\\n### 通过option方式\\n\\n```\\nvar option={\\n    url:\\\"Hello/say\\\",\\n    method:\\\"get\\\",\\n    params:{\\n        \\n    },\\n    ok:function(){\\n    \\n    },\\n    fail:function(){\\n    \\n    }\\n};\\n\\nhttp(option).done();\\n```\\n\\n---\\n### 通过函数设置的方式\\n**注意**：\\n1. 参数与函数是一一对应的。\\n2. 两种调用方式必都以\\\"==.done()==\\\"结束。\\n\\n```\\nhttp()\\n.url(\\\"Hello/say\\\").method(\\\"get\\\").params({})\\n.ok(function(){\\n\\n})\\n.fail(function(){\\n\\n})\\n.done();\\n\\n```\\n\\n## 2.基本参数说明\\n\\n### url\\n【String】设置访问的地址\\n\\n### method\\n【String】设置请求方法：get、post、put、delete等\\n\\n### params\\n【对象】设置请求参数，为对象的属性会被转换成字符串。\\n\\n### headers\\n【对象】设置请求头。\\n\\n### async\\n【boolean】设置是否异步，默认true。\\n\\n### multiPart\\n【boolean】设置是否同multiPart表单提交，默false。\\n\\n### handleType\\n【String】设置响应结果的处理类型：json，text。默认json。\\n\\n### ok\\n【function】成功的回调。\\n\\n```\\nfunction(result,xhr){\\n\\n}\\n```\\n\\n### fail\\n【function】失败的回调。\\n\\n```\\nfunction(err){\\n\\n}\\n```\\n\\n### uploadStart\\n【function】文件上传开始的回调。\\n\\n### uploadProgress\\n【function】文件上传中的回调。\\n\\n### uploadOk\\n【function】文件上传成功的回调。\\n\\n\\n### uploadError\\n【function】文件上传失败的回调。\\n\\n### uploadEnd\\n【function】文件上传结束的回调,不论成功与否。\\n\\n### _beforeOpenHook\\n【function】打开连接前的回调。通过http._beforeOpenHook可设置全局回调。\\n\\n```\\nvar _beforeOpenHook = function(option,xhr, callback) {\\n\\tcallback();\\n};\\n```\\n**注意**：只有调用callback(),才会继续进行请求。\\n\\n\\n### _onOkResponseHook\\n【function】成功请求、调用ok之前的回调。通过http._onOkResponseHook可设置全局回调。\\n\\n```\\nvar _onOkResponseHook = function(result, option, xhr, callback) {\\n\\tcallback(result);\\n};\\n```\\n**注意**：只有调用callback(result),才会继续调用ok回调。\\n\\n\\n### _onFailResponseHook\\n【function】请求失败、调用fail之前的回调。通过http._onFailResponseHook可设置全局回调。\\n\\n```\\nvar _onFailResponseHook = function(option, xhr, callback,extraErrorType) {\\n\\tcallback(undefined);\\n};\\n```\\n**说明**：\\n1. callback(undefined)：表示进行默认fail回调。\\n2. callback(false)：不会进后面的fail回调。\\n3. callback(result)：会进行ok回调，回调结果是result。\\n4. extraErrorType==\\\"parse-json-error\\\"：表示转换成json时出错。\",\"mkey\":\"\",\"moduleId\":\"153189041004409000012\",\"name\":\"xshttp\",\"projectId\":\"153189028248007000010\",\"sequence\":386,\"status\":1,\"type\":\"ARTICLE\"}','153190958824901000049');

/*Table structure for table `menu` */

DROP TABLE IF EXISTS `menu`;

CREATE TABLE `menu` (
  `id` varchar(50) NOT NULL DEFAULT '导航菜单编号',
  `menuName` varchar(50) NOT NULL COMMENT '菜单名称',
  `menuUrl` varchar(200) DEFAULT NULL COMMENT '菜单链接',
  `roleIds` varchar(512) DEFAULT NULL COMMENT '角色可见集合  （ID之间以逗号分隔）',
  `parentId` varchar(50) DEFAULT '0',
  `iconRemark` varchar(100) DEFAULT NULL,
  `type` varchar(45) DEFAULT NULL COMMENT '前端菜单、后台菜单',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`),
  KEY `index_parentId` (`parentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `menu` */

insert  into `menu`(`id`,`menuName`,`menuUrl`,`roleIds`,`parentId`,`iconRemark`,`type`,`createTime`,`status`,`sequence`) values ('152612004179705000008','快捷菜单',NULL,NULL,'0','<i class=\"iconfont\"></i>','FRONT','2018-05-12 18:14:02',1,1),('152612008276705000009','v8.0.0用户使用视频','index.do#/152611968062607000001/article/detail/152611971673309000002/ARTICLE/152611998276001000007',NULL,'152612004179705000008',NULL,'FRONT','2018-05-12 18:14:43',1,1);

/*Table structure for table `module` */

DROP TABLE IF EXISTS `module`;

CREATE TABLE `module` (
  `id` varchar(50) NOT NULL COMMENT '所属模块ID',
  `name` varchar(100) NOT NULL COMMENT '所属模块名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT '模块地址',
  `canDelete` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1：可删除，0：不可删除',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '备注',
  `userId` varchar(50) NOT NULL DEFAULT '',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  `templateId` varchar(50) DEFAULT NULL COMMENT '接口模板ID',
  `version` int(11) NOT NULL DEFAULT '0',
  `category` varchar(200) NOT NULL DEFAULT '' COMMENT '文章分类，多个分类以逗号分割，每个分类最多10个字',
  PRIMARY KEY (`id`),
  KEY `index_uid_seq_time` (`userId`,`sequence`,`createTime`),
  KEY `index_pid_seq_time` (`projectId`,`sequence`,`createTime`),
  KEY `index_templateId` (`templateId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `module` */

insert  into `module`(`id`,`name`,`createTime`,`status`,`sequence`,`url`,`canDelete`,`remark`,`userId`,`projectId`,`templateId`,`version`,`category`) values ('153188673971709000006','JS Sdk帮助文档','2018-07-18 12:05:40',1,2,'',1,'请看**文章**','admin','153188636499907000002',NULL,0,'核心功能,UI功能'),('153189041004409000012','xsloader基础帮助文档','2018-07-18 13:06:50',1,3,'',1,'','admin','153189028248007000010',NULL,0,'API说明,例子');

/*Table structure for table `project` */

DROP TABLE IF EXISTS `project`;

CREATE TABLE `project` (
  `id` varchar(50) NOT NULL COMMENT '项目ID',
  `name` varchar(100) NOT NULL COMMENT '项目名称',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '2：推荐项目，3，管理员管理项目，4，管理管理&推荐项目，-1：默认debug项目',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '备注',
  `userId` varchar(50) NOT NULL DEFAULT '',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1:私有项目，2公开项目，3公开推荐',
  `password` varchar(45) DEFAULT NULL,
  `cover` varchar(200) NOT NULL DEFAULT 'resources/images/cover.png' COMMENT '项目封面',
  `luceneSearch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否允许建立Lucene搜索',
  PRIMARY KEY (`id`),
  KEY `index_status_seq_createTime` (`status`,`sequence`,`createTime`),
  KEY `index_userId_seq_createTime` (`userId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `project` */

insert  into `project`(`id`,`name`,`createTime`,`status`,`sequence`,`remark`,`userId`,`type`,`password`,`cover`,`luceneSearch`) values ('153188636499907000002','公共文档','2018-07-18 11:59:25',2,100,'','admin',2,'e54f53c5b8132e6b14ee0b7655776120','resources/images/cover.png',1),('153189028248007000010','xsloader.js加载器','2018-07-18 13:04:42',2,1,'帮助文档请看**文章**，开源地址:https://github.com/gzxishan/xsloader','admin',2,NULL,'resources/images/cover.png',1);

/*Table structure for table `project_user` */

DROP TABLE IF EXISTS `project_user`;

CREATE TABLE `project_user` (
  `id` varchar(50) NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `projectId` varchar(50) NOT NULL,
  `userId` varchar(50) NOT NULL,
  `addModule` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加模块',
  `delModule` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除模块',
  `modModule` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可是修改模块',
  `addInter` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加接口',
  `delInter` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除接口',
  `modInter` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改接口',
  `addArticle` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加文章',
  `delArticle` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除文章',
  `modArticle` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改文章',
  `addSource` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加资源',
  `delSource` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除资源',
  `modSource` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改资源',
  `addDict` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加数据字典',
  `delDict` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除数据字典',
  `modDict` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改数据字典',
  `userEmail` varchar(45) DEFAULT NULL,
  `userName` varchar(50) DEFAULT NULL,
  `addError` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以添加错误码',
  `delError` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可以删除错误码',
  `modError` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以修改错误码',
  PRIMARY KEY (`id`),
  UNIQUE KEY `project_user` (`userId`,`projectId`),
  KEY `index_uid_seq_time` (`userId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `project_user` */

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `id` varchar(50) NOT NULL COMMENT '角色ID',
  `roleName` varchar(50) NOT NULL COMMENT '角色名称',
  `auth` text NOT NULL,
  `authName` text,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `role` */

/*Table structure for table `setting` */

DROP TABLE IF EXISTS `setting`;

CREATE TABLE `setting` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `mkey` varchar(20) NOT NULL,
  `value` varchar(500) NOT NULL,
  `remark` varchar(500) DEFAULT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `type` varchar(10) NOT NULL DEFAULT 'TEXT' COMMENT '设置类型（IMAGE,LINK,TEXT）',
  `canDelete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '1：可删除，0：不可删除',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `show` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否在前端显示，1：是，0：否',
  PRIMARY KEY (`id`),
  UNIQUE KEY `key` (`mkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `setting` */

insert  into `setting`(`id`,`mkey`,`value`,`remark`,`createTime`,`status`,`type`,`canDelete`,`sequence`,`show`) values ('0','tes','test555','test555','2017-12-30 03:44:49',1,'TEXT',0,1,1),('062f01ae-e50b-4dd3-808b-b4a6d65eeadc','LOGO','http://api.crap.cn/resources/upload/images/2016-04-27/231357cAgbyp.png','网站主logo，可以直接在value中填写绝对链接地址，也可以自行上传图片','2016-03-29 12:23:18',1,'IMAGE',0,90,1),('8a95bc2f-ea61-4dd6-8163-d9c520b28181','VISITCODE','true','游客访问私密模块输入密码的同时是否需要输入图像验证码？true为需要，其他为不需要','2016-03-31 18:07:14',0,'TEXT',0,90,1),('98ecca1b-f762-4cd3-831a-4042b36419d8','VERIFICATIONCODE','false','是否开启安全登录？ture为开启，其他为不开启，开启后登录将需要输入图片验证码','2016-03-31 18:07:58',0,'TEXT',0,90,1),('b97a3a75-c1c3-42cc-b944-8fb5ac5c5f49','SECRETKEY','crapApiKey','秘钥，用于cookie加密等','2016-03-31 01:04:40',0,'TEXT',0,90,1),('de94c622-02fc-4b39-9cc5-0c24870ac21f','TITLE','CrapApi|Api接口管理系统','站点标题','2016-03-30 19:09:13',1,'TEXT',0,90,1),('e0dec957-5043-4c6e-9225-960fbc401116','ICON','http://api2.crap.cn/resources/upload/images/2016-04-04/063633hG35aC.ico','站点ICON图标（浏览器标题栏图标）','2016-03-30 19:49:41',1,'IMAGE',0,100,1),('e2a493a7-c4f0-4cbb-832f-4495a7074252','LOGINBG','https://dn-coding-net-production-static.qbox.me/d58141c9-9a0c-40b0-a408-5935fd70670f.jpg','登陆背景图','2016-08-25 08:02:28',1,'IMAGE',0,100,1),('e2a493a7-c888-4cbb-832f-4495a7074252','TITLEBG','https://dn-coding-net-production-static.qbox.me/3c9bcbc0-15dc-4a6f-a81f-5112936b7773.jpg','头部标题背景图：resources/images/project.jpg,为空则显示主色调','2016-08-25 08:02:28',1,'IMAGE',0,99,1),('ecd676c2-0b04-4b4a-a049-4a825221a6d0','BG_COLOR','#f7f7f7','前端显示背景颜色','2016-04-28 13:07:37',1,'COLOR',0,98,1),('ef157b7f-cc53-4a41-9679-d243d478023d','COMMENTCODE','true','游客评论是否需要输入验证码','2016-04-14 22:47:29',1,'TEXT',0,90,1),('f1c8dc8b-9cd8-4839-b38a-1cea3ceb3942','MAX_WIDTH','1200','前端显示最大宽度（数字，建议：900-1200）','2016-04-28 13:07:37',1,'TEXT',0,90,1),('fff-1111-d4839-b38a-898343435462','ANONYMOUS_COMMENT','false','是否允许匿名评论, true:允许','2017-08-06 15:55:00',1,'TEXT',0,100,1),('fff-8888-d4839-b38a-898343435462','ICONFONT','//at.alicdn.com/t/font_afbmuhv5zc15rk9','图标地址（cdn图标库或本地图标库）','2018-05-01 20:27:00',1,'ICONFONT',0,100,1),('fff-9191-d4839-b38a-898343435462','DESCRIPTION','免费开源的API接口管理系统、文档管理系统。系统特点：极致简单、开源开放、技术前沿。主要功能有：接口管理、接口调试、文档管理、数据字典管理、文章管理....。','搜索引描述','2018-05-04 22:53:11',1,'TEXT',0,100,1),('fff-9999-d4839-b38a-898343435462','KEYWORDS','CrapApi,api,crap,接口管理,应用接口管理,开源接口管理,开源api接口管理,api接口管理','搜索引擎关键字','2018-05-04 22:53:11',1,'TEXT',0,100,1),('foc8dc8b-9cd8-4839-b38a-1cea3ceb3942','FOOTER_BG_COLOR','#000000','前端顶部、底部颜色 #383942','2016-04-28 13:07:37',1,'COLOR',0,91,1),('fpc8dc8b-9cd8-4839-b38a-1cea3ceb3942','FOOTER_COLOR','#a9a9a9','前端顶部、底部字体颜色 #a9a9a9','2016-04-28 13:07:37',1,'COLOR',0,97,1),('fpmbdc00-9cd8-4839-b38a-1cea3ceb3945','LUCENE_DIR','/usr/local/crap/lucene','Lucene全文检索文件存储地址','2016-06-06 13:07:37',1,'TEXT',0,22,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3942','MAIN_COLOR','#407aaa','网站主色调，默认#CC6699 #007742','2016-04-28 13:07:37',1,'COLOR',0,100,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3945','FONT_FAMILY','\"Lantinghei SC\", \"Open Sans\", Arial, \"Hiragino Sans GB\", \"Microsoft YaHei\", \"STHeiti\", \"WenQuanYi Micro Hei\", SimSun, sans-serif;','网站字体','2016-06-06 13:07:37',1,'FONTFAMILY',0,77,1),('fpmbdc8b-9cd8-4839-b38a-1cea3ceb3999','ADORN_COLOR','#f82c1d','装饰背景颜色:左侧导航条背景颜色 #1c2034','2016-06-06 13:07:37',1,'COLOR',0,26,1),('fpmbdc8b-9cd8-4839-b38a-898343435462','INDEX_PAGE','dashboard.htm','前端首页：只能以index.do、font/ 开头的url','2017-06-11 17:57:39',1,'INDEXPAGE',0,66,1);

/*Table structure for table `source` */

DROP TABLE IF EXISTS `source`;

CREATE TABLE `source` (
  `id` varchar(50) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `sequence` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `name` varchar(100) NOT NULL COMMENT '资源名称',
  `updateTime` timestamp NOT NULL DEFAULT '2015-12-31 08:00:00',
  `moduleId` varchar(50) NOT NULL DEFAULT '0' COMMENT '模块ID',
  `remark` varchar(5000) NOT NULL DEFAULT '' COMMENT '备注',
  `filePath` varchar(200) NOT NULL DEFAULT '' COMMENT '文件目录',
  `projectId` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `index_mod_seq_time` (`moduleId`,`sequence`,`createTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `source` */

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` varchar(50) NOT NULL,
  `userName` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL DEFAULT '',
  `trueName` varchar(50) NOT NULL DEFAULT '' COMMENT '用户真实姓名或昵称',
  `roleId` varchar(1024) NOT NULL DEFAULT '',
  `roleName` varchar(1024) NOT NULL DEFAULT '',
  `auth` varchar(1024) NOT NULL DEFAULT '',
  `authName` varchar(1024) NOT NULL DEFAULT '',
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `sequence` int(11) NOT NULL DEFAULT '0' COMMENT '排序，越大越靠前',
  `type` tinyint(4) NOT NULL DEFAULT '100' COMMENT '用户类型：1普通用户，100：管理员',
  `email` varchar(45) DEFAULT NULL,
  `avatarUrl` varchar(500) NOT NULL DEFAULT '' COMMENT '用户头像',
  `loginType` int(11) NOT NULL DEFAULT '0' COMMENT '0：账号登陆，1：github登陆，2：码云',
  `thirdlyId` varchar(100) DEFAULT NULL COMMENT '第三方唯一ID',
  `passwordSalt` varchar(20) DEFAULT NULL COMMENT '密码MD5盐',
  PRIMARY KEY (`id`),
  UNIQUE KEY `loginType_userName` (`userName`,`loginType`),
  UNIQUE KEY `loginType_Email` (`email`,`loginType`),
  KEY `index_thirdlyId` (`thirdlyId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`userName`,`password`,`trueName`,`roleId`,`roleName`,`auth`,`authName`,`createTime`,`status`,`sequence`,`type`,`email`,`avatarUrl`,`loginType`,`thirdlyId`,`passwordSalt`) values ('153188505026806000001','test','d49ebcf816a3503b8e17cc0ecec38017','','','','','','2018-07-18 11:37:30',1,1,1,'test@xishankeji.com','resources/avatar/avatar4.jpg',0,NULL,'mDvJPIC353Cs9CteegFn'),('admin','admin','d49ebcf816a3503b8e17cc0ecec38017','超级管理员','super,','超级管理员,','','','2016-03-29 12:24:00',1,0,100,'ihsantang@163.com','',0,'','mDvJPIC353Cs9CteegFn');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
